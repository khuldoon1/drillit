{"ast":null,"code":"import { BlendColorFactor, OneMinusBlendColorFactor } from '../../common/Constants.js';\nimport { GPUInputStepMode, GPUFrontFace, GPUCullMode, GPUColorWriteFlags, GPUCompareFunction, GPUBlendFactor, GPUBlendOperation, GPUIndexFormat, GPUStencilOperation } from './WebGPUConstants.js';\nimport { FrontSide, BackSide, DoubleSide, NeverDepth, AlwaysDepth, LessDepth, LessEqualDepth, EqualDepth, GreaterEqualDepth, GreaterDepth, NotEqualDepth, NoBlending, NormalBlending, AdditiveBlending, SubtractiveBlending, MultiplyBlending, CustomBlending, ZeroFactor, OneFactor, SrcColorFactor, OneMinusSrcColorFactor, SrcAlphaFactor, OneMinusSrcAlphaFactor, DstColorFactor, OneMinusDstColorFactor, DstAlphaFactor, OneMinusDstAlphaFactor, SrcAlphaSaturateFactor, AddEquation, SubtractEquation, ReverseSubtractEquation, MinEquation, MaxEquation, KeepStencilOp, ZeroStencilOp, ReplaceStencilOp, InvertStencilOp, IncrementStencilOp, DecrementStencilOp, IncrementWrapStencilOp, DecrementWrapStencilOp, NeverStencilFunc, AlwaysStencilFunc, LessStencilFunc, LessEqualStencilFunc, EqualStencilFunc, GreaterEqualStencilFunc, GreaterStencilFunc, NotEqualStencilFunc } from 'three';\nclass WebGPUPipelineUtils {\n  constructor(backend) {\n    this.backend = backend;\n  }\n  createRenderPipeline(renderObject) {\n    const {\n      object,\n      material,\n      geometry,\n      pipeline\n    } = renderObject;\n    const {\n      vertexProgram,\n      fragmentProgram\n    } = pipeline;\n    const backend = this.backend;\n    const device = backend.device;\n    const utils = backend.utils;\n    const pipelineData = backend.get(pipeline);\n\n    // determine shader attributes\n\n    const shaderAttributes = backend.attributeUtils.createShaderAttributes(renderObject);\n\n    // vertex buffers\n\n    const vertexBuffers = [];\n    for (const attribute of shaderAttributes) {\n      const geometryAttribute = attribute.geometryAttribute;\n      const stepMode = geometryAttribute !== undefined && geometryAttribute.isInstancedBufferAttribute ? GPUInputStepMode.Instance : GPUInputStepMode.Vertex;\n      vertexBuffers.push({\n        arrayStride: attribute.arrayStride,\n        attributes: [{\n          shaderLocation: attribute.slot,\n          offset: attribute.offset,\n          format: attribute.format\n        }],\n        stepMode: stepMode\n      });\n    }\n\n    // blending\n\n    let alphaBlend = {};\n    let colorBlend = {};\n    if (material.transparent === true && material.blending !== NoBlending) {\n      alphaBlend = this._getAlphaBlend(material);\n      colorBlend = this._getColorBlend(material);\n    }\n\n    // stencil\n\n    let stencilFront = {};\n    if (material.stencilWrite === true) {\n      stencilFront = {\n        compare: this._getStencilCompare(material),\n        failOp: this._getStencilOperation(material.stencilFail),\n        depthFailOp: this._getStencilOperation(material.stencilZFail),\n        passOp: this._getStencilOperation(material.stencilZPass)\n      };\n    }\n\n    //\n\n    const vertexModule = backend.get(vertexProgram).module;\n    const fragmentModule = backend.get(fragmentProgram).module;\n    const primitiveState = this._getPrimitiveState(object, geometry, material);\n    const colorWriteMask = this._getColorWriteMask(material);\n    const depthCompare = this._getDepthCompare(material);\n    const colorFormat = utils.getCurrentColorFormat(renderObject.context);\n    const depthStencilFormat = utils.getCurrentDepthStencilFormat(renderObject.context);\n    const sampleCount = utils.getSampleCount(renderObject.context);\n    pipelineData.pipeline = device.createRenderPipeline({\n      vertex: Object.assign({}, vertexModule, {\n        buffers: vertexBuffers\n      }),\n      fragment: Object.assign({}, fragmentModule, {\n        targets: [{\n          format: colorFormat,\n          blend: {\n            alpha: alphaBlend,\n            color: colorBlend\n          },\n          writeMask: colorWriteMask\n        }]\n      }),\n      primitive: primitiveState,\n      depthStencil: {\n        format: depthStencilFormat,\n        depthWriteEnabled: material.depthWrite,\n        depthCompare: depthCompare,\n        stencilFront: stencilFront,\n        stencilBack: {},\n        // three.js does not provide an API to configure the back function (gl.stencilFuncSeparate() was never used)\n        stencilReadMask: material.stencilFuncMask,\n        stencilWriteMask: material.stencilWriteMask\n      },\n      multisample: {\n        count: sampleCount\n      },\n      layout: 'auto'\n    });\n  }\n  createComputePipeline(pipeline) {\n    const backend = this.backend;\n    const device = backend.device;\n    const computeProgram = backend.get(pipeline.computeProgram).module;\n    const pipelineGPU = backend.get(pipeline);\n    pipelineGPU.pipeline = device.createComputePipeline({\n      compute: computeProgram,\n      layout: 'auto'\n    });\n  }\n  _getAlphaBlend(material) {\n    const blending = material.blending;\n    const premultipliedAlpha = material.premultipliedAlpha;\n    let alphaBlend = undefined;\n    switch (blending) {\n      case NormalBlending:\n        if (premultipliedAlpha === false) {\n          alphaBlend = {\n            srcFactor: GPUBlendFactor.One,\n            dstFactor: GPUBlendFactor.OneMinusSrcAlpha,\n            operation: GPUBlendOperation.Add\n          };\n        }\n        break;\n      case AdditiveBlending:\n        alphaBlend = {\n          srcFactor: GPUBlendFactor.Zero,\n          dstFactor: GPUBlendFactor.One,\n          operation: GPUBlendOperation.Add\n        };\n        break;\n      case SubtractiveBlending:\n        if (premultipliedAlpha === true) {\n          alphaBlend = {\n            srcFactor: GPUBlendFactor.OneMinusSrcColor,\n            dstFactor: GPUBlendFactor.OneMinusSrcAlpha,\n            operation: GPUBlendOperation.Add\n          };\n        }\n        break;\n      case MultiplyBlending:\n        if (premultipliedAlpha === true) {\n          alphaBlend = {\n            srcFactor: GPUBlendFactor.Zero,\n            dstFactor: GPUBlendFactor.SrcAlpha,\n            operation: GPUBlendOperation.Add\n          };\n        }\n        break;\n      case CustomBlending:\n        const blendSrcAlpha = material.blendSrcAlpha;\n        const blendDstAlpha = material.blendDstAlpha;\n        const blendEquationAlpha = material.blendEquationAlpha;\n        if (blendSrcAlpha !== null && blendDstAlpha !== null && blendEquationAlpha !== null) {\n          alphaBlend = {\n            srcFactor: this._getBlendFactor(blendSrcAlpha),\n            dstFactor: this._getBlendFactor(blendDstAlpha),\n            operation: this._getBlendOperation(blendEquationAlpha)\n          };\n        }\n        break;\n      default:\n        console.error('THREE.WebGPURenderer: Blending not supported.', blending);\n    }\n    return alphaBlend;\n  }\n  _getBlendFactor(blend) {\n    let blendFactor;\n    switch (blend) {\n      case ZeroFactor:\n        blendFactor = GPUBlendFactor.Zero;\n        break;\n      case OneFactor:\n        blendFactor = GPUBlendFactor.One;\n        break;\n      case SrcColorFactor:\n        blendFactor = GPUBlendFactor.SrcColor;\n        break;\n      case OneMinusSrcColorFactor:\n        blendFactor = GPUBlendFactor.OneMinusSrcColor;\n        break;\n      case SrcAlphaFactor:\n        blendFactor = GPUBlendFactor.SrcAlpha;\n        break;\n      case OneMinusSrcAlphaFactor:\n        blendFactor = GPUBlendFactor.OneMinusSrcAlpha;\n        break;\n      case DstColorFactor:\n        blendFactor = GPUBlendFactor.DstColor;\n        break;\n      case OneMinusDstColorFactor:\n        blendFactor = GPUBlendFactor.OneMinusDstColor;\n        break;\n      case DstAlphaFactor:\n        blendFactor = GPUBlendFactor.DstAlpha;\n        break;\n      case OneMinusDstAlphaFactor:\n        blendFactor = GPUBlendFactor.OneMinusDstAlpha;\n        break;\n      case SrcAlphaSaturateFactor:\n        blendFactor = GPUBlendFactor.SrcAlphaSaturated;\n        break;\n      case BlendColorFactor:\n        blendFactor = GPUBlendFactor.BlendColor;\n        break;\n      case OneMinusBlendColorFactor:\n        blendFactor = GPUBlendFactor.OneMinusBlendColor;\n        break;\n      default:\n        console.error('THREE.WebGPURenderer: Blend factor not supported.', blend);\n    }\n    return blendFactor;\n  }\n  _getColorBlend(material) {\n    const blending = material.blending;\n    const premultipliedAlpha = material.premultipliedAlpha;\n    const colorBlend = {\n      srcFactor: null,\n      dstFactor: null,\n      operation: null\n    };\n    switch (blending) {\n      case NormalBlending:\n        colorBlend.srcFactor = premultipliedAlpha === true ? GPUBlendFactor.One : GPUBlendFactor.SrcAlpha;\n        colorBlend.dstFactor = GPUBlendFactor.OneMinusSrcAlpha;\n        colorBlend.operation = GPUBlendOperation.Add;\n        break;\n      case AdditiveBlending:\n        colorBlend.srcFactor = premultipliedAlpha === true ? GPUBlendFactor.One : GPUBlendFactor.SrcAlpha;\n        colorBlend.dstFactor = GPUBlendFactor.One;\n        colorBlend.operation = GPUBlendOperation.Add;\n        break;\n      case SubtractiveBlending:\n        colorBlend.srcFactor = GPUBlendFactor.Zero;\n        colorBlend.dstFactor = premultipliedAlpha === true ? GPUBlendFactor.Zero : GPUBlendFactor.OneMinusSrcColor;\n        colorBlend.operation = GPUBlendOperation.Add;\n        break;\n      case MultiplyBlending:\n        colorBlend.srcFactor = GPUBlendFactor.Zero;\n        colorBlend.dstFactor = GPUBlendFactor.SrcColor;\n        colorBlend.operation = GPUBlendOperation.Add;\n        break;\n      case CustomBlending:\n        colorBlend.srcFactor = this._getBlendFactor(material.blendSrc);\n        colorBlend.dstFactor = this._getBlendFactor(material.blendDst);\n        colorBlend.operation = this._getBlendOperation(material.blendEquation);\n        break;\n      default:\n        console.error('THREE.WebGPURenderer: Blending not supported.', blending);\n    }\n    return colorBlend;\n  }\n  _getStencilCompare(material) {\n    let stencilCompare;\n    const stencilFunc = material.stencilFunc;\n    switch (stencilFunc) {\n      case NeverStencilFunc:\n        stencilCompare = GPUCompareFunction.Never;\n        break;\n      case AlwaysStencilFunc:\n        stencilCompare = GPUCompareFunction.Always;\n        break;\n      case LessStencilFunc:\n        stencilCompare = GPUCompareFunction.Less;\n        break;\n      case LessEqualStencilFunc:\n        stencilCompare = GPUCompareFunction.LessEqual;\n        break;\n      case EqualStencilFunc:\n        stencilCompare = GPUCompareFunction.Equal;\n        break;\n      case GreaterEqualStencilFunc:\n        stencilCompare = GPUCompareFunction.GreaterEqual;\n        break;\n      case GreaterStencilFunc:\n        stencilCompare = GPUCompareFunction.Greater;\n        break;\n      case NotEqualStencilFunc:\n        stencilCompare = GPUCompareFunction.NotEqual;\n        break;\n      default:\n        console.error('THREE.WebGPURenderer: Invalid stencil function.', stencilFunc);\n    }\n    return stencilCompare;\n  }\n  _getStencilOperation(op) {\n    let stencilOperation;\n    switch (op) {\n      case KeepStencilOp:\n        stencilOperation = GPUStencilOperation.Keep;\n        break;\n      case ZeroStencilOp:\n        stencilOperation = GPUStencilOperation.Zero;\n        break;\n      case ReplaceStencilOp:\n        stencilOperation = GPUStencilOperation.Replace;\n        break;\n      case InvertStencilOp:\n        stencilOperation = GPUStencilOperation.Invert;\n        break;\n      case IncrementStencilOp:\n        stencilOperation = GPUStencilOperation.IncrementClamp;\n        break;\n      case DecrementStencilOp:\n        stencilOperation = GPUStencilOperation.DecrementClamp;\n        break;\n      case IncrementWrapStencilOp:\n        stencilOperation = GPUStencilOperation.IncrementWrap;\n        break;\n      case DecrementWrapStencilOp:\n        stencilOperation = GPUStencilOperation.DecrementWrap;\n        break;\n      default:\n        console.error('THREE.WebGPURenderer: Invalid stencil operation.', stencilOperation);\n    }\n    return stencilOperation;\n  }\n  _getBlendOperation(blendEquation) {\n    let blendOperation;\n    switch (blendEquation) {\n      case AddEquation:\n        blendOperation = GPUBlendOperation.Add;\n        break;\n      case SubtractEquation:\n        blendOperation = GPUBlendOperation.Subtract;\n        break;\n      case ReverseSubtractEquation:\n        blendOperation = GPUBlendOperation.ReverseSubtract;\n        break;\n      case MinEquation:\n        blendOperation = GPUBlendOperation.Min;\n        break;\n      case MaxEquation:\n        blendOperation = GPUBlendOperation.Max;\n        break;\n      default:\n        console.error('THREE.WebGPUPipelineUtils: Blend equation not supported.', blendEquation);\n    }\n    return blendOperation;\n  }\n  _getPrimitiveState(object, geometry, material) {\n    const descriptor = {};\n    const utils = this.backend.utils;\n    descriptor.topology = utils.getPrimitiveTopology(object, material);\n    if (object.isLine === true && object.isLineSegments !== true) {\n      const count = geometry.index ? geometry.index.count : geometry.attributes.position.count;\n      descriptor.stripIndexFormat = count > 65535 ? GPUIndexFormat.Uint32 : GPUIndexFormat.Uint16; // define data type for primitive restart value\n    }\n\n    switch (material.side) {\n      case FrontSide:\n        descriptor.frontFace = GPUFrontFace.CW;\n        descriptor.cullMode = GPUCullMode.Front;\n        break;\n      case BackSide:\n        descriptor.frontFace = GPUFrontFace.CW;\n        descriptor.cullMode = GPUCullMode.Back;\n        break;\n      case DoubleSide:\n        descriptor.frontFace = GPUFrontFace.CW;\n        descriptor.cullMode = GPUCullMode.None;\n        break;\n      default:\n        console.error('THREE.WebGPUPipelineUtils: Unknown material.side value.', material.side);\n        break;\n    }\n    return descriptor;\n  }\n  _getColorWriteMask(material) {\n    return material.colorWrite === true ? GPUColorWriteFlags.All : GPUColorWriteFlags.None;\n  }\n  _getDepthCompare(material) {\n    let depthCompare;\n    if (material.depthTest === false) {\n      depthCompare = GPUCompareFunction.Always;\n    } else {\n      const depthFunc = material.depthFunc;\n      switch (depthFunc) {\n        case NeverDepth:\n          depthCompare = GPUCompareFunction.Never;\n          break;\n        case AlwaysDepth:\n          depthCompare = GPUCompareFunction.Always;\n          break;\n        case LessDepth:\n          depthCompare = GPUCompareFunction.Less;\n          break;\n        case LessEqualDepth:\n          depthCompare = GPUCompareFunction.LessEqual;\n          break;\n        case EqualDepth:\n          depthCompare = GPUCompareFunction.Equal;\n          break;\n        case GreaterEqualDepth:\n          depthCompare = GPUCompareFunction.GreaterEqual;\n          break;\n        case GreaterDepth:\n          depthCompare = GPUCompareFunction.Greater;\n          break;\n        case NotEqualDepth:\n          depthCompare = GPUCompareFunction.NotEqual;\n          break;\n        default:\n          console.error('THREE.WebGPUPipelineUtils: Invalid depth function.', depthFunc);\n      }\n    }\n    return depthCompare;\n  }\n}\nexport default WebGPUPipelineUtils;","map":{"version":3,"names":["BlendColorFactor","OneMinusBlendColorFactor","GPUInputStepMode","GPUFrontFace","GPUCullMode","GPUColorWriteFlags","GPUCompareFunction","GPUBlendFactor","GPUBlendOperation","GPUIndexFormat","GPUStencilOperation","FrontSide","BackSide","DoubleSide","NeverDepth","AlwaysDepth","LessDepth","LessEqualDepth","EqualDepth","GreaterEqualDepth","GreaterDepth","NotEqualDepth","NoBlending","NormalBlending","AdditiveBlending","SubtractiveBlending","MultiplyBlending","CustomBlending","ZeroFactor","OneFactor","SrcColorFactor","OneMinusSrcColorFactor","SrcAlphaFactor","OneMinusSrcAlphaFactor","DstColorFactor","OneMinusDstColorFactor","DstAlphaFactor","OneMinusDstAlphaFactor","SrcAlphaSaturateFactor","AddEquation","SubtractEquation","ReverseSubtractEquation","MinEquation","MaxEquation","KeepStencilOp","ZeroStencilOp","ReplaceStencilOp","InvertStencilOp","IncrementStencilOp","DecrementStencilOp","IncrementWrapStencilOp","DecrementWrapStencilOp","NeverStencilFunc","AlwaysStencilFunc","LessStencilFunc","LessEqualStencilFunc","EqualStencilFunc","GreaterEqualStencilFunc","GreaterStencilFunc","NotEqualStencilFunc","WebGPUPipelineUtils","constructor","backend","createRenderPipeline","renderObject","object","material","geometry","pipeline","vertexProgram","fragmentProgram","device","utils","pipelineData","get","shaderAttributes","attributeUtils","createShaderAttributes","vertexBuffers","attribute","geometryAttribute","stepMode","undefined","isInstancedBufferAttribute","Instance","Vertex","push","arrayStride","attributes","shaderLocation","slot","offset","format","alphaBlend","colorBlend","transparent","blending","_getAlphaBlend","_getColorBlend","stencilFront","stencilWrite","compare","_getStencilCompare","failOp","_getStencilOperation","stencilFail","depthFailOp","stencilZFail","passOp","stencilZPass","vertexModule","module","fragmentModule","primitiveState","_getPrimitiveState","colorWriteMask","_getColorWriteMask","depthCompare","_getDepthCompare","colorFormat","getCurrentColorFormat","context","depthStencilFormat","getCurrentDepthStencilFormat","sampleCount","getSampleCount","vertex","Object","assign","buffers","fragment","targets","blend","alpha","color","writeMask","primitive","depthStencil","depthWriteEnabled","depthWrite","stencilBack","stencilReadMask","stencilFuncMask","stencilWriteMask","multisample","count","layout","createComputePipeline","computeProgram","pipelineGPU","compute","premultipliedAlpha","srcFactor","One","dstFactor","OneMinusSrcAlpha","operation","Add","Zero","OneMinusSrcColor","SrcAlpha","blendSrcAlpha","blendDstAlpha","blendEquationAlpha","_getBlendFactor","_getBlendOperation","console","error","blendFactor","SrcColor","DstColor","OneMinusDstColor","DstAlpha","OneMinusDstAlpha","SrcAlphaSaturated","BlendColor","OneMinusBlendColor","blendSrc","blendDst","blendEquation","stencilCompare","stencilFunc","Never","Always","Less","LessEqual","Equal","GreaterEqual","Greater","NotEqual","op","stencilOperation","Keep","Replace","Invert","IncrementClamp","DecrementClamp","IncrementWrap","DecrementWrap","blendOperation","Subtract","ReverseSubtract","Min","Max","descriptor","topology","getPrimitiveTopology","isLine","isLineSegments","index","position","stripIndexFormat","Uint32","Uint16","side","frontFace","CW","cullMode","Front","Back","None","colorWrite","All","depthTest","depthFunc"],"sources":["C:/Users/LENOVO/Desktop/reactjsProject/drillit/node_modules/three/examples/jsm/renderers/webgpu/utils/WebGPUPipelineUtils.js"],"sourcesContent":["import { BlendColorFactor, OneMinusBlendColorFactor, } from '../../common/Constants.js';\r\n\r\nimport {\r\n\tGPUInputStepMode, GPUFrontFace, GPUCullMode, GPUColorWriteFlags, GPUCompareFunction, GPUBlendFactor, GPUBlendOperation, GPUIndexFormat, GPUStencilOperation\r\n} from './WebGPUConstants.js';\r\n\r\nimport {\r\n\tFrontSide, BackSide, DoubleSide,\r\n\tNeverDepth, AlwaysDepth, LessDepth, LessEqualDepth, EqualDepth, GreaterEqualDepth, GreaterDepth, NotEqualDepth,\r\n\tNoBlending, NormalBlending, AdditiveBlending, SubtractiveBlending, MultiplyBlending, CustomBlending,\r\n\tZeroFactor, OneFactor, SrcColorFactor, OneMinusSrcColorFactor, SrcAlphaFactor, OneMinusSrcAlphaFactor, DstColorFactor,\r\n\tOneMinusDstColorFactor, DstAlphaFactor, OneMinusDstAlphaFactor, SrcAlphaSaturateFactor,\r\n\tAddEquation, SubtractEquation, ReverseSubtractEquation, MinEquation, MaxEquation,\r\n\tKeepStencilOp, ZeroStencilOp, ReplaceStencilOp, InvertStencilOp, IncrementStencilOp, DecrementStencilOp, IncrementWrapStencilOp, DecrementWrapStencilOp,\r\n\tNeverStencilFunc, AlwaysStencilFunc, LessStencilFunc, LessEqualStencilFunc, EqualStencilFunc, GreaterEqualStencilFunc, GreaterStencilFunc, NotEqualStencilFunc\r\n} from 'three';\r\n\r\nclass WebGPUPipelineUtils {\r\n\r\n\tconstructor( backend ) {\r\n\r\n\t\tthis.backend = backend;\r\n\r\n\t}\r\n\r\n\tcreateRenderPipeline( renderObject ) {\r\n\r\n\t\tconst { object, material, geometry, pipeline } = renderObject;\r\n\t\tconst { vertexProgram, fragmentProgram } = pipeline;\r\n\r\n\t\tconst backend = this.backend;\r\n\t\tconst device = backend.device;\r\n\t\tconst utils = backend.utils;\r\n\r\n\t\tconst pipelineData = backend.get( pipeline );\r\n\r\n\t\t// determine shader attributes\r\n\r\n\t\tconst shaderAttributes = backend.attributeUtils.createShaderAttributes( renderObject );\r\n\r\n\t\t// vertex buffers\r\n\r\n\t\tconst vertexBuffers = [];\r\n\r\n\t\tfor ( const attribute of shaderAttributes ) {\r\n\r\n\t\t\tconst geometryAttribute = attribute.geometryAttribute;\r\n\t\t\tconst stepMode = ( geometryAttribute !== undefined && geometryAttribute.isInstancedBufferAttribute ) ? GPUInputStepMode.Instance : GPUInputStepMode.Vertex;\r\n\r\n\t\t\tvertexBuffers.push( {\r\n\t\t\t\tarrayStride: attribute.arrayStride,\r\n\t\t\t\tattributes: [ { shaderLocation: attribute.slot, offset: attribute.offset, format: attribute.format } ],\r\n\t\t\t\tstepMode: stepMode\r\n\t\t\t} );\r\n\r\n\t\t}\r\n\r\n\t\t// blending\r\n\r\n\t\tlet alphaBlend = {};\r\n\t\tlet colorBlend = {};\r\n\r\n\t\tif ( material.transparent === true && material.blending !== NoBlending ) {\r\n\r\n\t\t\talphaBlend = this._getAlphaBlend( material );\r\n\t\t\tcolorBlend = this._getColorBlend( material );\r\n\r\n\t\t}\r\n\r\n\t\t// stencil\r\n\r\n\t\tlet stencilFront = {};\r\n\r\n\t\tif ( material.stencilWrite === true ) {\r\n\r\n\t\t\tstencilFront = {\r\n\t\t\t\tcompare: this._getStencilCompare( material ),\r\n\t\t\t\tfailOp: this._getStencilOperation( material.stencilFail ),\r\n\t\t\t\tdepthFailOp: this._getStencilOperation( material.stencilZFail ),\r\n\t\t\t\tpassOp: this._getStencilOperation( material.stencilZPass )\r\n\t\t\t};\r\n\r\n\t\t}\r\n\r\n\t\t//\r\n\r\n\t\tconst vertexModule = backend.get( vertexProgram ).module;\r\n\t\tconst fragmentModule = backend.get( fragmentProgram ).module;\r\n\r\n\t\tconst primitiveState = this._getPrimitiveState( object, geometry, material );\r\n\t\tconst colorWriteMask = this._getColorWriteMask( material );\r\n\t\tconst depthCompare = this._getDepthCompare( material );\r\n\t\tconst colorFormat = utils.getCurrentColorFormat( renderObject.context );\r\n\t\tconst depthStencilFormat = utils.getCurrentDepthStencilFormat( renderObject.context );\r\n\t\tconst sampleCount = utils.getSampleCount( renderObject.context );\r\n\r\n\t\tpipelineData.pipeline = device.createRenderPipeline( {\r\n\t\t\tvertex: Object.assign( {}, vertexModule, { buffers: vertexBuffers } ),\r\n\t\t\tfragment: Object.assign( {}, fragmentModule, { targets: [ {\r\n\t\t\t\tformat: colorFormat,\r\n\t\t\t\tblend: {\r\n\t\t\t\t\talpha: alphaBlend,\r\n\t\t\t\t\tcolor: colorBlend\r\n\t\t\t\t},\r\n\t\t\t\twriteMask: colorWriteMask\r\n\t\t\t} ] } ),\r\n\t\t\tprimitive: primitiveState,\r\n\t\t\tdepthStencil: {\r\n\t\t\t\tformat: depthStencilFormat,\r\n\t\t\t\tdepthWriteEnabled: material.depthWrite,\r\n\t\t\t\tdepthCompare: depthCompare,\r\n\t\t\t\tstencilFront: stencilFront,\r\n\t\t\t\tstencilBack: {}, // three.js does not provide an API to configure the back function (gl.stencilFuncSeparate() was never used)\r\n\t\t\t\tstencilReadMask: material.stencilFuncMask,\r\n\t\t\t\tstencilWriteMask: material.stencilWriteMask\r\n\t\t\t},\r\n\t\t\tmultisample: {\r\n\t\t\t\tcount: sampleCount\r\n\t\t\t},\r\n\t\t\tlayout: 'auto'\r\n\t\t} );\r\n\r\n\t}\r\n\r\n\tcreateComputePipeline( pipeline ) {\r\n\r\n\t\tconst backend = this.backend;\r\n\t\tconst device = backend.device;\r\n\r\n\t\tconst computeProgram = backend.get( pipeline.computeProgram ).module;\r\n\r\n\t\tconst pipelineGPU = backend.get( pipeline );\r\n\r\n\t\tpipelineGPU.pipeline = device.createComputePipeline( {\r\n\t\t\tcompute: computeProgram,\r\n\t\t\tlayout: 'auto'\r\n\t\t} );\r\n\r\n\t}\r\n\r\n\t_getAlphaBlend( material ) {\r\n\r\n\t\tconst blending = material.blending;\r\n\t\tconst premultipliedAlpha = material.premultipliedAlpha;\r\n\r\n\t\tlet alphaBlend = undefined;\r\n\r\n\t\tswitch ( blending ) {\r\n\r\n\t\t\tcase NormalBlending:\r\n\r\n\t\t\t\tif ( premultipliedAlpha === false ) {\r\n\r\n\t\t\t\t\talphaBlend = {\r\n\t\t\t\t\t\tsrcFactor: GPUBlendFactor.One,\r\n\t\t\t\t\t\tdstFactor: GPUBlendFactor.OneMinusSrcAlpha,\r\n\t\t\t\t\t\toperation: GPUBlendOperation.Add\r\n\t\t\t\t\t};\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase AdditiveBlending:\r\n\r\n\t\t\t\talphaBlend = {\r\n\t\t\t\t\tsrcFactor: GPUBlendFactor.Zero,\r\n\t\t\t\t\tdstFactor: GPUBlendFactor.One,\r\n\t\t\t\t\toperation: GPUBlendOperation.Add\r\n\t\t\t\t};\r\n\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase SubtractiveBlending:\r\n\r\n\t\t\t\tif ( premultipliedAlpha === true ) {\r\n\r\n\t\t\t\t\talphaBlend = {\r\n\t\t\t\t\t\tsrcFactor: GPUBlendFactor.OneMinusSrcColor,\r\n\t\t\t\t\t\tdstFactor: GPUBlendFactor.OneMinusSrcAlpha,\r\n\t\t\t\t\t\toperation: GPUBlendOperation.Add\r\n\t\t\t\t\t};\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase MultiplyBlending:\r\n\r\n\t\t\t\tif ( premultipliedAlpha === true ) {\r\n\r\n\t\t\t\t\talphaBlend = {\r\n\t\t\t\t\t\tsrcFactor: GPUBlendFactor.Zero,\r\n\t\t\t\t\t\tdstFactor: GPUBlendFactor.SrcAlpha,\r\n\t\t\t\t\t\toperation: GPUBlendOperation.Add\r\n\t\t\t\t\t};\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase CustomBlending:\r\n\r\n\t\t\t\tconst blendSrcAlpha = material.blendSrcAlpha;\r\n\t\t\t\tconst blendDstAlpha = material.blendDstAlpha;\r\n\t\t\t\tconst blendEquationAlpha = material.blendEquationAlpha;\r\n\r\n\t\t\t\tif ( blendSrcAlpha !== null && blendDstAlpha !== null && blendEquationAlpha !== null ) {\r\n\r\n\t\t\t\t\talphaBlend = {\r\n\t\t\t\t\t\tsrcFactor: this._getBlendFactor( blendSrcAlpha ),\r\n\t\t\t\t\t\tdstFactor: this._getBlendFactor( blendDstAlpha ),\r\n\t\t\t\t\t\toperation: this._getBlendOperation( blendEquationAlpha )\r\n\t\t\t\t\t};\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tdefault:\r\n\t\t\t\tconsole.error( 'THREE.WebGPURenderer: Blending not supported.', blending );\r\n\r\n\t\t}\r\n\r\n\t\treturn alphaBlend;\r\n\r\n\t}\r\n\r\n\t_getBlendFactor( blend ) {\r\n\r\n\t\tlet blendFactor;\r\n\r\n\t\tswitch ( blend ) {\r\n\r\n\t\t\tcase ZeroFactor:\r\n\t\t\t\tblendFactor = GPUBlendFactor.Zero;\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase OneFactor:\r\n\t\t\t\tblendFactor = GPUBlendFactor.One;\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase SrcColorFactor:\r\n\t\t\t\tblendFactor = GPUBlendFactor.SrcColor;\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase OneMinusSrcColorFactor:\r\n\t\t\t\tblendFactor = GPUBlendFactor.OneMinusSrcColor;\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase SrcAlphaFactor:\r\n\t\t\t\tblendFactor = GPUBlendFactor.SrcAlpha;\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase OneMinusSrcAlphaFactor:\r\n\t\t\t\tblendFactor = GPUBlendFactor.OneMinusSrcAlpha;\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase DstColorFactor:\r\n\t\t\t\tblendFactor = GPUBlendFactor.DstColor;\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase OneMinusDstColorFactor:\r\n\t\t\t\tblendFactor = GPUBlendFactor.OneMinusDstColor;\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase DstAlphaFactor:\r\n\t\t\t\tblendFactor = GPUBlendFactor.DstAlpha;\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase OneMinusDstAlphaFactor:\r\n\t\t\t\tblendFactor = GPUBlendFactor.OneMinusDstAlpha;\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase SrcAlphaSaturateFactor:\r\n\t\t\t\tblendFactor = GPUBlendFactor.SrcAlphaSaturated;\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase BlendColorFactor:\r\n\t\t\t\tblendFactor = GPUBlendFactor.BlendColor;\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase OneMinusBlendColorFactor:\r\n\t\t\t\tblendFactor = GPUBlendFactor.OneMinusBlendColor;\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tdefault:\r\n\t\t\t\tconsole.error( 'THREE.WebGPURenderer: Blend factor not supported.', blend );\r\n\r\n\t\t}\r\n\r\n\t\treturn blendFactor;\r\n\r\n\t}\r\n\r\n\t_getColorBlend( material ) {\r\n\r\n\t\tconst blending = material.blending;\r\n\t\tconst premultipliedAlpha = material.premultipliedAlpha;\r\n\r\n\t\tconst colorBlend = {\r\n\t\t\tsrcFactor: null,\r\n\t\t\tdstFactor: null,\r\n\t\t\toperation: null\r\n\t\t};\r\n\r\n\t\tswitch ( blending ) {\r\n\r\n\t\t\tcase NormalBlending:\r\n\t\t\t\tcolorBlend.srcFactor = ( premultipliedAlpha === true ) ? GPUBlendFactor.One : GPUBlendFactor.SrcAlpha;\r\n\t\t\t\tcolorBlend.dstFactor = GPUBlendFactor.OneMinusSrcAlpha;\r\n\t\t\t\tcolorBlend.operation = GPUBlendOperation.Add;\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase AdditiveBlending:\r\n\t\t\t\tcolorBlend.srcFactor = ( premultipliedAlpha === true ) ? GPUBlendFactor.One : GPUBlendFactor.SrcAlpha;\r\n\t\t\t\tcolorBlend.dstFactor = GPUBlendFactor.One;\r\n\t\t\t\tcolorBlend.operation = GPUBlendOperation.Add;\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase SubtractiveBlending:\r\n\t\t\t\tcolorBlend.srcFactor = GPUBlendFactor.Zero;\r\n\t\t\t\tcolorBlend.dstFactor = ( premultipliedAlpha === true ) ? GPUBlendFactor.Zero : GPUBlendFactor.OneMinusSrcColor;\r\n\t\t\t\tcolorBlend.operation = GPUBlendOperation.Add;\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase MultiplyBlending:\r\n\t\t\t\tcolorBlend.srcFactor = GPUBlendFactor.Zero;\r\n\t\t\t\tcolorBlend.dstFactor = GPUBlendFactor.SrcColor;\r\n\t\t\t\tcolorBlend.operation = GPUBlendOperation.Add;\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase CustomBlending:\r\n\t\t\t\tcolorBlend.srcFactor = this._getBlendFactor( material.blendSrc );\r\n\t\t\t\tcolorBlend.dstFactor = this._getBlendFactor( material.blendDst );\r\n\t\t\t\tcolorBlend.operation = this._getBlendOperation( material.blendEquation );\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tdefault:\r\n\t\t\t\tconsole.error( 'THREE.WebGPURenderer: Blending not supported.', blending );\r\n\r\n\t\t}\r\n\r\n\t\treturn colorBlend;\r\n\r\n\t}\r\n\r\n\t_getStencilCompare( material ) {\r\n\r\n\t\tlet stencilCompare;\r\n\r\n\t\tconst stencilFunc = material.stencilFunc;\r\n\r\n\t\tswitch ( stencilFunc ) {\r\n\r\n\t\t\tcase NeverStencilFunc:\r\n\t\t\t\tstencilCompare = GPUCompareFunction.Never;\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase AlwaysStencilFunc:\r\n\t\t\t\tstencilCompare = GPUCompareFunction.Always;\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase LessStencilFunc:\r\n\t\t\t\tstencilCompare = GPUCompareFunction.Less;\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase LessEqualStencilFunc:\r\n\t\t\t\tstencilCompare = GPUCompareFunction.LessEqual;\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase EqualStencilFunc:\r\n\t\t\t\tstencilCompare = GPUCompareFunction.Equal;\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase GreaterEqualStencilFunc:\r\n\t\t\t\tstencilCompare = GPUCompareFunction.GreaterEqual;\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase GreaterStencilFunc:\r\n\t\t\t\tstencilCompare = GPUCompareFunction.Greater;\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase NotEqualStencilFunc:\r\n\t\t\t\tstencilCompare = GPUCompareFunction.NotEqual;\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tdefault:\r\n\t\t\t\tconsole.error( 'THREE.WebGPURenderer: Invalid stencil function.', stencilFunc );\r\n\r\n\t\t}\r\n\r\n\t\treturn stencilCompare;\r\n\r\n\t}\r\n\r\n\t_getStencilOperation( op ) {\r\n\r\n\t\tlet stencilOperation;\r\n\r\n\t\tswitch ( op ) {\r\n\r\n\t\t\tcase KeepStencilOp:\r\n\t\t\t\tstencilOperation = GPUStencilOperation.Keep;\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase ZeroStencilOp:\r\n\t\t\t\tstencilOperation = GPUStencilOperation.Zero;\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase ReplaceStencilOp:\r\n\t\t\t\tstencilOperation = GPUStencilOperation.Replace;\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase InvertStencilOp:\r\n\t\t\t\tstencilOperation = GPUStencilOperation.Invert;\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase IncrementStencilOp:\r\n\t\t\t\tstencilOperation = GPUStencilOperation.IncrementClamp;\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase DecrementStencilOp:\r\n\t\t\t\tstencilOperation = GPUStencilOperation.DecrementClamp;\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase IncrementWrapStencilOp:\r\n\t\t\t\tstencilOperation = GPUStencilOperation.IncrementWrap;\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase DecrementWrapStencilOp:\r\n\t\t\t\tstencilOperation = GPUStencilOperation.DecrementWrap;\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tdefault:\r\n\t\t\t\tconsole.error( 'THREE.WebGPURenderer: Invalid stencil operation.', stencilOperation );\r\n\r\n\t\t}\r\n\r\n\t\treturn stencilOperation;\r\n\r\n\t}\r\n\r\n\t_getBlendOperation( blendEquation ) {\r\n\r\n\t\tlet blendOperation;\r\n\r\n\t\tswitch ( blendEquation ) {\r\n\r\n\t\t\tcase AddEquation:\r\n\t\t\t\tblendOperation = GPUBlendOperation.Add;\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase SubtractEquation:\r\n\t\t\t\tblendOperation = GPUBlendOperation.Subtract;\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase ReverseSubtractEquation:\r\n\t\t\t\tblendOperation = GPUBlendOperation.ReverseSubtract;\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase MinEquation:\r\n\t\t\t\tblendOperation = GPUBlendOperation.Min;\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase MaxEquation:\r\n\t\t\t\tblendOperation = GPUBlendOperation.Max;\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tdefault:\r\n\t\t\t\tconsole.error( 'THREE.WebGPUPipelineUtils: Blend equation not supported.', blendEquation );\r\n\r\n\t\t}\r\n\r\n\t\treturn blendOperation;\r\n\r\n\t}\r\n\r\n\t_getPrimitiveState( object, geometry, material ) {\r\n\r\n\t\tconst descriptor = {};\r\n\t\tconst utils = this.backend.utils;\r\n\r\n\t\tdescriptor.topology = utils.getPrimitiveTopology( object, material );\r\n\r\n\t\tif ( object.isLine === true && object.isLineSegments !== true ) {\r\n\r\n\t\t\tconst count = ( geometry.index ) ? geometry.index.count : geometry.attributes.position.count;\r\n\t\t\tdescriptor.stripIndexFormat = ( count > 65535 ) ? GPUIndexFormat.Uint32 : GPUIndexFormat.Uint16; // define data type for primitive restart value\r\n\r\n\t\t}\r\n\r\n\t\tswitch ( material.side ) {\r\n\r\n\t\t\tcase FrontSide:\r\n\t\t\t\tdescriptor.frontFace = GPUFrontFace.CW;\r\n\t\t\t\tdescriptor.cullMode = GPUCullMode.Front;\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase BackSide:\r\n\t\t\t\tdescriptor.frontFace = GPUFrontFace.CW;\r\n\t\t\t\tdescriptor.cullMode = GPUCullMode.Back;\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase DoubleSide:\r\n\t\t\t\tdescriptor.frontFace = GPUFrontFace.CW;\r\n\t\t\t\tdescriptor.cullMode = GPUCullMode.None;\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tdefault:\r\n\t\t\t\tconsole.error( 'THREE.WebGPUPipelineUtils: Unknown material.side value.', material.side );\r\n\t\t\t\tbreak;\r\n\r\n\t\t}\r\n\r\n\t\treturn descriptor;\r\n\r\n\t}\r\n\r\n\t_getColorWriteMask( material ) {\r\n\r\n\t\treturn ( material.colorWrite === true ) ? GPUColorWriteFlags.All : GPUColorWriteFlags.None;\r\n\r\n\t}\r\n\r\n\t_getDepthCompare( material ) {\r\n\r\n\t\tlet depthCompare;\r\n\r\n\t\tif ( material.depthTest === false ) {\r\n\r\n\t\t\tdepthCompare = GPUCompareFunction.Always;\r\n\r\n\t\t} else {\r\n\r\n\t\t\tconst depthFunc = material.depthFunc;\r\n\r\n\t\t\tswitch ( depthFunc ) {\r\n\r\n\t\t\t\tcase NeverDepth:\r\n\t\t\t\t\tdepthCompare = GPUCompareFunction.Never;\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase AlwaysDepth:\r\n\t\t\t\t\tdepthCompare = GPUCompareFunction.Always;\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase LessDepth:\r\n\t\t\t\t\tdepthCompare = GPUCompareFunction.Less;\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase LessEqualDepth:\r\n\t\t\t\t\tdepthCompare = GPUCompareFunction.LessEqual;\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase EqualDepth:\r\n\t\t\t\t\tdepthCompare = GPUCompareFunction.Equal;\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase GreaterEqualDepth:\r\n\t\t\t\t\tdepthCompare = GPUCompareFunction.GreaterEqual;\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase GreaterDepth:\r\n\t\t\t\t\tdepthCompare = GPUCompareFunction.Greater;\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase NotEqualDepth:\r\n\t\t\t\t\tdepthCompare = GPUCompareFunction.NotEqual;\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tconsole.error( 'THREE.WebGPUPipelineUtils: Invalid depth function.', depthFunc );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn depthCompare;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default WebGPUPipelineUtils;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}