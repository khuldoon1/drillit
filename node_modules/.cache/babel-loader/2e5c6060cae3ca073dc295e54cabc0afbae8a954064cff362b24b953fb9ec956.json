{"ast":null,"code":"import InputNode from '../core/InputNode.js';\nimport { addNodeClass } from '../core/Node.js';\nimport { varying } from '../core/VaryingNode.js';\nimport { nodeObject } from '../shadernode/ShaderNode.js';\nimport { InterleavedBufferAttribute, InterleavedBuffer, StaticDrawUsage, DynamicDrawUsage } from 'three';\nclass BufferAttributeNode extends InputNode {\n  constructor(value, bufferType) {\n    let bufferStride = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    let bufferOffset = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n    super(value, bufferType);\n    this.isBufferNode = true;\n    this.bufferType = bufferType;\n    this.bufferStride = bufferStride;\n    this.bufferOffset = bufferOffset;\n    this.usage = StaticDrawUsage;\n  }\n  construct(builder) {\n    const type = this.getNodeType(builder);\n    const array = this.value;\n    const itemSize = builder.getTypeLength(type);\n    const stride = this.bufferStride || itemSize;\n    const offset = this.bufferOffset;\n    const buffer = new InterleavedBuffer(array, stride);\n    const bufferAttribute = new InterleavedBufferAttribute(buffer, itemSize, offset);\n    buffer.setUsage(this.usage);\n    this.attribute = bufferAttribute;\n    this.attribute.isInstancedBufferAttribute = true; // @TODO: Add a possible: InstancedInterleavedBufferAttribute\n  }\n\n  generate(builder) {\n    const nodeType = this.getNodeType(builder);\n    const nodeUniform = builder.getBufferAttributeFromNode(this, nodeType);\n    const propertyName = builder.getPropertyName(nodeUniform);\n    let output = null;\n    if (builder.shaderStage === 'vertex') {\n      output = propertyName;\n    } else {\n      const nodeVarying = varying(this);\n      output = nodeVarying.build(builder, nodeType);\n    }\n    return output;\n  }\n  getInputType( /*builder*/\n  ) {\n    return 'bufferAttribute';\n  }\n}\nexport default BufferAttributeNode;\nexport const bufferAttribute = (array, type, stride, offset) => nodeObject(new BufferAttributeNode(array, type, stride, offset));\nexport const dynamicBufferAttribute = (array, type, stride, offset) => {\n  const node = bufferAttribute(array, type, stride, offset);\n  node.usage = DynamicDrawUsage;\n  return node;\n};\naddNodeClass(BufferAttributeNode);","map":{"version":3,"names":["InputNode","addNodeClass","varying","nodeObject","InterleavedBufferAttribute","InterleavedBuffer","StaticDrawUsage","DynamicDrawUsage","BufferAttributeNode","constructor","value","bufferType","bufferStride","arguments","length","undefined","bufferOffset","isBufferNode","usage","construct","builder","type","getNodeType","array","itemSize","getTypeLength","stride","offset","buffer","bufferAttribute","setUsage","attribute","isInstancedBufferAttribute","generate","nodeType","nodeUniform","getBufferAttributeFromNode","propertyName","getPropertyName","output","shaderStage","nodeVarying","build","getInputType","dynamicBufferAttribute","node"],"sources":["C:/Users/LENOVO/Desktop/reactjsProject/drillit/node_modules/three/examples/jsm/nodes/accessors/BufferAttributeNode.js"],"sourcesContent":["import InputNode from '../core/InputNode.js';\r\nimport { addNodeClass } from '../core/Node.js';\r\nimport { varying } from '../core/VaryingNode.js';\r\nimport { nodeObject } from '../shadernode/ShaderNode.js';\r\nimport { InterleavedBufferAttribute, InterleavedBuffer, StaticDrawUsage, DynamicDrawUsage } from 'three';\r\n\r\nclass BufferAttributeNode extends InputNode {\r\n\r\n\tconstructor( value, bufferType, bufferStride = 0, bufferOffset = 0 ) {\r\n\r\n\t\tsuper( value, bufferType );\r\n\r\n\t\tthis.isBufferNode = true;\r\n\r\n\t\tthis.bufferType = bufferType;\r\n\t\tthis.bufferStride = bufferStride;\r\n\t\tthis.bufferOffset = bufferOffset;\r\n\r\n\t\tthis.usage = StaticDrawUsage;\r\n\r\n\t}\r\n\r\n\tconstruct( builder ) {\r\n\r\n\t\tconst type = this.getNodeType( builder );\r\n\t\tconst array = this.value;\r\n\t\tconst itemSize = builder.getTypeLength( type );\r\n\t\tconst stride = this.bufferStride || itemSize;\r\n\t\tconst offset = this.bufferOffset;\r\n\r\n\t\tconst buffer = new InterleavedBuffer( array, stride );\r\n\t\tconst bufferAttribute = new InterleavedBufferAttribute( buffer, itemSize, offset );\r\n\r\n\t\tbuffer.setUsage( this.usage );\r\n\r\n\t\tthis.attribute = bufferAttribute;\r\n\t\tthis.attribute.isInstancedBufferAttribute = true; // @TODO: Add a possible: InstancedInterleavedBufferAttribute\r\n\r\n\t}\r\n\r\n\tgenerate( builder ) {\r\n\r\n\t\tconst nodeType = this.getNodeType( builder );\r\n\r\n\t\tconst nodeUniform = builder.getBufferAttributeFromNode( this, nodeType );\r\n\t\tconst propertyName = builder.getPropertyName( nodeUniform );\r\n\r\n\t\tlet output = null;\r\n\r\n\t\tif ( builder.shaderStage === 'vertex' ) {\r\n\r\n\t\t\toutput = propertyName;\r\n\r\n\t\t} else {\r\n\r\n\t\t\tconst nodeVarying = varying( this );\r\n\r\n\t\t\toutput = nodeVarying.build( builder, nodeType );\r\n\r\n\t\t}\r\n\r\n\t\treturn output;\r\n\r\n\t}\r\n\r\n\tgetInputType( /*builder*/ ) {\r\n\r\n\t\treturn 'bufferAttribute';\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default BufferAttributeNode;\r\n\r\nexport const bufferAttribute = ( array, type, stride, offset ) => nodeObject( new BufferAttributeNode( array, type, stride, offset ) );\r\nexport const dynamicBufferAttribute = ( array, type, stride, offset ) => {\r\n\r\n\tconst node = bufferAttribute( array, type, stride, offset );\r\n\tnode.usage = DynamicDrawUsage;\r\n\r\n\treturn node;\r\n\r\n};\r\n\r\naddNodeClass( BufferAttributeNode );\r\n"],"mappings":"AAAA,OAAOA,SAAS,MAAM,sBAAsB;AAC5C,SAASC,YAAY,QAAQ,iBAAiB;AAC9C,SAASC,OAAO,QAAQ,wBAAwB;AAChD,SAASC,UAAU,QAAQ,6BAA6B;AACxD,SAASC,0BAA0B,EAAEC,iBAAiB,EAAEC,eAAe,EAAEC,gBAAgB,QAAQ,OAAO;AAExG,MAAMC,mBAAmB,SAASR,SAAS,CAAC;EAE3CS,WAAWA,CAAEC,KAAK,EAAEC,UAAU,EAAuC;IAAA,IAArCC,YAAY,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,CAAC;IAAA,IAAEG,YAAY,GAAAH,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,CAAC;IAEjE,KAAK,CAAEH,KAAK,EAAEC,UAAW,CAAC;IAE1B,IAAI,CAACM,YAAY,GAAG,IAAI;IAExB,IAAI,CAACN,UAAU,GAAGA,UAAU;IAC5B,IAAI,CAACC,YAAY,GAAGA,YAAY;IAChC,IAAI,CAACI,YAAY,GAAGA,YAAY;IAEhC,IAAI,CAACE,KAAK,GAAGZ,eAAe;EAE7B;EAEAa,SAASA,CAAEC,OAAO,EAAG;IAEpB,MAAMC,IAAI,GAAG,IAAI,CAACC,WAAW,CAAEF,OAAQ,CAAC;IACxC,MAAMG,KAAK,GAAG,IAAI,CAACb,KAAK;IACxB,MAAMc,QAAQ,GAAGJ,OAAO,CAACK,aAAa,CAAEJ,IAAK,CAAC;IAC9C,MAAMK,MAAM,GAAG,IAAI,CAACd,YAAY,IAAIY,QAAQ;IAC5C,MAAMG,MAAM,GAAG,IAAI,CAACX,YAAY;IAEhC,MAAMY,MAAM,GAAG,IAAIvB,iBAAiB,CAAEkB,KAAK,EAAEG,MAAO,CAAC;IACrD,MAAMG,eAAe,GAAG,IAAIzB,0BAA0B,CAAEwB,MAAM,EAAEJ,QAAQ,EAAEG,MAAO,CAAC;IAElFC,MAAM,CAACE,QAAQ,CAAE,IAAI,CAACZ,KAAM,CAAC;IAE7B,IAAI,CAACa,SAAS,GAAGF,eAAe;IAChC,IAAI,CAACE,SAAS,CAACC,0BAA0B,GAAG,IAAI,CAAC,CAAC;EAEnD;;EAEAC,QAAQA,CAAEb,OAAO,EAAG;IAEnB,MAAMc,QAAQ,GAAG,IAAI,CAACZ,WAAW,CAAEF,OAAQ,CAAC;IAE5C,MAAMe,WAAW,GAAGf,OAAO,CAACgB,0BAA0B,CAAE,IAAI,EAAEF,QAAS,CAAC;IACxE,MAAMG,YAAY,GAAGjB,OAAO,CAACkB,eAAe,CAAEH,WAAY,CAAC;IAE3D,IAAII,MAAM,GAAG,IAAI;IAEjB,IAAKnB,OAAO,CAACoB,WAAW,KAAK,QAAQ,EAAG;MAEvCD,MAAM,GAAGF,YAAY;IAEtB,CAAC,MAAM;MAEN,MAAMI,WAAW,GAAGvC,OAAO,CAAE,IAAK,CAAC;MAEnCqC,MAAM,GAAGE,WAAW,CAACC,KAAK,CAAEtB,OAAO,EAAEc,QAAS,CAAC;IAEhD;IAEA,OAAOK,MAAM;EAEd;EAEAI,YAAYA,CAAA,CAAE;EAAA,EAAc;IAE3B,OAAO,iBAAiB;EAEzB;AAED;AAEA,eAAenC,mBAAmB;AAElC,OAAO,MAAMqB,eAAe,GAAGA,CAAEN,KAAK,EAAEF,IAAI,EAAEK,MAAM,EAAEC,MAAM,KAAMxB,UAAU,CAAE,IAAIK,mBAAmB,CAAEe,KAAK,EAAEF,IAAI,EAAEK,MAAM,EAAEC,MAAO,CAAE,CAAC;AACtI,OAAO,MAAMiB,sBAAsB,GAAGA,CAAErB,KAAK,EAAEF,IAAI,EAAEK,MAAM,EAAEC,MAAM,KAAM;EAExE,MAAMkB,IAAI,GAAGhB,eAAe,CAAEN,KAAK,EAAEF,IAAI,EAAEK,MAAM,EAAEC,MAAO,CAAC;EAC3DkB,IAAI,CAAC3B,KAAK,GAAGX,gBAAgB;EAE7B,OAAOsC,IAAI;AAEZ,CAAC;AAED5C,YAAY,CAAEO,mBAAoB,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}