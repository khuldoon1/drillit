{"ast":null,"code":"import NodeMaterial, { addNodeMaterial } from './NodeMaterial.js';\nimport { shininess, specularColor } from '../core/PropertyNode.js';\nimport { materialShininess, materialSpecularColor } from '../accessors/MaterialNode.js';\nimport phongLightingModel from '../functions/PhongLightingModel.js';\nimport { float } from '../shadernode/ShaderNode.js';\nimport { MeshPhongMaterial } from 'three';\nconst defaultValues = new MeshPhongMaterial();\nclass MeshPhongNodeMaterial extends NodeMaterial {\n  constructor(parameters) {\n    super();\n    this.isMeshPhongNodeMaterial = true;\n    this.lights = true;\n    this.shininessNode = null;\n    this.specularNode = null;\n    this.setDefaultValues(defaultValues);\n    this.setValues(parameters);\n  }\n  constructLightingModel( /*builder*/\n  ) {\n    return phongLightingModel;\n  }\n  constructVariants(_ref) {\n    let {\n      stack\n    } = _ref;\n    // SHININESS\n\n    const shininessNode = (this.shininessNode ? float(this.shininessNode) : materialShininess).max(1e-4); // to prevent pow( 0.0, 0.0 )\n\n    stack.assign(shininess, shininessNode);\n\n    // SPECULAR COLOR\n\n    const specularNode = this.specularNode || materialSpecularColor;\n    stack.assign(specularColor, specularNode);\n  }\n  copy(source) {\n    this.colorNode = source.colorNode;\n    this.opacityNode = source.opacityNode;\n    this.alphaTestNode = source.alphaTestNode;\n    this.shininessNode = source.shininessNode;\n    this.specularNode = source.specularNode;\n    this.lightNode = source.lightNode;\n    this.positionNode = source.positionNode;\n    return super.copy(source);\n  }\n}\nexport default MeshPhongNodeMaterial;\naddNodeMaterial(MeshPhongNodeMaterial);","map":{"version":3,"names":["NodeMaterial","addNodeMaterial","shininess","specularColor","materialShininess","materialSpecularColor","phongLightingModel","float","MeshPhongMaterial","defaultValues","MeshPhongNodeMaterial","constructor","parameters","isMeshPhongNodeMaterial","lights","shininessNode","specularNode","setDefaultValues","setValues","constructLightingModel","constructVariants","_ref","stack","max","assign","copy","source","colorNode","opacityNode","alphaTestNode","lightNode","positionNode"],"sources":["C:/Users/LENOVO/Desktop/reactjsProject/drillit/node_modules/three/examples/jsm/nodes/materials/MeshPhongNodeMaterial.js"],"sourcesContent":["import NodeMaterial, { addNodeMaterial } from './NodeMaterial.js';\r\nimport { shininess, specularColor } from '../core/PropertyNode.js';\r\nimport { materialShininess, materialSpecularColor } from '../accessors/MaterialNode.js';\r\nimport phongLightingModel from '../functions/PhongLightingModel.js';\r\nimport { float } from '../shadernode/ShaderNode.js';\r\n\r\nimport { MeshPhongMaterial } from 'three';\r\n\r\nconst defaultValues = new MeshPhongMaterial();\r\n\r\nclass MeshPhongNodeMaterial extends NodeMaterial {\r\n\r\n\tconstructor( parameters ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.isMeshPhongNodeMaterial = true;\r\n\r\n\t\tthis.lights = true;\r\n\r\n\t\tthis.shininessNode = null;\r\n\t\tthis.specularNode = null;\r\n\r\n\t\tthis.setDefaultValues( defaultValues );\r\n\r\n\t\tthis.setValues( parameters );\r\n\r\n\t}\r\n\r\n\tconstructLightingModel( /*builder*/ ) {\r\n\r\n\t\treturn phongLightingModel;\r\n\r\n\t}\r\n\r\n\tconstructVariants( { stack } ) {\r\n\r\n\t\t// SHININESS\r\n\r\n\t\tconst shininessNode = ( this.shininessNode ? float( this.shininessNode ) : materialShininess ).max( 1e-4 ); // to prevent pow( 0.0, 0.0 )\r\n\r\n\t\tstack.assign( shininess, shininessNode );\r\n\r\n\t\t// SPECULAR COLOR\r\n\r\n\t\tconst specularNode = this.specularNode || materialSpecularColor;\r\n\r\n\t\tstack.assign( specularColor, specularNode );\r\n\r\n\t}\r\n\r\n\tcopy( source ) {\r\n\r\n\t\tthis.colorNode = source.colorNode;\r\n\t\tthis.opacityNode = source.opacityNode;\r\n\r\n\t\tthis.alphaTestNode = source.alphaTestNode;\r\n\r\n\t\tthis.shininessNode = source.shininessNode;\r\n\t\tthis.specularNode = source.specularNode;\r\n\r\n\t\tthis.lightNode = source.lightNode;\r\n\r\n\t\tthis.positionNode = source.positionNode;\r\n\r\n\t\treturn super.copy( source );\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default MeshPhongNodeMaterial;\r\n\r\naddNodeMaterial( MeshPhongNodeMaterial );\r\n"],"mappings":"AAAA,OAAOA,YAAY,IAAIC,eAAe,QAAQ,mBAAmB;AACjE,SAASC,SAAS,EAAEC,aAAa,QAAQ,yBAAyB;AAClE,SAASC,iBAAiB,EAAEC,qBAAqB,QAAQ,8BAA8B;AACvF,OAAOC,kBAAkB,MAAM,oCAAoC;AACnE,SAASC,KAAK,QAAQ,6BAA6B;AAEnD,SAASC,iBAAiB,QAAQ,OAAO;AAEzC,MAAMC,aAAa,GAAG,IAAID,iBAAiB,CAAC,CAAC;AAE7C,MAAME,qBAAqB,SAASV,YAAY,CAAC;EAEhDW,WAAWA,CAAEC,UAAU,EAAG;IAEzB,KAAK,CAAC,CAAC;IAEP,IAAI,CAACC,uBAAuB,GAAG,IAAI;IAEnC,IAAI,CAACC,MAAM,GAAG,IAAI;IAElB,IAAI,CAACC,aAAa,GAAG,IAAI;IACzB,IAAI,CAACC,YAAY,GAAG,IAAI;IAExB,IAAI,CAACC,gBAAgB,CAAER,aAAc,CAAC;IAEtC,IAAI,CAACS,SAAS,CAAEN,UAAW,CAAC;EAE7B;EAEAO,sBAAsBA,CAAA,CAAE;EAAA,EAAc;IAErC,OAAOb,kBAAkB;EAE1B;EAEAc,iBAAiBA,CAAAC,IAAA,EAAc;IAAA,IAAZ;MAAEC;IAAM,CAAC,GAAAD,IAAA;IAE3B;;IAEA,MAAMN,aAAa,GAAG,CAAE,IAAI,CAACA,aAAa,GAAGR,KAAK,CAAE,IAAI,CAACQ,aAAc,CAAC,GAAGX,iBAAiB,EAAGmB,GAAG,CAAE,IAAK,CAAC,CAAC,CAAC;;IAE5GD,KAAK,CAACE,MAAM,CAAEtB,SAAS,EAAEa,aAAc,CAAC;;IAExC;;IAEA,MAAMC,YAAY,GAAG,IAAI,CAACA,YAAY,IAAIX,qBAAqB;IAE/DiB,KAAK,CAACE,MAAM,CAAErB,aAAa,EAAEa,YAAa,CAAC;EAE5C;EAEAS,IAAIA,CAAEC,MAAM,EAAG;IAEd,IAAI,CAACC,SAAS,GAAGD,MAAM,CAACC,SAAS;IACjC,IAAI,CAACC,WAAW,GAAGF,MAAM,CAACE,WAAW;IAErC,IAAI,CAACC,aAAa,GAAGH,MAAM,CAACG,aAAa;IAEzC,IAAI,CAACd,aAAa,GAAGW,MAAM,CAACX,aAAa;IACzC,IAAI,CAACC,YAAY,GAAGU,MAAM,CAACV,YAAY;IAEvC,IAAI,CAACc,SAAS,GAAGJ,MAAM,CAACI,SAAS;IAEjC,IAAI,CAACC,YAAY,GAAGL,MAAM,CAACK,YAAY;IAEvC,OAAO,KAAK,CAACN,IAAI,CAAEC,MAAO,CAAC;EAE5B;AAED;AAEA,eAAehB,qBAAqB;AAEpCT,eAAe,CAAES,qBAAsB,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}