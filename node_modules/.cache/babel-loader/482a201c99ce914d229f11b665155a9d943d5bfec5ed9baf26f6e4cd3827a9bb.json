{"ast":null,"code":"import TextureNode from './TextureNode.js';\nimport UniformNode from '../core/UniformNode.js';\nimport { reflectVector } from './ReflectVectorNode.js';\nimport { addNodeClass } from '../core/Node.js';\nimport { addNodeElement, nodeProxy, vec3 } from '../shadernode/ShaderNode.js';\nclass CubeTextureNode extends TextureNode {\n  constructor(value) {\n    let uvNode = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    let levelNode = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n    super(value, uvNode, levelNode);\n    this.isCubeTextureNode = true;\n  }\n  getInputType( /*builder*/\n  ) {\n    return 'cubeTexture';\n  }\n  getDefaultUV() {\n    return reflectVector;\n  }\n  generate(builder, output) {\n    const {\n      uvNode,\n      levelNode\n    } = builder.getNodeProperties(this);\n    const texture = this.value;\n    if (!texture || texture.isCubeTexture !== true) {\n      throw new Error('CubeTextureNode: Need a three.js cube texture.');\n    }\n    const textureProperty = UniformNode.prototype.generate.call(this, builder, 'cubeTexture');\n    if (output === 'sampler') {\n      return textureProperty + '_sampler';\n    } else if (builder.isReference(output)) {\n      return textureProperty;\n    } else {\n      const nodeData = builder.getDataFromNode(this);\n      let propertyName = nodeData.propertyName;\n      if (propertyName === undefined) {\n        const cubeUV = vec3(uvNode.x.negate(), uvNode.yz);\n        const uvSnippet = cubeUV.build(builder, 'vec3');\n        const nodeVar = builder.getVarFromNode(this, 'vec4');\n        propertyName = builder.getPropertyName(nodeVar);\n        let snippet = null;\n        if (levelNode && levelNode.isNode === true) {\n          const levelSnippet = levelNode.build(builder, 'float');\n          snippet = builder.getTextureLevel(this, textureProperty, uvSnippet, levelSnippet);\n        } else {\n          snippet = builder.getTexture(this, textureProperty, uvSnippet);\n        }\n        builder.addLineFlowCode(`${propertyName} = ${snippet}`);\n        nodeData.snippet = snippet;\n        nodeData.propertyName = propertyName;\n      }\n      return builder.format(propertyName, 'vec4', output);\n    }\n  }\n}\nexport default CubeTextureNode;\nexport const cubeTexture = nodeProxy(CubeTextureNode);\naddNodeElement('cubeTexture', cubeTexture);\naddNodeClass(CubeTextureNode);","map":{"version":3,"names":["TextureNode","UniformNode","reflectVector","addNodeClass","addNodeElement","nodeProxy","vec3","CubeTextureNode","constructor","value","uvNode","arguments","length","undefined","levelNode","isCubeTextureNode","getInputType","getDefaultUV","generate","builder","output","getNodeProperties","texture","isCubeTexture","Error","textureProperty","prototype","call","isReference","nodeData","getDataFromNode","propertyName","cubeUV","x","negate","yz","uvSnippet","build","nodeVar","getVarFromNode","getPropertyName","snippet","isNode","levelSnippet","getTextureLevel","getTexture","addLineFlowCode","format","cubeTexture"],"sources":["C:/Users/LENOVO/Desktop/reactjsProject/drillit/node_modules/three/examples/jsm/nodes/accessors/CubeTextureNode.js"],"sourcesContent":["import TextureNode from './TextureNode.js';\r\nimport UniformNode from '../core/UniformNode.js';\r\nimport { reflectVector } from './ReflectVectorNode.js';\r\nimport { addNodeClass } from '../core/Node.js';\r\nimport { addNodeElement, nodeProxy, vec3 } from '../shadernode/ShaderNode.js';\r\n\r\nclass CubeTextureNode extends TextureNode {\r\n\r\n\tconstructor( value, uvNode = null, levelNode = null ) {\r\n\r\n\t\tsuper( value, uvNode, levelNode );\r\n\r\n\t\tthis.isCubeTextureNode = true;\r\n\r\n\t}\r\n\r\n\tgetInputType( /*builder*/ ) {\r\n\r\n\t\treturn 'cubeTexture';\r\n\r\n\t}\r\n\r\n\tgetDefaultUV() {\r\n\r\n\t\treturn reflectVector;\r\n\r\n\t}\r\n\r\n\tgenerate( builder, output ) {\r\n\r\n\t\tconst { uvNode, levelNode } = builder.getNodeProperties( this );\r\n\r\n\t\tconst texture = this.value;\r\n\r\n\t\tif ( ! texture || texture.isCubeTexture !== true ) {\r\n\r\n\t\t\tthrow new Error( 'CubeTextureNode: Need a three.js cube texture.' );\r\n\r\n\t\t}\r\n\r\n\t\tconst textureProperty = UniformNode.prototype.generate.call( this, builder, 'cubeTexture' );\r\n\r\n\t\tif ( output === 'sampler' ) {\r\n\r\n\t\t\treturn textureProperty + '_sampler';\r\n\r\n\t\t} else if ( builder.isReference( output ) ) {\r\n\r\n\t\t\treturn textureProperty;\r\n\r\n\t\t} else {\r\n\r\n\t\t\tconst nodeData = builder.getDataFromNode( this );\r\n\r\n\t\t\tlet propertyName = nodeData.propertyName;\r\n\r\n\t\t\tif ( propertyName === undefined ) {\r\n\r\n\t\t\t\tconst cubeUV = vec3( uvNode.x.negate(), uvNode.yz );\r\n\t\t\t\tconst uvSnippet = cubeUV.build( builder, 'vec3' );\r\n\r\n\t\t\t\tconst nodeVar = builder.getVarFromNode( this, 'vec4' );\r\n\r\n\t\t\t\tpropertyName = builder.getPropertyName( nodeVar );\r\n\r\n\t\t\t\tlet snippet = null;\r\n\r\n\t\t\t\tif ( levelNode && levelNode.isNode === true ) {\r\n\r\n\t\t\t\t\tconst levelSnippet = levelNode.build( builder, 'float' );\r\n\r\n\t\t\t\t\tsnippet = builder.getTextureLevel( this, textureProperty, uvSnippet, levelSnippet );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tsnippet = builder.getTexture( this, textureProperty, uvSnippet );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tbuilder.addLineFlowCode( `${propertyName} = ${snippet}` );\r\n\r\n\t\t\t\tnodeData.snippet = snippet;\r\n\t\t\t\tnodeData.propertyName = propertyName;\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn builder.format( propertyName, 'vec4', output );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default CubeTextureNode;\r\n\r\nexport const cubeTexture = nodeProxy( CubeTextureNode );\r\n\r\naddNodeElement( 'cubeTexture', cubeTexture );\r\n\r\naddNodeClass( CubeTextureNode );\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}