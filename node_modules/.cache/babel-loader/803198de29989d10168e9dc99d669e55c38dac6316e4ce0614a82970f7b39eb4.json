{"ast":null,"code":"import { GPUTextureFormat, GPUAddressMode, GPUFilterMode, GPUTextureDimension, GPUFeatureName } from './WebGPUConstants.js';\nimport { CubeTexture, Texture, NearestFilter, NearestMipmapNearestFilter, NearestMipmapLinearFilter, LinearFilter, RepeatWrapping, MirroredRepeatWrapping, RGB_ETC2_Format, RGBA_ETC2_EAC_Format, RGBAFormat, RedFormat, RGFormat, RGBA_S3TC_DXT1_Format, RGBA_S3TC_DXT3_Format, RGBA_S3TC_DXT5_Format, UnsignedByteType, FloatType, HalfFloatType, SRGBColorSpace, DepthFormat, DepthStencilFormat, RGBA_ASTC_4x4_Format, RGBA_ASTC_5x4_Format, RGBA_ASTC_5x5_Format, RGBA_ASTC_6x5_Format, RGBA_ASTC_6x6_Format, RGBA_ASTC_8x5_Format, RGBA_ASTC_8x6_Format, RGBA_ASTC_8x8_Format, RGBA_ASTC_10x5_Format, RGBA_ASTC_10x6_Format, RGBA_ASTC_10x8_Format, RGBA_ASTC_10x10_Format, RGBA_ASTC_12x10_Format, RGBA_ASTC_12x12_Format, UnsignedIntType, UnsignedShortType, UnsignedInt248Type, NeverCompare, AlwaysCompare, LessCompare, LessEqualCompare, EqualCompare, GreaterEqualCompare, GreaterCompare, NotEqualCompare } from 'three';\nimport { CubeReflectionMapping, CubeRefractionMapping, EquirectangularReflectionMapping, EquirectangularRefractionMapping } from 'three';\nimport WebGPUTextureMipmapUtils from './WebGPUTextureMipmapUtils.js';\nconst _compareToWebGPU = {\n  [NeverCompare]: 'never',\n  [AlwaysCompare]: 'less',\n  [LessCompare]: 'equal',\n  [LessEqualCompare]: 'less-equal',\n  [EqualCompare]: 'greater',\n  [GreaterEqualCompare]: 'not-equal',\n  [GreaterCompare]: 'greater-equal',\n  [NotEqualCompare]: 'always'\n};\nclass WebGPUTextureUtils {\n  constructor(backend) {\n    this.backend = backend;\n    this.mipmapUtils = null;\n    this.defaultTexture = null;\n    this.defaultCubeTexture = null;\n  }\n  createSampler(texture) {\n    const backend = this.backend;\n    const device = backend.device;\n    const textureGPU = backend.get(texture);\n    const samplerDescriptorGPU = {\n      addressModeU: this._convertAddressMode(texture.wrapS),\n      addressModeV: this._convertAddressMode(texture.wrapT),\n      addressModeW: this._convertAddressMode(texture.wrapR),\n      magFilter: this._convertFilterMode(texture.magFilter),\n      minFilter: this._convertFilterMode(texture.minFilter),\n      mipmapFilter: this._convertFilterMode(texture.minFilter),\n      maxAnisotropy: texture.anisotropy\n    };\n    if (texture.isDepthTexture && texture.compareFunction !== null) {\n      samplerDescriptorGPU.compare = _compareToWebGPU[texture.compareFunction];\n    }\n    textureGPU.sampler = device.createSampler(samplerDescriptorGPU);\n  }\n  createDefaultTexture(texture) {\n    let textureGPU;\n    if (texture.isCubeTexture) {\n      textureGPU = this._getDefaultCubeTextureGPU();\n    } else {\n      textureGPU = this._getDefaultTextureGPU();\n    }\n    this.backend.get(texture).texture = textureGPU;\n  }\n  createTexture(texture) {\n    const backend = this.backend;\n    const textureData = backend.get(texture);\n    if (textureData.initialized) {\n      throw new Error('WebGPUTextureUtils: Texture already initialized.');\n    }\n    const {\n      width,\n      height,\n      depth\n    } = this._getSize(texture);\n    const needsMipmaps = this._needsMipmaps(texture);\n    const dimension = this._getDimension(texture);\n    const mipLevelCount = this._getMipLevelCount(texture, width, height, needsMipmaps);\n    const format = texture.internalFormat || this._getFormat(texture);\n    //const sampleCount = texture.isRenderTargetTexture || texture.isDepthTexture ? backend.utils.getSampleCount( renderContext ) : 1;\n    const sampleCount = 1;\n    let usage = GPUTextureUsage.TEXTURE_BINDING | GPUTextureUsage.COPY_DST;\n    if (texture.isCompressedTexture !== true) {\n      usage |= GPUTextureUsage.RENDER_ATTACHMENT;\n    }\n    const textureDescriptorGPU = {\n      label: texture.name,\n      size: {\n        width: width,\n        height: height,\n        depthOrArrayLayers: depth\n      },\n      mipLevelCount: mipLevelCount,\n      sampleCount: sampleCount,\n      dimension: dimension,\n      format: format,\n      usage: usage\n    };\n\n    // texture creation\n\n    if (texture.isVideoTexture) {\n      const video = texture.source.data;\n      const videoFrame = new VideoFrame(video);\n      textureDescriptorGPU.size.width = videoFrame.displayWidth;\n      textureDescriptorGPU.size.height = videoFrame.displayHeight;\n      videoFrame.close();\n      textureData.externalTexture = video;\n    } else {\n      textureData.texture = backend.device.createTexture(textureDescriptorGPU);\n    }\n    textureData.initialized = true;\n    textureData.needsMipmaps = needsMipmaps;\n    textureData.textureDescriptorGPU = textureDescriptorGPU;\n  }\n  destroyTexture(texture) {\n    const backend = this.backend;\n    const textureData = backend.get(texture);\n    textureData.texture.destroy();\n    backend.delete(texture);\n  }\n  destroySampler(texture) {\n    const backend = this.backend;\n    const textureData = backend.get(texture);\n    delete textureData.sampler;\n  }\n  generateMipmaps(texture) {\n    const textureData = this.backend.get(texture);\n    if (texture.isCubeTexture) {\n      for (let i = 0; i < 6; i++) {\n        this._generateMipmaps(textureData.texture, textureData.textureDescriptorGPU, i);\n      }\n    } else {\n      this._generateMipmaps(textureData.texture, textureData.textureDescriptorGPU);\n    }\n  }\n  updateTexture(texture) {\n    const textureData = this.backend.get(texture);\n    const {\n      needsMipmaps,\n      textureDescriptorGPU\n    } = textureData;\n\n    // transfer texture data\n\n    if (texture.isDataTexture || texture.isDataArrayTexture || texture.isData3DTexture) {\n      this._copyBufferToTexture(texture.image, textureData.texture, textureDescriptorGPU, needsMipmaps);\n    } else if (texture.isCompressedTexture) {\n      this._copyCompressedBufferToTexture(texture.mipmaps, textureData.texture, textureDescriptorGPU);\n    } else if (texture.isCubeTexture) {\n      if (texture.image.length === 6) {\n        this._copyCubeMapToTexture(texture.image, texture, textureData.texture, textureDescriptorGPU, needsMipmaps);\n      }\n    } else if (texture.isRenderTargetTexture) {\n      if (needsMipmaps === true) this._generateMipmaps(textureData.texture, textureDescriptorGPU);\n    } else if (texture.isVideoTexture) {\n      const video = texture.source.data;\n      textureData.externalTexture = video;\n    } else if (texture.image !== null) {\n      this._copyImageToTexture(texture.image, texture, textureData.texture, textureDescriptorGPU, needsMipmaps);\n    } else {\n      console.warn('WebGPUTextureUtils: Unable to update texture.');\n    }\n\n    //\n\n    textureData.version = texture.version;\n  }\n  _isEnvironmentTexture(texture) {\n    const mapping = texture.mapping;\n    return mapping === EquirectangularReflectionMapping || mapping === EquirectangularRefractionMapping || mapping === CubeReflectionMapping || mapping === CubeRefractionMapping;\n  }\n  _getDefaultTextureGPU() {\n    let defaultTexture = this.defaultTexture;\n    if (defaultTexture === null) {\n      const texture = new Texture();\n      texture.minFilter = NearestFilter;\n      texture.magFilter = NearestFilter;\n      this.createTexture(texture);\n      this.defaultTexture = defaultTexture = texture;\n    }\n    return this.backend.get(defaultTexture).texture;\n  }\n  _getDefaultCubeTextureGPU() {\n    let defaultCubeTexture = this.defaultTexture;\n    if (defaultCubeTexture === null) {\n      const texture = new CubeTexture();\n      texture.minFilter = NearestFilter;\n      texture.magFilter = NearestFilter;\n      this.createTexture(texture);\n      this.defaultCubeTexture = defaultCubeTexture = texture;\n    }\n    return this.backend.get(defaultCubeTexture).texture;\n  }\n  _copyImageToTexture(image, texture, textureGPU, textureDescriptorGPU, needsMipmaps, originDepth) {\n    if (this._isHTMLImage(image)) {\n      this._getImageBitmapFromHTML(image, texture).then(imageBitmap => {\n        this._copyExternalImageToTexture(imageBitmap, textureGPU, textureDescriptorGPU, needsMipmaps, originDepth);\n      });\n    } else {\n      // assume ImageBitmap\n\n      this._copyExternalImageToTexture(image, textureGPU, textureDescriptorGPU, needsMipmaps, originDepth);\n    }\n  }\n  _isHTMLImage(image) {\n    return typeof HTMLImageElement !== 'undefined' && image instanceof HTMLImageElement || typeof HTMLCanvasElement !== 'undefined' && image instanceof HTMLCanvasElement;\n  }\n  _copyCubeMapToTexture(images, texture, textureGPU, textureDescriptorGPU, needsMipmaps) {\n    for (let i = 0; i < 6; i++) {\n      const image = images[i];\n      if (image.isDataTexture) {\n        this._copyBufferToTexture(image.image, textureGPU, textureDescriptorGPU, needsMipmaps, i);\n      } else {\n        this._copyImageToTexture(image, texture, textureGPU, textureDescriptorGPU, needsMipmaps, i);\n      }\n    }\n  }\n  _copyExternalImageToTexture(image, textureGPU, textureDescriptorGPU, needsMipmaps) {\n    let originDepth = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;\n    const device = this.backend.device;\n    device.queue.copyExternalImageToTexture({\n      source: image\n    }, {\n      texture: textureGPU,\n      mipLevel: 0,\n      origin: {\n        x: 0,\n        y: 0,\n        z: originDepth\n      }\n    }, {\n      width: image.width,\n      height: image.height,\n      depthOrArrayLayers: 1\n    });\n    if (needsMipmaps) this._generateMipmaps(textureGPU, textureDescriptorGPU, originDepth);\n  }\n  _generateMipmaps(textureGPU, textureDescriptorGPU) {\n    let baseArrayLayer = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    if (this.mipmapUtils === null) {\n      this.mipmapUtils = new WebGPUTextureMipmapUtils(this.backend.device);\n    }\n    this.mipmapUtils.generateMipmaps(textureGPU, textureDescriptorGPU, baseArrayLayer);\n  }\n  _getImageBitmapFromHTML(image, texture) {\n    const width = image.width;\n    const height = image.height;\n    const options = {};\n    options.imageOrientation = texture.flipY === true ? 'flipY' : 'none';\n    options.premultiplyAlpha = texture.premultiplyAlpha === true ? 'premultiply' : 'default';\n    return createImageBitmap(image, 0, 0, width, height, options);\n  }\n  _copyBufferToTexture(image, textureGPU, textureDescriptorGPU, needsMipmaps) {\n    let originDepth = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;\n    // @TODO: Consider to use GPUCommandEncoder.copyBufferToTexture()\n    // @TODO: Consider to support valid buffer layouts with other formats like RGB\n\n    const device = this.backend.device;\n    const data = image.data;\n    const bytesPerTexel = this._getBytesPerTexel(textureDescriptorGPU.format);\n    const bytesPerRow = image.width * bytesPerTexel;\n    device.queue.writeTexture({\n      texture: textureGPU,\n      mipLevel: 0,\n      origin: {\n        x: 0,\n        y: 0,\n        z: originDepth\n      }\n    }, data, {\n      offset: 0,\n      bytesPerRow\n    }, {\n      width: image.width,\n      height: image.height,\n      depthOrArrayLayers: image.depth !== undefined ? image.depth : 1\n    });\n    if (needsMipmaps === true) this._generateMipmaps(textureGPU, textureDescriptorGPU, originDepth);\n  }\n  _copyCompressedBufferToTexture(mipmaps, textureGPU, textureDescriptorGPU) {\n    // @TODO: Consider to use GPUCommandEncoder.copyBufferToTexture()\n\n    const device = this.backend.device;\n    const blockData = this._getBlockData(textureDescriptorGPU.format);\n    for (let i = 0; i < mipmaps.length; i++) {\n      const mipmap = mipmaps[i];\n      const width = mipmap.width;\n      const height = mipmap.height;\n      const bytesPerRow = Math.ceil(width / blockData.width) * blockData.byteLength;\n      device.queue.writeTexture({\n        texture: textureGPU,\n        mipLevel: i\n      }, mipmap.data, {\n        offset: 0,\n        bytesPerRow\n      }, {\n        width: Math.ceil(width / blockData.width) * blockData.width,\n        height: Math.ceil(height / blockData.width) * blockData.width,\n        depthOrArrayLayers: 1\n      });\n    }\n  }\n  _getBlockData(format) {\n    // this method is only relevant for compressed texture formats\n\n    if (format === GPUTextureFormat.BC1RGBAUnorm || format === GPUTextureFormat.BC1RGBAUnormSRGB) return {\n      byteLength: 8,\n      width: 4,\n      height: 4\n    }; // DXT1\n    if (format === GPUTextureFormat.BC2RGBAUnorm || format === GPUTextureFormat.BC2RGBAUnormSRGB) return {\n      byteLength: 16,\n      width: 4,\n      height: 4\n    }; // DXT3\n    if (format === GPUTextureFormat.BC3RGBAUnorm || format === GPUTextureFormat.BC3RGBAUnormSRGB) return {\n      byteLength: 16,\n      width: 4,\n      height: 4\n    }; // DXT5\n    if (format === GPUTextureFormat.BC4RUnorm || format === GPUTextureFormat.BC4RSNorm) return {\n      byteLength: 8,\n      width: 4,\n      height: 4\n    }; // RGTC1\n    if (format === GPUTextureFormat.BC5RGUnorm || format === GPUTextureFormat.BC5RGSnorm) return {\n      byteLength: 16,\n      width: 4,\n      height: 4\n    }; // RGTC2\n    if (format === GPUTextureFormat.BC6HRGBUFloat || format === GPUTextureFormat.BC6HRGBFloat) return {\n      byteLength: 16,\n      width: 4,\n      height: 4\n    }; // BPTC (float)\n    if (format === GPUTextureFormat.BC7RGBAUnorm || format === GPUTextureFormat.BC7RGBAUnormSRGB) return {\n      byteLength: 16,\n      width: 4,\n      height: 4\n    }; // BPTC (unorm)\n\n    if (format === GPUTextureFormat.ETC2RGB8Unorm || format === GPUTextureFormat.ETC2RGB8UnormSRGB) return {\n      byteLength: 8,\n      width: 4,\n      height: 4\n    };\n    if (format === GPUTextureFormat.ETC2RGB8A1Unorm || format === GPUTextureFormat.ETC2RGB8A1UnormSRGB) return {\n      byteLength: 8,\n      width: 4,\n      height: 4\n    };\n    if (format === GPUTextureFormat.ETC2RGBA8Unorm || format === GPUTextureFormat.ETC2RGBA8UnormSRGB) return {\n      byteLength: 16,\n      width: 4,\n      height: 4\n    };\n    if (format === GPUTextureFormat.EACR11Unorm) return {\n      byteLength: 8,\n      width: 4,\n      height: 4\n    };\n    if (format === GPUTextureFormat.EACR11Snorm) return {\n      byteLength: 8,\n      width: 4,\n      height: 4\n    };\n    if (format === GPUTextureFormat.EACRG11Unorm) return {\n      byteLength: 16,\n      width: 4,\n      height: 4\n    };\n    if (format === GPUTextureFormat.EACRG11Snorm) return {\n      byteLength: 16,\n      width: 4,\n      height: 4\n    };\n    if (format === GPUTextureFormat.ASTC4x4Unorm || format === GPUTextureFormat.ASTC4x4UnormSRGB) return {\n      byteLength: 16,\n      width: 4,\n      height: 4\n    };\n    if (format === GPUTextureFormat.ASTC5x4Unorm || format === GPUTextureFormat.ASTC5x4UnormSRGB) return {\n      byteLength: 16,\n      width: 5,\n      height: 4\n    };\n    if (format === GPUTextureFormat.ASTC5x5Unorm || format === GPUTextureFormat.ASTC5x5UnormSRGB) return {\n      byteLength: 16,\n      width: 5,\n      height: 5\n    };\n    if (format === GPUTextureFormat.ASTC6x5Unorm || format === GPUTextureFormat.ASTC6x5UnormSRGB) return {\n      byteLength: 16,\n      width: 6,\n      height: 5\n    };\n    if (format === GPUTextureFormat.ASTC6x6Unorm || format === GPUTextureFormat.ASTC6x6UnormSRGB) return {\n      byteLength: 16,\n      width: 6,\n      height: 6\n    };\n    if (format === GPUTextureFormat.ASTC8x5Unorm || format === GPUTextureFormat.ASTC8x5UnormSRGB) return {\n      byteLength: 16,\n      width: 8,\n      height: 5\n    };\n    if (format === GPUTextureFormat.ASTC8x6Unorm || format === GPUTextureFormat.ASTC8x6UnormSRGB) return {\n      byteLength: 16,\n      width: 8,\n      height: 6\n    };\n    if (format === GPUTextureFormat.ASTC8x8Unorm || format === GPUTextureFormat.ASTC8x8UnormSRGB) return {\n      byteLength: 16,\n      width: 8,\n      height: 8\n    };\n    if (format === GPUTextureFormat.ASTC10x5Unorm || format === GPUTextureFormat.ASTC10x5UnormSRGB) return {\n      byteLength: 16,\n      width: 10,\n      height: 5\n    };\n    if (format === GPUTextureFormat.ASTC10x6Unorm || format === GPUTextureFormat.ASTC10x6UnormSRGB) return {\n      byteLength: 16,\n      width: 10,\n      height: 6\n    };\n    if (format === GPUTextureFormat.ASTC10x8Unorm || format === GPUTextureFormat.ASTC10x8UnormSRGB) return {\n      byteLength: 16,\n      width: 10,\n      height: 8\n    };\n    if (format === GPUTextureFormat.ASTC10x10Unorm || format === GPUTextureFormat.ASTC10x10UnormSRGB) return {\n      byteLength: 16,\n      width: 10,\n      height: 10\n    };\n    if (format === GPUTextureFormat.ASTC12x10Unorm || format === GPUTextureFormat.ASTC12x10UnormSRGB) return {\n      byteLength: 16,\n      width: 12,\n      height: 10\n    };\n    if (format === GPUTextureFormat.ASTC12x12Unorm || format === GPUTextureFormat.ASTC12x12UnormSRGB) return {\n      byteLength: 16,\n      width: 12,\n      height: 12\n    };\n  }\n  _convertAddressMode(value) {\n    let addressMode = GPUAddressMode.ClampToEdge;\n    if (value === RepeatWrapping) {\n      addressMode = GPUAddressMode.Repeat;\n    } else if (value === MirroredRepeatWrapping) {\n      addressMode = GPUAddressMode.MirrorRepeat;\n    }\n    return addressMode;\n  }\n  _convertFilterMode(value) {\n    let filterMode = GPUFilterMode.Linear;\n    if (value === NearestFilter || value === NearestMipmapNearestFilter || value === NearestMipmapLinearFilter) {\n      filterMode = GPUFilterMode.Nearest;\n    }\n    return filterMode;\n  }\n  _getSize(texture) {\n    const image = texture.image;\n    let width, height, depth;\n    if (texture.isCubeTexture) {\n      const faceImage = image.length > 0 ? image[0].image || image[0] : null;\n      width = faceImage ? faceImage.width : 1;\n      height = faceImage ? faceImage.height : 1;\n      depth = 6; // one image for each side of the cube map\n    } else if (image !== null) {\n      width = image.width;\n      height = image.height;\n      depth = image.depth !== undefined ? image.depth : 1;\n    } else {\n      width = height = depth = 1;\n    }\n    return {\n      width,\n      height,\n      depth\n    };\n  }\n  _needsMipmaps(texture) {\n    if (this._isEnvironmentTexture(texture)) return true;\n    return texture.isCompressedTexture !== true /*&& ( texture.generateMipmaps === true )*/ && texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter;\n  }\n  _getBytesPerTexel(format) {\n    if (format === GPUTextureFormat.R8Unorm) return 1;\n    if (format === GPUTextureFormat.R16Float) return 2;\n    if (format === GPUTextureFormat.RG8Unorm) return 2;\n    if (format === GPUTextureFormat.RG16Float) return 4;\n    if (format === GPUTextureFormat.R32Float) return 4;\n    if (format === GPUTextureFormat.RGBA8Unorm || format === GPUTextureFormat.RGBA8UnormSRGB) return 4;\n    if (format === GPUTextureFormat.RG32Float) return 8;\n    if (format === GPUTextureFormat.RGBA16Float) return 8;\n    if (format === GPUTextureFormat.RGBA32Float) return 16;\n  }\n  _getDimension(texture) {\n    let dimension;\n    if (texture.isData3DTexture) {\n      dimension = GPUTextureDimension.ThreeD;\n    } else {\n      dimension = GPUTextureDimension.TwoD;\n    }\n    return dimension;\n  }\n  _getMipLevelCount(texture, width, height, needsMipmaps) {\n    let mipLevelCount;\n    if (texture.isCompressedTexture) {\n      mipLevelCount = texture.mipmaps.length;\n    } else if (needsMipmaps) {\n      mipLevelCount = Math.floor(Math.log2(Math.max(width, height))) + 1;\n    } else {\n      mipLevelCount = 1; // a texture without mipmaps has a base mip (mipLevel 0)\n    }\n\n    return mipLevelCount;\n  }\n  _getFormat(texture) {\n    const format = texture.format;\n    const type = texture.type;\n    const colorSpace = texture.colorSpace;\n    let formatGPU;\n    if ( /*texture.isRenderTargetTexture === true ||*/texture.isFramebufferTexture === true) {\n      formatGPU = GPUTextureFormat.BGRA8Unorm;\n    } else if (texture.isCompressedTexture === true) {\n      switch (format) {\n        case RGBA_S3TC_DXT1_Format:\n          formatGPU = colorSpace === SRGBColorSpace ? GPUTextureFormat.BC1RGBAUnormSRGB : GPUTextureFormat.BC1RGBAUnorm;\n          break;\n        case RGBA_S3TC_DXT3_Format:\n          formatGPU = colorSpace === SRGBColorSpace ? GPUTextureFormat.BC2RGBAUnormSRGB : GPUTextureFormat.BC2RGBAUnorm;\n          break;\n        case RGBA_S3TC_DXT5_Format:\n          formatGPU = colorSpace === SRGBColorSpace ? GPUTextureFormat.BC3RGBAUnormSRGB : GPUTextureFormat.BC3RGBAUnorm;\n          break;\n        case RGB_ETC2_Format:\n          formatGPU = colorSpace === SRGBColorSpace ? GPUTextureFormat.ETC2RGB8UnormSRGB : GPUTextureFormat.ETC2RGB8Unorm;\n          break;\n        case RGBA_ETC2_EAC_Format:\n          formatGPU = colorSpace === SRGBColorSpace ? GPUTextureFormat.ETC2RGBA8UnormSRGB : GPUTextureFormat.ETC2RGBA8Unorm;\n          break;\n        case RGBA_ASTC_4x4_Format:\n          formatGPU = colorSpace === SRGBColorSpace ? GPUTextureFormat.ASTC4x4UnormSRGB : GPUTextureFormat.ASTC4x4Unorm;\n          break;\n        case RGBA_ASTC_5x4_Format:\n          formatGPU = colorSpace === SRGBColorSpace ? GPUTextureFormat.ASTC5x4UnormSRGB : GPUTextureFormat.ASTC5x4Unorm;\n          break;\n        case RGBA_ASTC_5x5_Format:\n          formatGPU = colorSpace === SRGBColorSpace ? GPUTextureFormat.ASTC5x5UnormSRGB : GPUTextureFormat.ASTC5x5Unorm;\n          break;\n        case RGBA_ASTC_6x5_Format:\n          formatGPU = colorSpace === SRGBColorSpace ? GPUTextureFormat.ASTC6x5UnormSRGB : GPUTextureFormat.ASTC6x5Unorm;\n          break;\n        case RGBA_ASTC_6x6_Format:\n          formatGPU = colorSpace === SRGBColorSpace ? GPUTextureFormat.ASTC6x6UnormSRGB : GPUTextureFormat.ASTC6x6Unorm;\n          break;\n        case RGBA_ASTC_8x5_Format:\n          formatGPU = colorSpace === SRGBColorSpace ? GPUTextureFormat.ASTC8x5UnormSRGB : GPUTextureFormat.ASTC8x5Unorm;\n          break;\n        case RGBA_ASTC_8x6_Format:\n          formatGPU = colorSpace === SRGBColorSpace ? GPUTextureFormat.ASTC8x6UnormSRGB : GPUTextureFormat.ASTC8x6Unorm;\n          break;\n        case RGBA_ASTC_8x8_Format:\n          formatGPU = colorSpace === SRGBColorSpace ? GPUTextureFormat.ASTC8x8UnormSRGB : GPUTextureFormat.ASTC8x8Unorm;\n          break;\n        case RGBA_ASTC_10x5_Format:\n          formatGPU = colorSpace === SRGBColorSpace ? GPUTextureFormat.ASTC10x5UnormSRGB : GPUTextureFormat.ASTC10x5Unorm;\n          break;\n        case RGBA_ASTC_10x6_Format:\n          formatGPU = colorSpace === SRGBColorSpace ? GPUTextureFormat.ASTC10x6UnormSRGB : GPUTextureFormat.ASTC10x6Unorm;\n          break;\n        case RGBA_ASTC_10x8_Format:\n          formatGPU = colorSpace === SRGBColorSpace ? GPUTextureFormat.ASTC10x8UnormSRGB : GPUTextureFormat.ASTC10x8Unorm;\n          break;\n        case RGBA_ASTC_10x10_Format:\n          formatGPU = colorSpace === SRGBColorSpace ? GPUTextureFormat.ASTC10x10UnormSRGB : GPUTextureFormat.ASTC10x10Unorm;\n          break;\n        case RGBA_ASTC_12x10_Format:\n          formatGPU = colorSpace === SRGBColorSpace ? GPUTextureFormat.ASTC12x10UnormSRGB : GPUTextureFormat.ASTC12x10Unorm;\n          break;\n        case RGBA_ASTC_12x12_Format:\n          formatGPU = colorSpace === SRGBColorSpace ? GPUTextureFormat.ASTC12x12UnormSRGB : GPUTextureFormat.ASTC12x12Unorm;\n          break;\n        default:\n          console.error('WebGPURenderer: Unsupported texture format.', format);\n      }\n    } else {\n      switch (format) {\n        case RGBAFormat:\n          switch (type) {\n            case UnsignedByteType:\n              formatGPU = colorSpace === SRGBColorSpace ? GPUTextureFormat.RGBA8UnormSRGB : GPUTextureFormat.RGBA8Unorm;\n              break;\n            case HalfFloatType:\n              formatGPU = GPUTextureFormat.RGBA16Float;\n              break;\n            case FloatType:\n              formatGPU = GPUTextureFormat.RGBA32Float;\n              break;\n            default:\n              console.error('WebGPURenderer: Unsupported texture type with RGBAFormat.', type);\n          }\n          break;\n        case RedFormat:\n          switch (type) {\n            case UnsignedByteType:\n              formatGPU = GPUTextureFormat.R8Unorm;\n              break;\n            case HalfFloatType:\n              formatGPU = GPUTextureFormat.R16Float;\n              break;\n            case FloatType:\n              formatGPU = GPUTextureFormat.R32Float;\n              break;\n            default:\n              console.error('WebGPURenderer: Unsupported texture type with RedFormat.', type);\n          }\n          break;\n        case RGFormat:\n          switch (type) {\n            case UnsignedByteType:\n              formatGPU = GPUTextureFormat.RG8Unorm;\n              break;\n            case HalfFloatType:\n              formatGPU = GPUTextureFormat.RG16Float;\n              break;\n            case FloatType:\n              formatGPU = GPUTextureFormat.RG32Float;\n              break;\n            default:\n              console.error('WebGPURenderer: Unsupported texture type with RGFormat.', type);\n          }\n          break;\n        case DepthFormat:\n          switch (type) {\n            case UnsignedShortType:\n              formatGPU = GPUTextureFormat.Depth16Unorm;\n              break;\n            case UnsignedIntType:\n              formatGPU = GPUTextureFormat.Depth24Plus;\n              break;\n            case FloatType:\n              formatGPU = GPUTextureFormat.Depth32Float;\n              break;\n            default:\n              console.error('WebGPURenderer: Unsupported texture type with DepthFormat.', type);\n          }\n          break;\n        case DepthStencilFormat:\n          switch (type) {\n            case UnsignedInt248Type:\n              formatGPU = GPUTextureFormat.Depth24PlusStencil8;\n              break;\n            case FloatType:\n              if (this.device.features.has(GPUFeatureName.Depth32FloatStencil8) === false) {\n                console.error('WebGPURenderer: Depth textures with DepthStencilFormat + FloatType can only be used with the \"depth32float-stencil8\" GPU feature.');\n              }\n              formatGPU = GPUTextureFormat.Depth32FloatStencil8;\n              break;\n            default:\n              console.error('WebGPURenderer: Unsupported texture type with DepthStencilFormat.', type);\n          }\n          break;\n        default:\n          console.error('WebGPURenderer: Unsupported texture format.', format);\n      }\n    }\n    return formatGPU;\n  }\n}\nexport default WebGPUTextureUtils;","map":{"version":3,"names":["GPUTextureFormat","GPUAddressMode","GPUFilterMode","GPUTextureDimension","GPUFeatureName","CubeTexture","Texture","NearestFilter","NearestMipmapNearestFilter","NearestMipmapLinearFilter","LinearFilter","RepeatWrapping","MirroredRepeatWrapping","RGB_ETC2_Format","RGBA_ETC2_EAC_Format","RGBAFormat","RedFormat","RGFormat","RGBA_S3TC_DXT1_Format","RGBA_S3TC_DXT3_Format","RGBA_S3TC_DXT5_Format","UnsignedByteType","FloatType","HalfFloatType","SRGBColorSpace","DepthFormat","DepthStencilFormat","RGBA_ASTC_4x4_Format","RGBA_ASTC_5x4_Format","RGBA_ASTC_5x5_Format","RGBA_ASTC_6x5_Format","RGBA_ASTC_6x6_Format","RGBA_ASTC_8x5_Format","RGBA_ASTC_8x6_Format","RGBA_ASTC_8x8_Format","RGBA_ASTC_10x5_Format","RGBA_ASTC_10x6_Format","RGBA_ASTC_10x8_Format","RGBA_ASTC_10x10_Format","RGBA_ASTC_12x10_Format","RGBA_ASTC_12x12_Format","UnsignedIntType","UnsignedShortType","UnsignedInt248Type","NeverCompare","AlwaysCompare","LessCompare","LessEqualCompare","EqualCompare","GreaterEqualCompare","GreaterCompare","NotEqualCompare","CubeReflectionMapping","CubeRefractionMapping","EquirectangularReflectionMapping","EquirectangularRefractionMapping","WebGPUTextureMipmapUtils","_compareToWebGPU","WebGPUTextureUtils","constructor","backend","mipmapUtils","defaultTexture","defaultCubeTexture","createSampler","texture","device","textureGPU","get","samplerDescriptorGPU","addressModeU","_convertAddressMode","wrapS","addressModeV","wrapT","addressModeW","wrapR","magFilter","_convertFilterMode","minFilter","mipmapFilter","maxAnisotropy","anisotropy","isDepthTexture","compareFunction","compare","sampler","createDefaultTexture","isCubeTexture","_getDefaultCubeTextureGPU","_getDefaultTextureGPU","createTexture","textureData","initialized","Error","width","height","depth","_getSize","needsMipmaps","_needsMipmaps","dimension","_getDimension","mipLevelCount","_getMipLevelCount","format","internalFormat","_getFormat","sampleCount","usage","GPUTextureUsage","TEXTURE_BINDING","COPY_DST","isCompressedTexture","RENDER_ATTACHMENT","textureDescriptorGPU","label","name","size","depthOrArrayLayers","isVideoTexture","video","source","data","videoFrame","VideoFrame","displayWidth","displayHeight","close","externalTexture","destroyTexture","destroy","delete","destroySampler","generateMipmaps","i","_generateMipmaps","updateTexture","isDataTexture","isDataArrayTexture","isData3DTexture","_copyBufferToTexture","image","_copyCompressedBufferToTexture","mipmaps","length","_copyCubeMapToTexture","isRenderTargetTexture","_copyImageToTexture","console","warn","version","_isEnvironmentTexture","mapping","originDepth","_isHTMLImage","_getImageBitmapFromHTML","then","imageBitmap","_copyExternalImageToTexture","HTMLImageElement","HTMLCanvasElement","images","arguments","undefined","queue","copyExternalImageToTexture","mipLevel","origin","x","y","z","baseArrayLayer","options","imageOrientation","flipY","premultiplyAlpha","createImageBitmap","bytesPerTexel","_getBytesPerTexel","bytesPerRow","writeTexture","offset","blockData","_getBlockData","mipmap","Math","ceil","byteLength","BC1RGBAUnorm","BC1RGBAUnormSRGB","BC2RGBAUnorm","BC2RGBAUnormSRGB","BC3RGBAUnorm","BC3RGBAUnormSRGB","BC4RUnorm","BC4RSNorm","BC5RGUnorm","BC5RGSnorm","BC6HRGBUFloat","BC6HRGBFloat","BC7RGBAUnorm","BC7RGBAUnormSRGB","ETC2RGB8Unorm","ETC2RGB8UnormSRGB","ETC2RGB8A1Unorm","ETC2RGB8A1UnormSRGB","ETC2RGBA8Unorm","ETC2RGBA8UnormSRGB","EACR11Unorm","EACR11Snorm","EACRG11Unorm","EACRG11Snorm","ASTC4x4Unorm","ASTC4x4UnormSRGB","ASTC5x4Unorm","ASTC5x4UnormSRGB","ASTC5x5Unorm","ASTC5x5UnormSRGB","ASTC6x5Unorm","ASTC6x5UnormSRGB","ASTC6x6Unorm","ASTC6x6UnormSRGB","ASTC8x5Unorm","ASTC8x5UnormSRGB","ASTC8x6Unorm","ASTC8x6UnormSRGB","ASTC8x8Unorm","ASTC8x8UnormSRGB","ASTC10x5Unorm","ASTC10x5UnormSRGB","ASTC10x6Unorm","ASTC10x6UnormSRGB","ASTC10x8Unorm","ASTC10x8UnormSRGB","ASTC10x10Unorm","ASTC10x10UnormSRGB","ASTC12x10Unorm","ASTC12x10UnormSRGB","ASTC12x12Unorm","ASTC12x12UnormSRGB","value","addressMode","ClampToEdge","Repeat","MirrorRepeat","filterMode","Linear","Nearest","faceImage","R8Unorm","R16Float","RG8Unorm","RG16Float","R32Float","RGBA8Unorm","RGBA8UnormSRGB","RG32Float","RGBA16Float","RGBA32Float","ThreeD","TwoD","floor","log2","max","type","colorSpace","formatGPU","isFramebufferTexture","BGRA8Unorm","error","Depth16Unorm","Depth24Plus","Depth32Float","Depth24PlusStencil8","features","has","Depth32FloatStencil8"],"sources":["C:/Users/LENOVO/Desktop/reactjsProject/drillit/node_modules/three/examples/jsm/renderers/webgpu/utils/WebGPUTextureUtils.js"],"sourcesContent":["import {\r\n\tGPUTextureFormat, GPUAddressMode, GPUFilterMode, GPUTextureDimension, GPUFeatureName\r\n} from './WebGPUConstants.js';\r\n\r\nimport {\r\n\tCubeTexture, Texture,\r\n\tNearestFilter, NearestMipmapNearestFilter, NearestMipmapLinearFilter, LinearFilter,\r\n\tRepeatWrapping, MirroredRepeatWrapping,\r\n\tRGB_ETC2_Format, RGBA_ETC2_EAC_Format,\r\n\tRGBAFormat, RedFormat, RGFormat, RGBA_S3TC_DXT1_Format, RGBA_S3TC_DXT3_Format, RGBA_S3TC_DXT5_Format, UnsignedByteType, FloatType, HalfFloatType, SRGBColorSpace, DepthFormat, DepthStencilFormat,\r\n\tRGBA_ASTC_4x4_Format, RGBA_ASTC_5x4_Format, RGBA_ASTC_5x5_Format, RGBA_ASTC_6x5_Format, RGBA_ASTC_6x6_Format, RGBA_ASTC_8x5_Format, RGBA_ASTC_8x6_Format, RGBA_ASTC_8x8_Format, RGBA_ASTC_10x5_Format,\r\n\tRGBA_ASTC_10x6_Format, RGBA_ASTC_10x8_Format, RGBA_ASTC_10x10_Format, RGBA_ASTC_12x10_Format, RGBA_ASTC_12x12_Format, UnsignedIntType, UnsignedShortType, UnsignedInt248Type,\r\n\tNeverCompare, AlwaysCompare, LessCompare, LessEqualCompare, EqualCompare, GreaterEqualCompare, GreaterCompare, NotEqualCompare\r\n} from 'three';\r\n\r\nimport { CubeReflectionMapping, CubeRefractionMapping, EquirectangularReflectionMapping, EquirectangularRefractionMapping } from 'three';\r\n\r\nimport WebGPUTextureMipmapUtils from './WebGPUTextureMipmapUtils.js';\r\n\r\nconst _compareToWebGPU = {\r\n\t[ NeverCompare ]: 'never',\r\n\t[ AlwaysCompare ]: 'less',\r\n\t[ LessCompare ]: 'equal',\r\n\t[ LessEqualCompare ]: 'less-equal',\r\n\t[ EqualCompare ]: 'greater',\r\n\t[ GreaterEqualCompare ]: 'not-equal',\r\n\t[ GreaterCompare ]: 'greater-equal',\r\n\t[ NotEqualCompare ]: 'always'\r\n};\r\n\r\nclass WebGPUTextureUtils {\r\n\r\n\tconstructor( backend ) {\r\n\r\n\t\tthis.backend = backend;\r\n\r\n\t\tthis.mipmapUtils = null;\r\n\r\n\t\tthis.defaultTexture = null;\r\n\t\tthis.defaultCubeTexture = null;\r\n\r\n\t}\r\n\r\n\tcreateSampler( texture ) {\r\n\r\n\t\tconst backend = this.backend;\r\n\t\tconst device = backend.device;\r\n\r\n\t\tconst textureGPU = backend.get( texture );\r\n\r\n\t\tconst samplerDescriptorGPU = {\r\n\t\t\taddressModeU: this._convertAddressMode( texture.wrapS ),\r\n\t\t\taddressModeV: this._convertAddressMode( texture.wrapT ),\r\n\t\t\taddressModeW: this._convertAddressMode( texture.wrapR ),\r\n\t\t\tmagFilter: this._convertFilterMode( texture.magFilter ),\r\n\t\t\tminFilter: this._convertFilterMode( texture.minFilter ),\r\n\t\t\tmipmapFilter: this._convertFilterMode( texture.minFilter ),\r\n\t\t\tmaxAnisotropy: texture.anisotropy\r\n\t\t};\r\n\r\n\t\tif ( texture.isDepthTexture && texture.compareFunction !== null ) {\r\n\r\n\t\t\tsamplerDescriptorGPU.compare = _compareToWebGPU[ texture.compareFunction ];\r\n\r\n\t\t}\r\n\r\n\t\ttextureGPU.sampler = device.createSampler( samplerDescriptorGPU );\r\n\r\n\t}\r\n\r\n\tcreateDefaultTexture( texture ) {\r\n\r\n\t\tlet textureGPU;\r\n\r\n\t\tif ( texture.isCubeTexture ) {\r\n\r\n\t\t\ttextureGPU = this._getDefaultCubeTextureGPU();\r\n\r\n\t\t} else {\r\n\r\n\t\t\ttextureGPU = this._getDefaultTextureGPU();\r\n\r\n\t\t}\r\n\r\n\t\tthis.backend.get( texture ).texture = textureGPU;\r\n\r\n\t}\r\n\r\n\tcreateTexture( texture ) {\r\n\r\n\t\tconst backend = this.backend;\r\n\t\tconst textureData = backend.get( texture );\r\n\r\n\t\tif ( textureData.initialized ) {\r\n\r\n\t\t\tthrow new Error( 'WebGPUTextureUtils: Texture already initialized.' );\r\n\r\n\t\t}\r\n\r\n\t\tconst { width, height, depth } = this._getSize( texture );\r\n\r\n\t\tconst needsMipmaps = this._needsMipmaps( texture );\r\n\t\tconst dimension = this._getDimension( texture );\r\n\t\tconst mipLevelCount = this._getMipLevelCount( texture, width, height, needsMipmaps );\r\n\t\tconst format = texture.internalFormat || this._getFormat( texture );\r\n\t\t//const sampleCount = texture.isRenderTargetTexture || texture.isDepthTexture ? backend.utils.getSampleCount( renderContext ) : 1;\r\n\t\tconst sampleCount = 1;\r\n\r\n\t\tlet usage = GPUTextureUsage.TEXTURE_BINDING | GPUTextureUsage.COPY_DST;\r\n\r\n\t\tif ( texture.isCompressedTexture !== true ) {\r\n\r\n\t\t\tusage |= GPUTextureUsage.RENDER_ATTACHMENT;\r\n\r\n\t\t}\r\n\r\n\t\tconst textureDescriptorGPU = {\r\n\t\t\tlabel: texture.name,\r\n\t\t\tsize: {\r\n\t\t\t\twidth: width,\r\n\t\t\t\theight: height,\r\n\t\t\t\tdepthOrArrayLayers: depth,\r\n\t\t\t},\r\n\t\t\tmipLevelCount: mipLevelCount,\r\n\t\t\tsampleCount: sampleCount,\r\n\t\t\tdimension: dimension,\r\n\t\t\tformat: format,\r\n\t\t\tusage: usage\r\n\t\t};\r\n\r\n\t\t// texture creation\r\n\r\n\t\tif ( texture.isVideoTexture ) {\r\n\r\n\t\t\tconst video = texture.source.data;\r\n\t\t\tconst videoFrame = new VideoFrame( video );\r\n\r\n\t\t\ttextureDescriptorGPU.size.width = videoFrame.displayWidth;\r\n\t\t\ttextureDescriptorGPU.size.height = videoFrame.displayHeight;\r\n\r\n\t\t\tvideoFrame.close();\r\n\r\n\t\t\ttextureData.externalTexture = video;\r\n\r\n\t\t} else {\r\n\r\n\t\t\ttextureData.texture = backend.device.createTexture( textureDescriptorGPU );\r\n\r\n\t\t}\r\n\r\n\t\ttextureData.initialized = true;\r\n\r\n\t\ttextureData.needsMipmaps = needsMipmaps;\r\n\t\ttextureData.textureDescriptorGPU = textureDescriptorGPU;\r\n\r\n\t}\r\n\r\n\tdestroyTexture( texture ) {\r\n\r\n\t\tconst backend = this.backend;\r\n\t\tconst textureData = backend.get( texture );\r\n\r\n\t\ttextureData.texture.destroy();\r\n\r\n\t\tbackend.delete( texture );\r\n\r\n\t}\r\n\r\n\tdestroySampler( texture ) {\r\n\r\n\t\tconst backend = this.backend;\r\n\t\tconst textureData = backend.get( texture );\r\n\r\n\t\tdelete textureData.sampler;\r\n\r\n\t}\r\n\r\n\tgenerateMipmaps( texture ) {\r\n\r\n\t\tconst textureData = this.backend.get( texture );\r\n\r\n\t\tif ( texture.isCubeTexture ) {\r\n\r\n\t\t\tfor ( let i = 0; i < 6; i ++ ) {\r\n\r\n\t\t\t\tthis._generateMipmaps( textureData.texture, textureData.textureDescriptorGPU, i );\r\n\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\r\n\t\t\tthis._generateMipmaps( textureData.texture, textureData.textureDescriptorGPU );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tupdateTexture( texture ) {\r\n\r\n\t\tconst textureData = this.backend.get( texture );\r\n\r\n\t\tconst { needsMipmaps, textureDescriptorGPU } = textureData;\r\n\r\n\t\t// transfer texture data\r\n\r\n\t\tif ( texture.isDataTexture || texture.isDataArrayTexture || texture.isData3DTexture ) {\r\n\r\n\t\t\tthis._copyBufferToTexture( texture.image, textureData.texture, textureDescriptorGPU, needsMipmaps );\r\n\r\n\t\t} else if ( texture.isCompressedTexture ) {\r\n\r\n\t\t\tthis._copyCompressedBufferToTexture( texture.mipmaps, textureData.texture, textureDescriptorGPU );\r\n\r\n\t\t} else if ( texture.isCubeTexture ) {\r\n\r\n\t\t\tif ( texture.image.length === 6 ) {\r\n\r\n\t\t\t\tthis._copyCubeMapToTexture( texture.image, texture, textureData.texture, textureDescriptorGPU, needsMipmaps );\r\n\r\n\t\t\t}\r\n\r\n\t\t} else if ( texture.isRenderTargetTexture ) {\r\n\r\n\t\t\tif ( needsMipmaps === true ) this._generateMipmaps( textureData.texture, textureDescriptorGPU );\r\n\r\n\t\t} else if ( texture.isVideoTexture ) {\r\n\r\n\t\t\tconst video = texture.source.data;\r\n\r\n\t\t\ttextureData.externalTexture = video;\r\n\r\n\t\t} else if ( texture.image !== null ) {\r\n\r\n\t\t\tthis._copyImageToTexture( texture.image, texture, textureData.texture, textureDescriptorGPU, needsMipmaps );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tconsole.warn( 'WebGPUTextureUtils: Unable to update texture.' );\r\n\r\n\t\t}\r\n\r\n\t\t//\r\n\r\n\t\ttextureData.version = texture.version;\r\n\r\n\t}\r\n\r\n\t_isEnvironmentTexture( texture ) {\r\n\r\n\t\tconst mapping = texture.mapping;\r\n\r\n\t\treturn ( mapping === EquirectangularReflectionMapping || mapping === EquirectangularRefractionMapping ) || ( mapping === CubeReflectionMapping || mapping === CubeRefractionMapping );\r\n\r\n\t}\r\n\r\n\t_getDefaultTextureGPU() {\r\n\r\n\t\tlet defaultTexture = this.defaultTexture;\r\n\r\n\t\tif ( defaultTexture === null ) {\r\n\r\n\t\t\tconst texture = new Texture();\r\n\t\t\ttexture.minFilter = NearestFilter;\r\n\t\t\ttexture.magFilter = NearestFilter;\r\n\r\n\t\t\tthis.createTexture( texture );\r\n\r\n\t\t\tthis.defaultTexture = defaultTexture = texture;\r\n\r\n\t\t}\r\n\r\n\t\treturn this.backend.get( defaultTexture ).texture;\r\n\r\n\t}\r\n\r\n\t_getDefaultCubeTextureGPU() {\r\n\r\n\t\tlet defaultCubeTexture = this.defaultTexture;\r\n\r\n\t\tif ( defaultCubeTexture === null ) {\r\n\r\n\t\t\tconst texture = new CubeTexture();\r\n\t\t\ttexture.minFilter = NearestFilter;\r\n\t\t\ttexture.magFilter = NearestFilter;\r\n\r\n\t\t\tthis.createTexture( texture );\r\n\r\n\t\t\tthis.defaultCubeTexture = defaultCubeTexture = texture;\r\n\r\n\t\t}\r\n\r\n\t\treturn this.backend.get( defaultCubeTexture ).texture;\r\n\r\n\t}\r\n\r\n\t_copyImageToTexture( image, texture, textureGPU, textureDescriptorGPU, needsMipmaps, originDepth ) {\r\n\r\n\t\tif ( this._isHTMLImage( image ) ) {\r\n\r\n\t\t\tthis._getImageBitmapFromHTML( image, texture ).then( imageBitmap => {\r\n\r\n\t\t\t\tthis._copyExternalImageToTexture( imageBitmap, textureGPU, textureDescriptorGPU, needsMipmaps, originDepth );\r\n\r\n\t\t\t} );\r\n\r\n\t\t} else {\r\n\r\n\t\t\t// assume ImageBitmap\r\n\r\n\t\t\tthis._copyExternalImageToTexture( image, textureGPU, textureDescriptorGPU, needsMipmaps, originDepth );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t_isHTMLImage( image ) {\r\n\r\n\t\treturn ( typeof HTMLImageElement !== 'undefined' && image instanceof HTMLImageElement ) || ( typeof HTMLCanvasElement !== 'undefined' && image instanceof HTMLCanvasElement );\r\n\r\n\t}\r\n\r\n\t_copyCubeMapToTexture( images, texture, textureGPU, textureDescriptorGPU, needsMipmaps ) {\r\n\r\n\t\tfor ( let i = 0; i < 6; i ++ ) {\r\n\r\n\t\t\tconst image = images[ i ];\r\n\r\n\t\t\tif ( image.isDataTexture ) {\r\n\r\n\t\t\t\tthis._copyBufferToTexture( image.image, textureGPU, textureDescriptorGPU, needsMipmaps, i );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tthis._copyImageToTexture( image, texture, textureGPU, textureDescriptorGPU, needsMipmaps, i );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t_copyExternalImageToTexture( image, textureGPU, textureDescriptorGPU, needsMipmaps, originDepth = 0 ) {\r\n\r\n\t\tconst device = this.backend.device;\r\n\r\n\t\tdevice.queue.copyExternalImageToTexture(\r\n\t\t\t{\r\n\t\t\t\tsource: image\r\n\t\t\t}, {\r\n\t\t\t\ttexture: textureGPU,\r\n\t\t\t\tmipLevel: 0,\r\n\t\t\t\torigin: { x: 0, y: 0, z: originDepth }\r\n\t\t\t}, {\r\n\t\t\t\twidth: image.width,\r\n\t\t\t\theight: image.height,\r\n\t\t\t\tdepthOrArrayLayers: 1\r\n\t\t\t}\r\n\t\t);\r\n\r\n\t\tif ( needsMipmaps ) this._generateMipmaps( textureGPU, textureDescriptorGPU, originDepth );\r\n\r\n\t}\r\n\r\n\t_generateMipmaps( textureGPU, textureDescriptorGPU, baseArrayLayer = 0 ) {\r\n\r\n\t\tif ( this.mipmapUtils === null ) {\r\n\r\n\t\t\tthis.mipmapUtils = new WebGPUTextureMipmapUtils( this.backend.device );\r\n\r\n\t\t}\r\n\r\n\t\tthis.mipmapUtils.generateMipmaps( textureGPU, textureDescriptorGPU, baseArrayLayer );\r\n\r\n\t}\r\n\r\n\t_getImageBitmapFromHTML( image, texture ) {\r\n\r\n\t\tconst width = image.width;\r\n\t\tconst height = image.height;\r\n\r\n\t\tconst options = {};\r\n\r\n\t\toptions.imageOrientation = ( texture.flipY === true ) ? 'flipY' : 'none';\r\n\t\toptions.premultiplyAlpha = ( texture.premultiplyAlpha === true ) ? 'premultiply' : 'default';\r\n\r\n\t\treturn createImageBitmap( image, 0, 0, width, height, options );\r\n\r\n\t}\r\n\r\n\t_copyBufferToTexture( image, textureGPU, textureDescriptorGPU, needsMipmaps, originDepth = 0 ) {\r\n\r\n\t\t// @TODO: Consider to use GPUCommandEncoder.copyBufferToTexture()\r\n\t\t// @TODO: Consider to support valid buffer layouts with other formats like RGB\r\n\r\n\t\tconst device = this.backend.device;\r\n\r\n\t\tconst data = image.data;\r\n\r\n\t\tconst bytesPerTexel = this._getBytesPerTexel( textureDescriptorGPU.format );\r\n\t\tconst bytesPerRow = image.width * bytesPerTexel;\r\n\r\n\t\tdevice.queue.writeTexture(\r\n\t\t\t{\r\n\t\t\t\ttexture: textureGPU,\r\n\t\t\t\tmipLevel: 0,\r\n\t\t\t\torigin: { x: 0, y: 0, z: originDepth }\r\n\t\t\t},\r\n\t\t\tdata,\r\n\t\t\t{\r\n\t\t\t\toffset: 0,\r\n\t\t\t\tbytesPerRow\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\twidth: image.width,\r\n\t\t\t\theight: image.height,\r\n\t\t\t\tdepthOrArrayLayers: ( image.depth !== undefined ) ? image.depth : 1\r\n\t\t\t} );\r\n\r\n\t\tif ( needsMipmaps === true ) this._generateMipmaps( textureGPU, textureDescriptorGPU, originDepth );\r\n\r\n\t}\r\n\r\n\t_copyCompressedBufferToTexture( mipmaps, textureGPU, textureDescriptorGPU ) {\r\n\r\n\t\t// @TODO: Consider to use GPUCommandEncoder.copyBufferToTexture()\r\n\r\n\t\tconst device = this.backend.device;\r\n\r\n\t\tconst blockData = this._getBlockData( textureDescriptorGPU.format );\r\n\r\n\t\tfor ( let i = 0; i < mipmaps.length; i ++ ) {\r\n\r\n\t\t\tconst mipmap = mipmaps[ i ];\r\n\r\n\t\t\tconst width = mipmap.width;\r\n\t\t\tconst height = mipmap.height;\r\n\r\n\t\t\tconst bytesPerRow = Math.ceil( width / blockData.width ) * blockData.byteLength;\r\n\r\n\t\t\tdevice.queue.writeTexture(\r\n\t\t\t\t{\r\n\t\t\t\t\ttexture: textureGPU,\r\n\t\t\t\t\tmipLevel: i\r\n\t\t\t\t},\r\n\t\t\t\tmipmap.data,\r\n\t\t\t\t{\r\n\t\t\t\t\toffset: 0,\r\n\t\t\t\t\tbytesPerRow\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\twidth: Math.ceil( width / blockData.width ) * blockData.width,\r\n\t\t\t\t\theight: Math.ceil( height / blockData.width ) * blockData.width,\r\n\t\t\t\t\tdepthOrArrayLayers: 1\r\n\t\t\t\t}\r\n\t\t\t);\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t_getBlockData( format ) {\r\n\r\n\t\t// this method is only relevant for compressed texture formats\r\n\r\n\t\tif ( format === GPUTextureFormat.BC1RGBAUnorm || format === GPUTextureFormat.BC1RGBAUnormSRGB ) return { byteLength: 8, width: 4, height: 4 }; // DXT1\r\n\t\tif ( format === GPUTextureFormat.BC2RGBAUnorm || format === GPUTextureFormat.BC2RGBAUnormSRGB ) return { byteLength: 16, width: 4, height: 4 }; // DXT3\r\n\t\tif ( format === GPUTextureFormat.BC3RGBAUnorm || format === GPUTextureFormat.BC3RGBAUnormSRGB ) return { byteLength: 16, width: 4, height: 4 }; // DXT5\r\n\t\tif ( format === GPUTextureFormat.BC4RUnorm || format === GPUTextureFormat.BC4RSNorm ) return { byteLength: 8, width: 4, height: 4 }; // RGTC1\r\n\t\tif ( format === GPUTextureFormat.BC5RGUnorm || format === GPUTextureFormat.BC5RGSnorm ) return { byteLength: 16, width: 4, height: 4 }; // RGTC2\r\n\t\tif ( format === GPUTextureFormat.BC6HRGBUFloat || format === GPUTextureFormat.BC6HRGBFloat ) return { byteLength: 16, width: 4, height: 4 }; // BPTC (float)\r\n\t\tif ( format === GPUTextureFormat.BC7RGBAUnorm || format === GPUTextureFormat.BC7RGBAUnormSRGB ) return { byteLength: 16, width: 4, height: 4 }; // BPTC (unorm)\r\n\r\n\t\tif ( format === GPUTextureFormat.ETC2RGB8Unorm || format === GPUTextureFormat.ETC2RGB8UnormSRGB ) return { byteLength: 8, width: 4, height: 4 };\r\n\t\tif ( format === GPUTextureFormat.ETC2RGB8A1Unorm || format === GPUTextureFormat.ETC2RGB8A1UnormSRGB ) return { byteLength: 8, width: 4, height: 4 };\r\n\t\tif ( format === GPUTextureFormat.ETC2RGBA8Unorm || format === GPUTextureFormat.ETC2RGBA8UnormSRGB ) return { byteLength: 16, width: 4, height: 4 };\r\n\t\tif ( format === GPUTextureFormat.EACR11Unorm ) return { byteLength: 8, width: 4, height: 4 };\r\n\t\tif ( format === GPUTextureFormat.EACR11Snorm ) return { byteLength: 8, width: 4, height: 4 };\r\n\t\tif ( format === GPUTextureFormat.EACRG11Unorm ) return { byteLength: 16, width: 4, height: 4 };\r\n\t\tif ( format === GPUTextureFormat.EACRG11Snorm ) return { byteLength: 16, width: 4, height: 4 };\r\n\r\n\t\tif ( format === GPUTextureFormat.ASTC4x4Unorm || format === GPUTextureFormat.ASTC4x4UnormSRGB ) return { byteLength: 16, width: 4, height: 4 };\r\n\t\tif ( format === GPUTextureFormat.ASTC5x4Unorm || format === GPUTextureFormat.ASTC5x4UnormSRGB ) return { byteLength: 16, width: 5, height: 4 };\r\n\t\tif ( format === GPUTextureFormat.ASTC5x5Unorm || format === GPUTextureFormat.ASTC5x5UnormSRGB ) return { byteLength: 16, width: 5, height: 5 };\r\n\t\tif ( format === GPUTextureFormat.ASTC6x5Unorm || format === GPUTextureFormat.ASTC6x5UnormSRGB ) return { byteLength: 16, width: 6, height: 5 };\r\n\t\tif ( format === GPUTextureFormat.ASTC6x6Unorm || format === GPUTextureFormat.ASTC6x6UnormSRGB ) return { byteLength: 16, width: 6, height: 6 };\r\n\t\tif ( format === GPUTextureFormat.ASTC8x5Unorm || format === GPUTextureFormat.ASTC8x5UnormSRGB ) return { byteLength: 16, width: 8, height: 5 };\r\n\t\tif ( format === GPUTextureFormat.ASTC8x6Unorm || format === GPUTextureFormat.ASTC8x6UnormSRGB ) return { byteLength: 16, width: 8, height: 6 };\r\n\t\tif ( format === GPUTextureFormat.ASTC8x8Unorm || format === GPUTextureFormat.ASTC8x8UnormSRGB ) return { byteLength: 16, width: 8, height: 8 };\r\n\t\tif ( format === GPUTextureFormat.ASTC10x5Unorm || format === GPUTextureFormat.ASTC10x5UnormSRGB ) return { byteLength: 16, width: 10, height: 5 };\r\n\t\tif ( format === GPUTextureFormat.ASTC10x6Unorm || format === GPUTextureFormat.ASTC10x6UnormSRGB ) return { byteLength: 16, width: 10, height: 6 };\r\n\t\tif ( format === GPUTextureFormat.ASTC10x8Unorm || format === GPUTextureFormat.ASTC10x8UnormSRGB ) return { byteLength: 16, width: 10, height: 8 };\r\n\t\tif ( format === GPUTextureFormat.ASTC10x10Unorm || format === GPUTextureFormat.ASTC10x10UnormSRGB ) return { byteLength: 16, width: 10, height: 10 };\r\n\t\tif ( format === GPUTextureFormat.ASTC12x10Unorm || format === GPUTextureFormat.ASTC12x10UnormSRGB ) return { byteLength: 16, width: 12, height: 10 };\r\n\t\tif ( format === GPUTextureFormat.ASTC12x12Unorm || format === GPUTextureFormat.ASTC12x12UnormSRGB ) return { byteLength: 16, width: 12, height: 12 };\r\n\r\n\t}\r\n\r\n\t_convertAddressMode( value ) {\r\n\r\n\t\tlet addressMode = GPUAddressMode.ClampToEdge;\r\n\r\n\t\tif ( value === RepeatWrapping ) {\r\n\r\n\t\t\taddressMode = GPUAddressMode.Repeat;\r\n\r\n\t\t} else if ( value === MirroredRepeatWrapping ) {\r\n\r\n\t\t\taddressMode = GPUAddressMode.MirrorRepeat;\r\n\r\n\t\t}\r\n\r\n\t\treturn addressMode;\r\n\r\n\t}\r\n\r\n\t_convertFilterMode( value ) {\r\n\r\n\t\tlet filterMode = GPUFilterMode.Linear;\r\n\r\n\t\tif ( value === NearestFilter || value === NearestMipmapNearestFilter || value === NearestMipmapLinearFilter ) {\r\n\r\n\t\t\tfilterMode = GPUFilterMode.Nearest;\r\n\r\n\t\t}\r\n\r\n\t\treturn filterMode;\r\n\r\n\t}\r\n\r\n\t_getSize( texture ) {\r\n\r\n\t\tconst image = texture.image;\r\n\r\n\t\tlet width, height, depth;\r\n\r\n\t\tif ( texture.isCubeTexture ) {\r\n\r\n\t\t\tconst faceImage = image.length > 0 ? image[ 0 ].image || image[ 0 ] : null;\r\n\r\n\t\t\twidth = faceImage ? faceImage.width : 1;\r\n\t\t\theight = faceImage ? faceImage.height : 1;\r\n\t\t\tdepth = 6; // one image for each side of the cube map\r\n\r\n\t\t} else if ( image !== null ) {\r\n\r\n\t\t\twidth = image.width;\r\n\t\t\theight = image.height;\r\n\t\t\tdepth = ( image.depth !== undefined ) ? image.depth : 1;\r\n\r\n\t\t} else {\r\n\r\n\t\t\twidth = height = depth = 1;\r\n\r\n\t\t}\r\n\r\n\t\treturn { width, height, depth };\r\n\r\n\t}\r\n\r\n\t_needsMipmaps( texture ) {\r\n\r\n\t\tif ( this._isEnvironmentTexture( texture ) ) return true;\r\n\r\n\t\treturn ( texture.isCompressedTexture !== true ) /*&& ( texture.generateMipmaps === true )*/ && ( texture.minFilter !== NearestFilter ) && ( texture.minFilter !== LinearFilter );\r\n\r\n\t}\r\n\r\n\t_getBytesPerTexel( format ) {\r\n\r\n\t\tif ( format === GPUTextureFormat.R8Unorm ) return 1;\r\n\t\tif ( format === GPUTextureFormat.R16Float ) return 2;\r\n\t\tif ( format === GPUTextureFormat.RG8Unorm ) return 2;\r\n\t\tif ( format === GPUTextureFormat.RG16Float ) return 4;\r\n\t\tif ( format === GPUTextureFormat.R32Float ) return 4;\r\n\t\tif ( format === GPUTextureFormat.RGBA8Unorm || format === GPUTextureFormat.RGBA8UnormSRGB ) return 4;\r\n\t\tif ( format === GPUTextureFormat.RG32Float ) return 8;\r\n\t\tif ( format === GPUTextureFormat.RGBA16Float ) return 8;\r\n\t\tif ( format === GPUTextureFormat.RGBA32Float ) return 16;\r\n\r\n\t}\r\n\r\n\t_getDimension( texture ) {\r\n\r\n\t\tlet dimension;\r\n\r\n\t\tif ( texture.isData3DTexture ) {\r\n\r\n\t\t\tdimension = GPUTextureDimension.ThreeD;\r\n\r\n\t\t} else {\r\n\r\n\t\t\tdimension = GPUTextureDimension.TwoD;\r\n\r\n\t\t}\r\n\r\n\t\treturn dimension;\r\n\r\n\t}\r\n\r\n\t_getMipLevelCount( texture, width, height, needsMipmaps ) {\r\n\r\n\t\tlet mipLevelCount;\r\n\r\n\t\tif ( texture.isCompressedTexture ) {\r\n\r\n\t\t\tmipLevelCount = texture.mipmaps.length;\r\n\r\n\t\t} else if ( needsMipmaps ) {\r\n\r\n\t\t\tmipLevelCount = Math.floor( Math.log2( Math.max( width, height ) ) ) + 1;\r\n\r\n\t\t} else {\r\n\r\n\t\t\tmipLevelCount = 1; // a texture without mipmaps has a base mip (mipLevel 0)\r\n\r\n\t\t}\r\n\r\n\t\treturn mipLevelCount;\r\n\r\n\t}\r\n\r\n\t_getFormat( texture ) {\r\n\r\n\t\tconst format = texture.format;\r\n\t\tconst type = texture.type;\r\n\t\tconst colorSpace = texture.colorSpace;\r\n\r\n\t\tlet formatGPU;\r\n\r\n\t\tif ( /*texture.isRenderTargetTexture === true ||*/ texture.isFramebufferTexture === true ) {\r\n\r\n\t\t\tformatGPU = GPUTextureFormat.BGRA8Unorm;\r\n\r\n\t\t} else if ( texture.isCompressedTexture === true ) {\r\n\r\n\t\t\tswitch ( format ) {\r\n\r\n\t\t\t\tcase RGBA_S3TC_DXT1_Format:\r\n\t\t\t\t\tformatGPU = ( colorSpace === SRGBColorSpace ) ? GPUTextureFormat.BC1RGBAUnormSRGB : GPUTextureFormat.BC1RGBAUnorm;\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase RGBA_S3TC_DXT3_Format:\r\n\t\t\t\t\tformatGPU = ( colorSpace === SRGBColorSpace ) ? GPUTextureFormat.BC2RGBAUnormSRGB : GPUTextureFormat.BC2RGBAUnorm;\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase RGBA_S3TC_DXT5_Format:\r\n\t\t\t\t\tformatGPU = ( colorSpace === SRGBColorSpace ) ? GPUTextureFormat.BC3RGBAUnormSRGB : GPUTextureFormat.BC3RGBAUnorm;\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase RGB_ETC2_Format:\r\n\t\t\t\t\tformatGPU = ( colorSpace === SRGBColorSpace ) ? GPUTextureFormat.ETC2RGB8UnormSRGB : GPUTextureFormat.ETC2RGB8Unorm;\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase RGBA_ETC2_EAC_Format:\r\n\t\t\t\t\tformatGPU = ( colorSpace === SRGBColorSpace ) ? GPUTextureFormat.ETC2RGBA8UnormSRGB : GPUTextureFormat.ETC2RGBA8Unorm;\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase RGBA_ASTC_4x4_Format:\r\n\t\t\t\t\tformatGPU = ( colorSpace === SRGBColorSpace ) ? GPUTextureFormat.ASTC4x4UnormSRGB : GPUTextureFormat.ASTC4x4Unorm;\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase RGBA_ASTC_5x4_Format:\r\n\t\t\t\t\tformatGPU = ( colorSpace === SRGBColorSpace ) ? GPUTextureFormat.ASTC5x4UnormSRGB : GPUTextureFormat.ASTC5x4Unorm;\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase RGBA_ASTC_5x5_Format:\r\n\t\t\t\t\tformatGPU = ( colorSpace === SRGBColorSpace ) ? GPUTextureFormat.ASTC5x5UnormSRGB : GPUTextureFormat.ASTC5x5Unorm;\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase RGBA_ASTC_6x5_Format:\r\n\t\t\t\t\tformatGPU = ( colorSpace === SRGBColorSpace ) ? GPUTextureFormat.ASTC6x5UnormSRGB : GPUTextureFormat.ASTC6x5Unorm;\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase RGBA_ASTC_6x6_Format:\r\n\t\t\t\t\tformatGPU = ( colorSpace === SRGBColorSpace ) ? GPUTextureFormat.ASTC6x6UnormSRGB : GPUTextureFormat.ASTC6x6Unorm;\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase RGBA_ASTC_8x5_Format:\r\n\t\t\t\t\tformatGPU = ( colorSpace === SRGBColorSpace ) ? GPUTextureFormat.ASTC8x5UnormSRGB : GPUTextureFormat.ASTC8x5Unorm;\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase RGBA_ASTC_8x6_Format:\r\n\t\t\t\t\tformatGPU = ( colorSpace === SRGBColorSpace ) ? GPUTextureFormat.ASTC8x6UnormSRGB : GPUTextureFormat.ASTC8x6Unorm;\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase RGBA_ASTC_8x8_Format:\r\n\t\t\t\t\tformatGPU = ( colorSpace === SRGBColorSpace ) ? GPUTextureFormat.ASTC8x8UnormSRGB : GPUTextureFormat.ASTC8x8Unorm;\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase RGBA_ASTC_10x5_Format:\r\n\t\t\t\t\tformatGPU = ( colorSpace === SRGBColorSpace ) ? GPUTextureFormat.ASTC10x5UnormSRGB : GPUTextureFormat.ASTC10x5Unorm;\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase RGBA_ASTC_10x6_Format:\r\n\t\t\t\t\tformatGPU = ( colorSpace === SRGBColorSpace ) ? GPUTextureFormat.ASTC10x6UnormSRGB : GPUTextureFormat.ASTC10x6Unorm;\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase RGBA_ASTC_10x8_Format:\r\n\t\t\t\t\tformatGPU = ( colorSpace === SRGBColorSpace ) ? GPUTextureFormat.ASTC10x8UnormSRGB : GPUTextureFormat.ASTC10x8Unorm;\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase RGBA_ASTC_10x10_Format:\r\n\t\t\t\t\tformatGPU = ( colorSpace === SRGBColorSpace ) ? GPUTextureFormat.ASTC10x10UnormSRGB : GPUTextureFormat.ASTC10x10Unorm;\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase RGBA_ASTC_12x10_Format:\r\n\t\t\t\t\tformatGPU = ( colorSpace === SRGBColorSpace ) ? GPUTextureFormat.ASTC12x10UnormSRGB : GPUTextureFormat.ASTC12x10Unorm;\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase RGBA_ASTC_12x12_Format:\r\n\t\t\t\t\tformatGPU = ( colorSpace === SRGBColorSpace ) ? GPUTextureFormat.ASTC12x12UnormSRGB : GPUTextureFormat.ASTC12x12Unorm;\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tconsole.error( 'WebGPURenderer: Unsupported texture format.', format );\r\n\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\r\n\t\t\tswitch ( format ) {\r\n\r\n\t\t\t\tcase RGBAFormat:\r\n\r\n\t\t\t\t\tswitch ( type ) {\r\n\r\n\t\t\t\t\t\tcase UnsignedByteType:\r\n\t\t\t\t\t\t\tformatGPU = ( colorSpace === SRGBColorSpace ) ? GPUTextureFormat.RGBA8UnormSRGB : GPUTextureFormat.RGBA8Unorm;\r\n\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\tcase HalfFloatType:\r\n\t\t\t\t\t\t\tformatGPU = GPUTextureFormat.RGBA16Float;\r\n\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\tcase FloatType:\r\n\t\t\t\t\t\t\tformatGPU = GPUTextureFormat.RGBA32Float;\r\n\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\tdefault:\r\n\t\t\t\t\t\t\tconsole.error( 'WebGPURenderer: Unsupported texture type with RGBAFormat.', type );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase RedFormat:\r\n\r\n\t\t\t\t\tswitch ( type ) {\r\n\r\n\t\t\t\t\t\tcase UnsignedByteType:\r\n\t\t\t\t\t\t\tformatGPU = GPUTextureFormat.R8Unorm;\r\n\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\tcase HalfFloatType:\r\n\t\t\t\t\t\t\tformatGPU = GPUTextureFormat.R16Float;\r\n\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\tcase FloatType:\r\n\t\t\t\t\t\t\tformatGPU = GPUTextureFormat.R32Float;\r\n\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\tdefault:\r\n\t\t\t\t\t\t\tconsole.error( 'WebGPURenderer: Unsupported texture type with RedFormat.', type );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase RGFormat:\r\n\r\n\t\t\t\t\tswitch ( type ) {\r\n\r\n\t\t\t\t\t\tcase UnsignedByteType:\r\n\t\t\t\t\t\t\tformatGPU = GPUTextureFormat.RG8Unorm;\r\n\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\tcase HalfFloatType:\r\n\t\t\t\t\t\t\tformatGPU = GPUTextureFormat.RG16Float;\r\n\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\tcase FloatType:\r\n\t\t\t\t\t\t\tformatGPU = GPUTextureFormat.RG32Float;\r\n\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\tdefault:\r\n\t\t\t\t\t\t\tconsole.error( 'WebGPURenderer: Unsupported texture type with RGFormat.', type );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase DepthFormat:\r\n\r\n\t\t\t\t\tswitch ( type ) {\r\n\r\n\t\t\t\t\t\tcase UnsignedShortType:\r\n\t\t\t\t\t\t\tformatGPU = GPUTextureFormat.Depth16Unorm;\r\n\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\tcase UnsignedIntType:\r\n\t\t\t\t\t\t\tformatGPU = GPUTextureFormat.Depth24Plus;\r\n\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\tcase FloatType:\r\n\t\t\t\t\t\t\tformatGPU = GPUTextureFormat.Depth32Float;\r\n\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\tdefault:\r\n\t\t\t\t\t\t\tconsole.error( 'WebGPURenderer: Unsupported texture type with DepthFormat.', type );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase DepthStencilFormat:\r\n\r\n\t\t\t\t\tswitch ( type ) {\r\n\r\n\t\t\t\t\t\tcase UnsignedInt248Type:\r\n\t\t\t\t\t\t\tformatGPU = GPUTextureFormat.Depth24PlusStencil8;\r\n\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\tcase FloatType:\r\n\r\n\t\t\t\t\t\t\tif ( this.device.features.has( GPUFeatureName.Depth32FloatStencil8 ) === false ) {\r\n\r\n\t\t\t\t\t\t\t\tconsole.error( 'WebGPURenderer: Depth textures with DepthStencilFormat + FloatType can only be used with the \"depth32float-stencil8\" GPU feature.' );\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tformatGPU = GPUTextureFormat.Depth32FloatStencil8;\r\n\r\n\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\tdefault:\r\n\t\t\t\t\t\t\tconsole.error( 'WebGPURenderer: Unsupported texture type with DepthStencilFormat.', type );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tconsole.error( 'WebGPURenderer: Unsupported texture format.', format );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn formatGPU;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default WebGPUTextureUtils;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}