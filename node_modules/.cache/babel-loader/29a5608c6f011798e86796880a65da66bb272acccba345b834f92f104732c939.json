{"ast":null,"code":"import DataMap from './DataMap.js';\nimport { Vector2, DepthTexture, DepthStencilFormat, UnsignedInt248Type } from 'three';\nconst _size = new Vector2();\nclass Textures extends DataMap {\n  constructor(backend, info) {\n    super();\n    this.backend = backend;\n    this.info = info;\n  }\n  updateRenderTarget(renderTarget) {\n    const renderTargetData = this.get(renderTarget);\n    const texture = renderTarget.texture;\n    const size = this.getSize(texture);\n    let depthTexture = renderTarget.depthTexture || renderTargetData.depthTexture;\n    if (depthTexture === undefined) {\n      depthTexture = new DepthTexture();\n      depthTexture.format = DepthStencilFormat;\n      depthTexture.type = UnsignedInt248Type;\n      depthTexture.image.width = size.width;\n      depthTexture.image.height = size.height;\n    }\n    if (renderTargetData.width !== size.width || size.height !== renderTargetData.height) {\n      texture.needsUpdate = true;\n      depthTexture.needsUpdate = true;\n      depthTexture.image.width = size.width;\n      depthTexture.image.height = size.height;\n    }\n    renderTargetData.width = size.width;\n    renderTargetData.height = size.height;\n    renderTargetData.texture = texture;\n    renderTargetData.depthTexture = depthTexture;\n    this.updateTexture(texture);\n    this.updateTexture(depthTexture);\n\n    // dispose handler\n\n    if (renderTargetData.initialized !== true) {\n      renderTargetData.initialized = true;\n\n      // dispose\n\n      const onDispose = () => {\n        renderTarget.removeEventListener('dispose', onDispose);\n        this._destroyTexture(texture);\n        this._destroyTexture(depthTexture);\n      };\n      renderTarget.addEventListener('dispose', onDispose);\n    }\n  }\n  updateTexture(texture) {\n    const textureData = this.get(texture);\n    if (textureData.initialized === true && textureData.version === texture.version) return;\n    const isRenderTexture = texture.isRenderTargetTexture || texture.isDepthTexture || texture.isFramebufferTexture;\n    const backend = this.backend;\n    if (isRenderTexture && textureData.initialized === true) {\n      // it's an update\n\n      backend.destroySampler(texture);\n      backend.destroyTexture(texture);\n    }\n\n    //\n\n    if (isRenderTexture) {\n      backend.createSampler(texture);\n      backend.createTexture(texture);\n    } else {\n      const needsCreate = textureData.initialized !== true;\n      if (needsCreate) backend.createSampler(texture);\n      if (texture.version > 0) {\n        const image = texture.image;\n        if (image === undefined) {\n          console.warn('THREE.Renderer: Texture marked for update but image is undefined.');\n        } else if (image.complete === false) {\n          console.warn('THREE.Renderer: Texture marked for update but image is incomplete.');\n        } else {\n          if (textureData.isDefaultTexture === undefined || textureData.isDefaultTexture === true) {\n            backend.createTexture(texture);\n            textureData.isDefaultTexture = false;\n          }\n          backend.updateTexture(texture);\n        }\n      } else {\n        // async update\n\n        backend.createDefaultTexture(texture);\n        textureData.isDefaultTexture = true;\n      }\n    }\n\n    // dispose handler\n\n    if (textureData.initialized !== true) {\n      textureData.initialized = true;\n\n      //\n\n      this.info.memory.textures++;\n\n      // dispose\n\n      const onDispose = () => {\n        texture.removeEventListener('dispose', onDispose);\n        this._destroyTexture(texture);\n        this.info.memory.textures--;\n      };\n      texture.addEventListener('dispose', onDispose);\n    }\n\n    //\n\n    textureData.version = texture.version;\n  }\n  getSize(texture) {\n    let target = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _size;\n    if (texture.isCubeTexture) {\n      target.width = texture.image[0].width;\n      target.height = texture.image[0].height;\n    } else {\n      target.width = texture.image.width;\n      target.height = texture.image.height;\n    }\n    return target;\n  }\n  _destroyTexture(texture) {\n    this.backend.destroySampler(texture);\n    this.backend.destroyTexture(texture);\n    this.delete(texture);\n  }\n}\nexport default Textures;","map":{"version":3,"names":["DataMap","Vector2","DepthTexture","DepthStencilFormat","UnsignedInt248Type","_size","Textures","constructor","backend","info","updateRenderTarget","renderTarget","renderTargetData","get","texture","size","getSize","depthTexture","undefined","format","type","image","width","height","needsUpdate","updateTexture","initialized","onDispose","removeEventListener","_destroyTexture","addEventListener","textureData","version","isRenderTexture","isRenderTargetTexture","isDepthTexture","isFramebufferTexture","destroySampler","destroyTexture","createSampler","createTexture","needsCreate","console","warn","complete","isDefaultTexture","createDefaultTexture","memory","textures","target","arguments","length","isCubeTexture","delete"],"sources":["C:/Users/LENOVO/Desktop/reactjsProject/drillit/node_modules/three/examples/jsm/renderers/common/Textures.js"],"sourcesContent":["import DataMap from './DataMap.js';\r\nimport { Vector2, DepthTexture, DepthStencilFormat, UnsignedInt248Type } from 'three';\r\n\r\nconst _size = new Vector2();\r\n\r\nclass Textures extends DataMap {\r\n\r\n\tconstructor( backend, info ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.backend = backend;\r\n\t\tthis.info = info;\r\n\r\n\t}\r\n\r\n\tupdateRenderTarget( renderTarget ) {\r\n\r\n\t\tconst renderTargetData = this.get( renderTarget );\r\n\r\n\t\tconst texture = renderTarget.texture;\r\n\t\tconst size = this.getSize( texture );\r\n\r\n\t\tlet depthTexture = renderTarget.depthTexture || renderTargetData.depthTexture;\r\n\r\n\t\tif ( depthTexture === undefined ) {\r\n\r\n\t\t\tdepthTexture = new DepthTexture();\r\n\t\t\tdepthTexture.format = DepthStencilFormat;\r\n\t\t\tdepthTexture.type = UnsignedInt248Type;\r\n\t\t\tdepthTexture.image.width = size.width;\r\n\t\t\tdepthTexture.image.height = size.height;\r\n\r\n\t\t}\r\n\r\n\t\tif ( renderTargetData.width !== size.width || size.height !== renderTargetData.height ) {\r\n\r\n\t\t\ttexture.needsUpdate = true;\r\n\t\t\tdepthTexture.needsUpdate = true;\r\n\r\n\t\t\tdepthTexture.image.width = size.width;\r\n\t\t\tdepthTexture.image.height = size.height;\r\n\r\n\t\t}\r\n\r\n\t\trenderTargetData.width = size.width;\r\n\t\trenderTargetData.height = size.height;\r\n\t\trenderTargetData.texture = texture;\r\n\t\trenderTargetData.depthTexture = depthTexture;\r\n\r\n\t\tthis.updateTexture( texture );\r\n\t\tthis.updateTexture( depthTexture );\r\n\r\n\t\t// dispose handler\r\n\r\n\t\tif ( renderTargetData.initialized !== true ) {\r\n\r\n\t\t\trenderTargetData.initialized = true;\r\n\r\n\t\t\t// dispose\r\n\r\n\t\t\tconst onDispose = () => {\r\n\r\n\t\t\t\trenderTarget.removeEventListener( 'dispose', onDispose );\r\n\r\n\t\t\t\tthis._destroyTexture( texture );\r\n\t\t\t\tthis._destroyTexture( depthTexture );\r\n\r\n\t\t\t};\r\n\r\n\t\t\trenderTarget.addEventListener( 'dispose', onDispose );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tupdateTexture( texture ) {\r\n\r\n\t\tconst textureData = this.get( texture );\r\n\t\tif ( textureData.initialized === true && textureData.version === texture.version ) return;\r\n\r\n\t\tconst isRenderTexture = texture.isRenderTargetTexture || texture.isDepthTexture || texture.isFramebufferTexture;\r\n\t\tconst backend = this.backend;\r\n\r\n\t\tif ( isRenderTexture && textureData.initialized === true ) {\r\n\r\n\t\t\t// it's an update\r\n\r\n\t\t\tbackend.destroySampler( texture );\r\n\t\t\tbackend.destroyTexture( texture );\r\n\r\n\t\t}\r\n\r\n\t\t//\r\n\r\n\t\tif ( isRenderTexture ) {\r\n\r\n\t\t\tbackend.createSampler( texture );\r\n\t\t\tbackend.createTexture( texture );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tconst needsCreate = textureData.initialized !== true;\r\n\r\n\t\t\tif ( needsCreate ) backend.createSampler( texture );\r\n\r\n\t\t\tif ( texture.version > 0 ) {\r\n\r\n\t\t\t\tconst image = texture.image;\r\n\r\n\t\t\t\tif ( image === undefined ) {\r\n\r\n\t\t\t\t\tconsole.warn( 'THREE.Renderer: Texture marked for update but image is undefined.' );\r\n\r\n\t\t\t\t} else if ( image.complete === false ) {\r\n\r\n\t\t\t\t\tconsole.warn( 'THREE.Renderer: Texture marked for update but image is incomplete.' );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tif ( textureData.isDefaultTexture === undefined || textureData.isDefaultTexture === true ) {\r\n\r\n\t\t\t\t\t\tbackend.createTexture( texture );\r\n\r\n\t\t\t\t\t\ttextureData.isDefaultTexture = false;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tbackend.updateTexture( texture );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t// async update\r\n\r\n\t\t\t\tbackend.createDefaultTexture( texture );\r\n\r\n\t\t\t\ttextureData.isDefaultTexture = true;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// dispose handler\r\n\r\n\t\tif ( textureData.initialized !== true ) {\r\n\r\n\t\t\ttextureData.initialized = true;\r\n\r\n\t\t\t//\r\n\r\n\t\t\tthis.info.memory.textures ++;\r\n\r\n\t\t\t// dispose\r\n\r\n\t\t\tconst onDispose = () => {\r\n\r\n\t\t\t\ttexture.removeEventListener( 'dispose', onDispose );\r\n\r\n\t\t\t\tthis._destroyTexture( texture );\r\n\r\n\t\t\t\tthis.info.memory.textures --;\r\n\r\n\t\t\t};\r\n\r\n\t\t\ttexture.addEventListener( 'dispose', onDispose );\r\n\r\n\t\t}\r\n\r\n\t\t//\r\n\r\n\t\ttextureData.version = texture.version;\r\n\r\n\t}\r\n\r\n\tgetSize( texture, target = _size ) {\r\n\r\n\t\tif ( texture.isCubeTexture ) {\r\n\r\n\t\t\ttarget.width = texture.image[ 0 ].width;\r\n\t\t\ttarget.height = texture.image[ 0 ].height;\r\n\r\n\t\t} else {\r\n\r\n\t\t\ttarget.width = texture.image.width;\r\n\t\t\ttarget.height = texture.image.height;\r\n\r\n\t\t}\r\n\r\n\t\treturn target;\r\n\r\n\t}\r\n\r\n\t_destroyTexture( texture ) {\r\n\r\n\t\tthis.backend.destroySampler( texture );\r\n\t\tthis.backend.destroyTexture( texture );\r\n\r\n\t\tthis.delete( texture );\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default Textures;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}