{"ast":null,"code":"import Node, { addNodeClass } from '../core/Node.js';\nimport { attribute } from '../core/AttributeNode.js';\nimport { label } from '../core/VarNode.js';\nimport { varying } from '../core/VaryingNode.js';\nimport { normalize } from '../math/MathNode.js';\nimport { cameraViewMatrix } from './CameraNode.js';\nimport { modelViewMatrix } from './ModelNode.js';\nimport { nodeImmutable } from '../shadernode/ShaderNode.js';\nclass TangentNode extends Node {\n  constructor() {\n    let scope = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : TangentNode.LOCAL;\n    super();\n    this.scope = scope;\n  }\n  getHash( /*builder*/\n  ) {\n    return `tangent-${this.scope}`;\n  }\n  getNodeType() {\n    const scope = this.scope;\n    if (scope === TangentNode.GEOMETRY) {\n      return 'vec4';\n    }\n    return 'vec3';\n  }\n  generate(builder) {\n    const scope = this.scope;\n    let outputNode = null;\n    if (scope === TangentNode.GEOMETRY) {\n      outputNode = attribute('tangent', 'vec4');\n    } else if (scope === TangentNode.LOCAL) {\n      outputNode = varying(tangentGeometry.xyz);\n    } else if (scope === TangentNode.VIEW) {\n      const vertexNode = modelViewMatrix.mul(tangentLocal).xyz;\n      outputNode = normalize(varying(vertexNode));\n    } else if (scope === TangentNode.WORLD) {\n      const vertexNode = tangentView.transformDirection(cameraViewMatrix);\n      outputNode = normalize(varying(vertexNode));\n    }\n    return outputNode.build(builder, this.getNodeType(builder));\n  }\n  serialize(data) {\n    super.serialize(data);\n    data.scope = this.scope;\n  }\n  deserialize(data) {\n    super.deserialize(data);\n    this.scope = data.scope;\n  }\n}\nTangentNode.GEOMETRY = 'geometry';\nTangentNode.LOCAL = 'local';\nTangentNode.VIEW = 'view';\nTangentNode.WORLD = 'world';\nexport default TangentNode;\nexport const tangentGeometry = nodeImmutable(TangentNode, TangentNode.GEOMETRY);\nexport const tangentLocal = nodeImmutable(TangentNode, TangentNode.LOCAL);\nexport const tangentView = nodeImmutable(TangentNode, TangentNode.VIEW);\nexport const tangentWorld = nodeImmutable(TangentNode, TangentNode.WORLD);\nexport const transformedTangentView = label(tangentView, 'TransformedTangentView');\nexport const transformedTangentWorld = normalize(transformedTangentView.transformDirection(cameraViewMatrix));\naddNodeClass(TangentNode);","map":{"version":3,"names":["Node","addNodeClass","attribute","label","varying","normalize","cameraViewMatrix","modelViewMatrix","nodeImmutable","TangentNode","constructor","scope","arguments","length","undefined","LOCAL","getHash","getNodeType","GEOMETRY","generate","builder","outputNode","tangentGeometry","xyz","VIEW","vertexNode","mul","tangentLocal","WORLD","tangentView","transformDirection","build","serialize","data","deserialize","tangentWorld","transformedTangentView","transformedTangentWorld"],"sources":["C:/Users/LENOVO/Desktop/reactjsProject/drillit/node_modules/three/examples/jsm/nodes/accessors/TangentNode.js"],"sourcesContent":["import Node, { addNodeClass } from '../core/Node.js';\r\nimport { attribute } from '../core/AttributeNode.js';\r\nimport { label } from '../core/VarNode.js';\r\nimport { varying } from '../core/VaryingNode.js';\r\nimport { normalize } from '../math/MathNode.js';\r\nimport { cameraViewMatrix } from './CameraNode.js';\r\nimport { modelViewMatrix } from './ModelNode.js';\r\nimport { nodeImmutable } from '../shadernode/ShaderNode.js';\r\n\r\nclass TangentNode extends Node {\r\n\r\n\tconstructor( scope = TangentNode.LOCAL ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.scope = scope;\r\n\r\n\t}\r\n\r\n\tgetHash( /*builder*/ ) {\r\n\r\n\t\treturn `tangent-${this.scope}`;\r\n\r\n\t}\r\n\r\n\tgetNodeType() {\r\n\r\n\t\tconst scope = this.scope;\r\n\r\n\t\tif ( scope === TangentNode.GEOMETRY ) {\r\n\r\n\t\t\treturn 'vec4';\r\n\r\n\t\t}\r\n\r\n\t\treturn 'vec3';\r\n\r\n\t}\r\n\r\n\r\n\tgenerate( builder ) {\r\n\r\n\t\tconst scope = this.scope;\r\n\r\n\t\tlet outputNode = null;\r\n\r\n\t\tif ( scope === TangentNode.GEOMETRY ) {\r\n\r\n\t\t\toutputNode = attribute( 'tangent', 'vec4' );\r\n\r\n\t\t} else if ( scope === TangentNode.LOCAL ) {\r\n\r\n\t\t\toutputNode = varying( tangentGeometry.xyz );\r\n\r\n\t\t} else if ( scope === TangentNode.VIEW ) {\r\n\r\n\t\t\tconst vertexNode = modelViewMatrix.mul( tangentLocal ).xyz;\r\n\t\t\toutputNode = normalize( varying( vertexNode ) );\r\n\r\n\t\t} else if ( scope === TangentNode.WORLD ) {\r\n\r\n\t\t\tconst vertexNode = tangentView.transformDirection( cameraViewMatrix );\r\n\t\t\toutputNode = normalize( varying( vertexNode ) );\r\n\r\n\t\t}\r\n\r\n\t\treturn outputNode.build( builder, this.getNodeType( builder ) );\r\n\r\n\t}\r\n\r\n\tserialize( data ) {\r\n\r\n\t\tsuper.serialize( data );\r\n\r\n\t\tdata.scope = this.scope;\r\n\r\n\t}\r\n\r\n\tdeserialize( data ) {\r\n\r\n\t\tsuper.deserialize( data );\r\n\r\n\t\tthis.scope = data.scope;\r\n\r\n\t}\r\n\r\n}\r\n\r\nTangentNode.GEOMETRY = 'geometry';\r\nTangentNode.LOCAL = 'local';\r\nTangentNode.VIEW = 'view';\r\nTangentNode.WORLD = 'world';\r\n\r\nexport default TangentNode;\r\n\r\nexport const tangentGeometry = nodeImmutable( TangentNode, TangentNode.GEOMETRY );\r\nexport const tangentLocal = nodeImmutable( TangentNode, TangentNode.LOCAL );\r\nexport const tangentView = nodeImmutable( TangentNode, TangentNode.VIEW );\r\nexport const tangentWorld = nodeImmutable( TangentNode, TangentNode.WORLD );\r\nexport const transformedTangentView = label( tangentView, 'TransformedTangentView' );\r\nexport const transformedTangentWorld = normalize( transformedTangentView.transformDirection( cameraViewMatrix ) );\r\n\r\naddNodeClass( TangentNode );\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}