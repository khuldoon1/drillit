{"ast":null,"code":"import UniformNode from '../core/UniformNode.js';\nimport { NodeUpdateType } from '../core/constants.js';\nimport { nodeObject, nodeImmutable } from '../shadernode/ShaderNode.js';\nimport { addNodeClass } from '../core/Node.js';\nclass TimerNode extends UniformNode {\n  constructor() {\n    let scope = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : TimerNode.LOCAL;\n    let scale = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n    let value = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    super(value);\n    this.scope = scope;\n    this.scale = scale;\n    this.updateType = NodeUpdateType.FRAME;\n  }\n  /*\r\n  @TODO:\r\n  getNodeType( builder ) {\r\n  \n  \tconst scope = this.scope;\r\n  \n  \tif ( scope === TimerNode.FRAME ) {\r\n  \n  \t\treturn 'uint';\r\n  \n  \t}\r\n  \n  \treturn 'float';\r\n  \n  }\r\n  */\n  update(frame) {\n    const scope = this.scope;\n    const scale = this.scale;\n    if (scope === TimerNode.LOCAL) {\n      this.value += frame.deltaTime * scale;\n    } else if (scope === TimerNode.DELTA) {\n      this.value = frame.deltaTime * scale;\n    } else if (scope === TimerNode.FRAME) {\n      this.value = frame.frameId;\n    } else {\n      // global\n\n      this.value = frame.time * scale;\n    }\n  }\n  serialize(data) {\n    super.serialize(data);\n    data.scope = this.scope;\n    data.scale = this.scale;\n  }\n  deserialize(data) {\n    super.deserialize(data);\n    this.scope = data.scope;\n    this.scale = data.scale;\n  }\n}\nTimerNode.LOCAL = 'local';\nTimerNode.GLOBAL = 'global';\nTimerNode.DELTA = 'delta';\nTimerNode.FRAME = 'frame';\nexport default TimerNode;\n\n// @TODO: add support to use node in timeScale\nexport const timerLocal = function (timeScale) {\n  let value = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  return nodeObject(new TimerNode(TimerNode.LOCAL, timeScale, value));\n};\nexport const timerGlobal = function (timeScale) {\n  let value = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  return nodeObject(new TimerNode(TimerNode.GLOBAL, timeScale, value));\n};\nexport const timerDelta = function (timeScale) {\n  let value = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  return nodeObject(new TimerNode(TimerNode.DELTA, timeScale, value));\n};\nexport const frameId = nodeImmutable(TimerNode, TimerNode.FRAME);\naddNodeClass(TimerNode);","map":{"version":3,"names":["UniformNode","NodeUpdateType","nodeObject","nodeImmutable","addNodeClass","TimerNode","constructor","scope","arguments","length","undefined","LOCAL","scale","value","updateType","FRAME","update","frame","deltaTime","DELTA","frameId","time","serialize","data","deserialize","GLOBAL","timerLocal","timeScale","timerGlobal","timerDelta"],"sources":["C:/Users/LENOVO/Desktop/reactjsProject/drillit/node_modules/three/examples/jsm/nodes/utils/TimerNode.js"],"sourcesContent":["import UniformNode from '../core/UniformNode.js';\r\nimport { NodeUpdateType } from '../core/constants.js';\r\nimport { nodeObject, nodeImmutable } from '../shadernode/ShaderNode.js';\r\nimport { addNodeClass } from '../core/Node.js';\r\n\r\nclass TimerNode extends UniformNode {\r\n\r\n\tconstructor( scope = TimerNode.LOCAL, scale = 1, value = 0 ) {\r\n\r\n\t\tsuper( value );\r\n\r\n\t\tthis.scope = scope;\r\n\t\tthis.scale = scale;\r\n\r\n\t\tthis.updateType = NodeUpdateType.FRAME;\r\n\r\n\t}\r\n\t/*\r\n\t@TODO:\r\n\tgetNodeType( builder ) {\r\n\r\n\t\tconst scope = this.scope;\r\n\r\n\t\tif ( scope === TimerNode.FRAME ) {\r\n\r\n\t\t\treturn 'uint';\r\n\r\n\t\t}\r\n\r\n\t\treturn 'float';\r\n\r\n\t}\r\n*/\r\n\tupdate( frame ) {\r\n\r\n\t\tconst scope = this.scope;\r\n\t\tconst scale = this.scale;\r\n\r\n\t\tif ( scope === TimerNode.LOCAL ) {\r\n\r\n\t\t\tthis.value += frame.deltaTime * scale;\r\n\r\n\t\t} else if ( scope === TimerNode.DELTA ) {\r\n\r\n\t\t\tthis.value = frame.deltaTime * scale;\r\n\r\n\t\t} else if ( scope === TimerNode.FRAME ) {\r\n\r\n\t\t\tthis.value = frame.frameId;\r\n\r\n\t\t} else {\r\n\r\n\t\t\t// global\r\n\r\n\t\t\tthis.value = frame.time * scale;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tserialize( data ) {\r\n\r\n\t\tsuper.serialize( data );\r\n\r\n\t\tdata.scope = this.scope;\r\n\t\tdata.scale = this.scale;\r\n\r\n\t}\r\n\r\n\tdeserialize( data ) {\r\n\r\n\t\tsuper.deserialize( data );\r\n\r\n\t\tthis.scope = data.scope;\r\n\t\tthis.scale = data.scale;\r\n\r\n\t}\r\n\r\n}\r\n\r\nTimerNode.LOCAL = 'local';\r\nTimerNode.GLOBAL = 'global';\r\nTimerNode.DELTA = 'delta';\r\nTimerNode.FRAME = 'frame';\r\n\r\nexport default TimerNode;\r\n\r\n// @TODO: add support to use node in timeScale\r\nexport const timerLocal = ( timeScale, value = 0 ) => nodeObject( new TimerNode( TimerNode.LOCAL, timeScale, value ) );\r\nexport const timerGlobal = ( timeScale, value = 0 ) => nodeObject( new TimerNode( TimerNode.GLOBAL, timeScale, value ) );\r\nexport const timerDelta = ( timeScale, value = 0 ) => nodeObject( new TimerNode( TimerNode.DELTA, timeScale, value ) );\r\nexport const frameId = nodeImmutable( TimerNode, TimerNode.FRAME );\r\n\r\naddNodeClass( TimerNode );\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}