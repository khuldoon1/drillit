{"ast":null,"code":"class Info {\n  constructor() {\n    this.autoReset = true;\n    this.render = {\n      frame: 0,\n      drawCalls: 0,\n      triangles: 0,\n      points: 0,\n      lines: 0\n    };\n    this.memory = {\n      geometries: 0,\n      textures: 0\n    };\n  }\n  update(object, count, instanceCount) {\n    this.render.drawCalls++;\n    if (object.isMesh || object.isSprite) {\n      this.render.triangles += instanceCount * (count / 3);\n    } else if (object.isPoints) {\n      this.render.points += instanceCount * count;\n    } else if (object.isLineSegments) {\n      this.render.lines += instanceCount * (count / 2);\n    } else if (object.isLine) {\n      this.render.lines += instanceCount * (count - 1);\n    } else {\n      console.error('THREE.WebGPUInfo: Unknown object type.');\n    }\n  }\n  reset() {\n    this.render.drawCalls = 0;\n    this.render.triangles = 0;\n    this.render.points = 0;\n    this.render.lines = 0;\n  }\n  dispose() {\n    this.reset();\n    this.render.frame = 0;\n    this.memory.geometries = 0;\n    this.memory.textures = 0;\n  }\n}\nexport default Info;","map":{"version":3,"names":["Info","constructor","autoReset","render","frame","drawCalls","triangles","points","lines","memory","geometries","textures","update","object","count","instanceCount","isMesh","isSprite","isPoints","isLineSegments","isLine","console","error","reset","dispose"],"sources":["C:/Users/LENOVO/Desktop/reactjsProject/drillit/node_modules/three/examples/jsm/renderers/common/Info.js"],"sourcesContent":["class Info {\r\n\r\n\tconstructor() {\r\n\r\n\t\tthis.autoReset = true;\r\n\r\n\t\tthis.render = {\r\n\t\t\tframe: 0,\r\n\t\t\tdrawCalls: 0,\r\n\t\t\ttriangles: 0,\r\n\t\t\tpoints: 0,\r\n\t\t\tlines: 0\r\n\t\t};\r\n\r\n\t\tthis.memory = {\r\n\t\t\tgeometries: 0,\r\n\t\t\ttextures: 0\r\n\t\t};\r\n\r\n\t}\r\n\r\n\tupdate( object, count, instanceCount ) {\r\n\r\n\t\tthis.render.drawCalls ++;\r\n\r\n\t\tif ( object.isMesh || object.isSprite ) {\r\n\r\n\t\t\tthis.render.triangles += instanceCount * ( count / 3 );\r\n\r\n\t\t} else if ( object.isPoints ) {\r\n\r\n\t\t\tthis.render.points += instanceCount * count;\r\n\r\n\t\t} else if ( object.isLineSegments ) {\r\n\r\n\t\t\tthis.render.lines += instanceCount * ( count / 2 );\r\n\r\n\t\t} else if ( object.isLine ) {\r\n\r\n\t\t\tthis.render.lines += instanceCount * ( count - 1 );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tconsole.error( 'THREE.WebGPUInfo: Unknown object type.' );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\treset() {\r\n\r\n\t\tthis.render.drawCalls = 0;\r\n\t\tthis.render.triangles = 0;\r\n\t\tthis.render.points = 0;\r\n\t\tthis.render.lines = 0;\r\n\r\n\t}\r\n\r\n\tdispose() {\r\n\r\n\t\tthis.reset();\r\n\r\n\t\tthis.render.frame = 0;\r\n\r\n\t\tthis.memory.geometries = 0;\r\n\t\tthis.memory.textures = 0;\r\n\r\n\t}\r\n\r\n}\r\n\r\n\r\nexport default Info;\r\n"],"mappings":"AAAA,MAAMA,IAAI,CAAC;EAEVC,WAAWA,CAAA,EAAG;IAEb,IAAI,CAACC,SAAS,GAAG,IAAI;IAErB,IAAI,CAACC,MAAM,GAAG;MACbC,KAAK,EAAE,CAAC;MACRC,SAAS,EAAE,CAAC;MACZC,SAAS,EAAE,CAAC;MACZC,MAAM,EAAE,CAAC;MACTC,KAAK,EAAE;IACR,CAAC;IAED,IAAI,CAACC,MAAM,GAAG;MACbC,UAAU,EAAE,CAAC;MACbC,QAAQ,EAAE;IACX,CAAC;EAEF;EAEAC,MAAMA,CAAEC,MAAM,EAAEC,KAAK,EAAEC,aAAa,EAAG;IAEtC,IAAI,CAACZ,MAAM,CAACE,SAAS,EAAG;IAExB,IAAKQ,MAAM,CAACG,MAAM,IAAIH,MAAM,CAACI,QAAQ,EAAG;MAEvC,IAAI,CAACd,MAAM,CAACG,SAAS,IAAIS,aAAa,IAAKD,KAAK,GAAG,CAAC,CAAE;IAEvD,CAAC,MAAM,IAAKD,MAAM,CAACK,QAAQ,EAAG;MAE7B,IAAI,CAACf,MAAM,CAACI,MAAM,IAAIQ,aAAa,GAAGD,KAAK;IAE5C,CAAC,MAAM,IAAKD,MAAM,CAACM,cAAc,EAAG;MAEnC,IAAI,CAAChB,MAAM,CAACK,KAAK,IAAIO,aAAa,IAAKD,KAAK,GAAG,CAAC,CAAE;IAEnD,CAAC,MAAM,IAAKD,MAAM,CAACO,MAAM,EAAG;MAE3B,IAAI,CAACjB,MAAM,CAACK,KAAK,IAAIO,aAAa,IAAKD,KAAK,GAAG,CAAC,CAAE;IAEnD,CAAC,MAAM;MAENO,OAAO,CAACC,KAAK,CAAE,wCAAyC,CAAC;IAE1D;EAED;EAEAC,KAAKA,CAAA,EAAG;IAEP,IAAI,CAACpB,MAAM,CAACE,SAAS,GAAG,CAAC;IACzB,IAAI,CAACF,MAAM,CAACG,SAAS,GAAG,CAAC;IACzB,IAAI,CAACH,MAAM,CAACI,MAAM,GAAG,CAAC;IACtB,IAAI,CAACJ,MAAM,CAACK,KAAK,GAAG,CAAC;EAEtB;EAEAgB,OAAOA,CAAA,EAAG;IAET,IAAI,CAACD,KAAK,CAAC,CAAC;IAEZ,IAAI,CAACpB,MAAM,CAACC,KAAK,GAAG,CAAC;IAErB,IAAI,CAACK,MAAM,CAACC,UAAU,GAAG,CAAC;IAC1B,IAAI,CAACD,MAAM,CAACE,QAAQ,GAAG,CAAC;EAEzB;AAED;AAGA,eAAeX,IAAI"},"metadata":{},"sourceType":"module","externalDependencies":[]}