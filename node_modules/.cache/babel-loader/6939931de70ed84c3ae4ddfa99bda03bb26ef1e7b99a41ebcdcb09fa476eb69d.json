{"ast":null,"code":"import TempNode from '../core/TempNode.js';\nimport { EPSILON } from '../math/MathNode.js';\nimport { addNodeClass } from '../core/Node.js';\nimport { addNodeElement, ShaderNode, nodeProxy, vec3 } from '../shadernode/ShaderNode.js';\nexport const BurnNode = new ShaderNode(_ref => {\n  let {\n    base,\n    blend\n  } = _ref;\n  const fn = c => blend[c].lessThan(EPSILON).cond(blend[c], base[c].oneMinus().div(blend[c]).oneMinus().max(0));\n  return vec3(fn('x'), fn('y'), fn('z'));\n});\nexport const DodgeNode = new ShaderNode(_ref2 => {\n  let {\n    base,\n    blend\n  } = _ref2;\n  const fn = c => blend[c].equal(1.0).cond(blend[c], base[c].div(blend[c].oneMinus()).max(0));\n  return vec3(fn('x'), fn('y'), fn('z'));\n});\nexport const ScreenNode = new ShaderNode(_ref3 => {\n  let {\n    base,\n    blend\n  } = _ref3;\n  const fn = c => base[c].oneMinus().mul(blend[c].oneMinus()).oneMinus();\n  return vec3(fn('x'), fn('y'), fn('z'));\n});\nexport const OverlayNode = new ShaderNode(_ref4 => {\n  let {\n    base,\n    blend\n  } = _ref4;\n  const fn = c => base[c].lessThan(0.5).cond(base[c].mul(blend[c], 2.0), base[c].oneMinus().mul(blend[c].oneMinus()).oneMinus());\n  return vec3(fn('x'), fn('y'), fn('z'));\n});\nclass BlendModeNode extends TempNode {\n  constructor(blendMode, baseNode, blendNode) {\n    super();\n    this.blendMode = blendMode;\n    this.baseNode = baseNode;\n    this.blendNode = blendNode;\n  }\n  construct() {\n    const {\n      blendMode,\n      baseNode,\n      blendNode\n    } = this;\n    const params = {\n      base: baseNode,\n      blend: blendNode\n    };\n    let outputNode = null;\n    if (blendMode === BlendModeNode.BURN) {\n      outputNode = BurnNode.call(params);\n    } else if (blendMode === BlendModeNode.DODGE) {\n      outputNode = DodgeNode.call(params);\n    } else if (blendMode === BlendModeNode.SCREEN) {\n      outputNode = ScreenNode.call(params);\n    } else if (blendMode === BlendModeNode.OVERLAY) {\n      outputNode = OverlayNode.call(params);\n    }\n    return outputNode;\n  }\n}\nBlendModeNode.BURN = 'burn';\nBlendModeNode.DODGE = 'dodge';\nBlendModeNode.SCREEN = 'screen';\nBlendModeNode.OVERLAY = 'overlay';\nexport default BlendModeNode;\nexport const burn = nodeProxy(BlendModeNode, BlendModeNode.BURN);\nexport const dodge = nodeProxy(BlendModeNode, BlendModeNode.DODGE);\nexport const overlay = nodeProxy(BlendModeNode, BlendModeNode.OVERLAY);\nexport const screen = nodeProxy(BlendModeNode, BlendModeNode.SCREEN);\naddNodeElement('burn', burn);\naddNodeElement('dodge', dodge);\naddNodeElement('overlay', overlay);\naddNodeElement('screen', screen);\naddNodeClass(BlendModeNode);","map":{"version":3,"names":["TempNode","EPSILON","addNodeClass","addNodeElement","ShaderNode","nodeProxy","vec3","BurnNode","_ref","base","blend","fn","c","lessThan","cond","oneMinus","div","max","DodgeNode","_ref2","equal","ScreenNode","_ref3","mul","OverlayNode","_ref4","BlendModeNode","constructor","blendMode","baseNode","blendNode","construct","params","outputNode","BURN","call","DODGE","SCREEN","OVERLAY","burn","dodge","overlay","screen"],"sources":["C:/Users/LENOVO/Desktop/reactjsProject/drillit/node_modules/three/examples/jsm/nodes/display/BlendModeNode.js"],"sourcesContent":["import TempNode from '../core/TempNode.js';\r\nimport { EPSILON } from '../math/MathNode.js';\r\nimport { addNodeClass } from '../core/Node.js';\r\nimport { addNodeElement, ShaderNode, nodeProxy, vec3 } from '../shadernode/ShaderNode.js';\r\n\r\nexport const BurnNode = new ShaderNode( ( { base, blend } ) => {\r\n\r\n\tconst fn = ( c ) => blend[ c ].lessThan( EPSILON ).cond( blend[ c ], base[ c ].oneMinus().div( blend[ c ] ).oneMinus().max( 0 ) );\r\n\r\n\treturn vec3( fn( 'x' ), fn( 'y' ), fn( 'z' ) );\r\n\r\n} );\r\n\r\nexport const DodgeNode = new ShaderNode( ( { base, blend } ) => {\r\n\r\n\tconst fn = ( c ) => blend[ c ].equal( 1.0 ).cond( blend[ c ], base[ c ].div( blend[ c ].oneMinus() ).max( 0 ) );\r\n\r\n\treturn vec3( fn( 'x' ), fn( 'y' ), fn( 'z' ) );\r\n\r\n} );\r\n\r\nexport const ScreenNode = new ShaderNode( ( { base, blend } ) => {\r\n\r\n\tconst fn = ( c ) => base[ c ].oneMinus().mul( blend[ c ].oneMinus() ).oneMinus();\r\n\r\n\treturn vec3( fn( 'x' ), fn( 'y' ), fn( 'z' ) );\r\n\r\n} );\r\n\r\nexport const OverlayNode = new ShaderNode( ( { base, blend } ) => {\r\n\r\n\tconst fn = ( c ) => base[ c ].lessThan( 0.5 ).cond( base[ c ].mul( blend[ c ], 2.0 ), base[ c ].oneMinus().mul( blend[ c ].oneMinus() ).oneMinus() );\r\n\r\n\treturn vec3( fn( 'x' ), fn( 'y' ), fn( 'z' ) );\r\n\r\n} );\r\n\r\nclass BlendModeNode extends TempNode {\r\n\r\n\tconstructor( blendMode, baseNode, blendNode ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.blendMode = blendMode;\r\n\r\n\t\tthis.baseNode = baseNode;\r\n\t\tthis.blendNode = blendNode;\r\n\r\n\t}\r\n\r\n\tconstruct() {\r\n\r\n\t\tconst { blendMode, baseNode, blendNode } = this;\r\n\t\tconst params = { base: baseNode, blend: blendNode };\r\n\r\n\t\tlet outputNode = null;\r\n\r\n\t\tif ( blendMode === BlendModeNode.BURN ) {\r\n\r\n\t\t\toutputNode = BurnNode.call( params );\r\n\r\n\t\t} else if ( blendMode === BlendModeNode.DODGE ) {\r\n\r\n\t\t\toutputNode = DodgeNode.call( params );\r\n\r\n\t\t} else if ( blendMode === BlendModeNode.SCREEN ) {\r\n\r\n\t\t\toutputNode = ScreenNode.call( params );\r\n\r\n\t\t} else if ( blendMode === BlendModeNode.OVERLAY ) {\r\n\r\n\t\t\toutputNode = OverlayNode.call( params );\r\n\r\n\t\t}\r\n\r\n\t\treturn outputNode;\r\n\r\n\t}\r\n\r\n}\r\n\r\nBlendModeNode.BURN = 'burn';\r\nBlendModeNode.DODGE = 'dodge';\r\nBlendModeNode.SCREEN = 'screen';\r\nBlendModeNode.OVERLAY = 'overlay';\r\n\r\nexport default BlendModeNode;\r\n\r\nexport const burn = nodeProxy( BlendModeNode, BlendModeNode.BURN );\r\nexport const dodge = nodeProxy( BlendModeNode, BlendModeNode.DODGE );\r\nexport const overlay = nodeProxy( BlendModeNode, BlendModeNode.OVERLAY );\r\nexport const screen = nodeProxy( BlendModeNode, BlendModeNode.SCREEN );\r\n\r\naddNodeElement( 'burn', burn );\r\naddNodeElement( 'dodge', dodge );\r\naddNodeElement( 'overlay', overlay );\r\naddNodeElement( 'screen', screen );\r\n\r\naddNodeClass( BlendModeNode );\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}