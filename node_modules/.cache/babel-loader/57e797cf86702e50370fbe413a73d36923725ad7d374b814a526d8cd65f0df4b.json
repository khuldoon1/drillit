{"ast":null,"code":"import BRDF_Lambert from './BSDF/BRDF_Lambert.js';\nimport BRDF_GGX from './BSDF/BRDF_GGX.js';\nimport DFGApprox from './BSDF/DFGApprox.js';\nimport { lightingModel } from '../core/LightingModel.js';\nimport { temp } from '../core/VarNode.js';\nimport { diffuseColor, specularColor, roughness } from '../core/PropertyNode.js';\nimport { transformedNormalView } from '../accessors/NormalNode.js';\nimport { positionViewDirection } from '../accessors/PositionNode.js';\nimport { ShaderNode, float, vec3 } from '../shadernode/ShaderNode.js';\n\n// Fdez-Agüera's \"Multiple-Scattering Microfacet Model for Real-Time Image Based Lighting\"\n// Approximates multiscattering in order to preserve energy.\n// http://www.jcgt.org/published/0008/01/03/\nconst computeMultiscattering = function (singleScatter, multiScatter) {\n  let specularF90 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : float(1);\n  const fab = DFGApprox.call({\n    roughness\n  });\n  const FssEss = specularColor.mul(fab.x).add(specularF90.mul(fab.y));\n  const Ess = fab.x.add(fab.y);\n  const Ems = Ess.oneMinus();\n  const Favg = specularColor.add(specularColor.oneMinus().mul(0.047619)); // 1/21\n  const Fms = FssEss.mul(Favg).div(Ems.mul(Favg).oneMinus());\n  singleScatter.addAssign(FssEss);\n  multiScatter.addAssign(Fms.mul(Ems));\n};\nconst RE_IndirectSpecular_Physical = new ShaderNode(inputs => {\n  const {\n    radiance,\n    iblIrradiance,\n    reflectedLight\n  } = inputs;\n\n  // Both indirect specular and indirect diffuse light accumulate here\n\n  const singleScattering = temp(vec3());\n  const multiScattering = temp(vec3());\n  const cosineWeightedIrradiance = iblIrradiance.mul(1 / Math.PI);\n  computeMultiscattering(singleScattering, multiScattering);\n  const totalScattering = singleScattering.add(multiScattering);\n  const diffuse = diffuseColor.mul(totalScattering.r.max(totalScattering.g).max(totalScattering.b).oneMinus());\n  reflectedLight.indirectSpecular.addAssign(radiance.mul(singleScattering));\n  reflectedLight.indirectSpecular.addAssign(multiScattering.mul(cosineWeightedIrradiance));\n  reflectedLight.indirectDiffuse.addAssign(diffuse.mul(cosineWeightedIrradiance));\n});\nconst RE_IndirectDiffuse_Physical = new ShaderNode(inputs => {\n  const {\n    irradiance,\n    reflectedLight\n  } = inputs;\n  reflectedLight.indirectDiffuse.addAssign(irradiance.mul(BRDF_Lambert.call({\n    diffuseColor\n  })));\n});\nconst RE_Direct_Physical = new ShaderNode(inputs => {\n  const {\n    lightDirection,\n    lightColor,\n    reflectedLight\n  } = inputs;\n  const dotNL = transformedNormalView.dot(lightDirection).clamp();\n  const irradiance = dotNL.mul(lightColor);\n  reflectedLight.directDiffuse.addAssign(irradiance.mul(BRDF_Lambert.call({\n    diffuseColor: diffuseColor.rgb\n  })));\n  reflectedLight.directSpecular.addAssign(irradiance.mul(BRDF_GGX.call({\n    lightDirection,\n    f0: specularColor,\n    f90: 1,\n    roughness\n  })));\n});\nconst RE_AmbientOcclusion_Physical = new ShaderNode(_ref => {\n  let {\n    ambientOcclusion,\n    reflectedLight\n  } = _ref;\n  const dotNV = transformedNormalView.dot(positionViewDirection).clamp();\n  const aoNV = dotNV.add(ambientOcclusion);\n  const aoExp = roughness.mul(-16.0).oneMinus().negate().exp2();\n  const aoNode = ambientOcclusion.sub(aoNV.pow(aoExp).oneMinus()).clamp();\n  reflectedLight.indirectDiffuse.mulAssign(ambientOcclusion);\n  reflectedLight.indirectSpecular.mulAssign(aoNode);\n});\nconst physicalLightingModel = lightingModel(RE_Direct_Physical, RE_IndirectDiffuse_Physical, RE_IndirectSpecular_Physical, RE_AmbientOcclusion_Physical);\nexport default physicalLightingModel;","map":{"version":3,"names":["BRDF_Lambert","BRDF_GGX","DFGApprox","lightingModel","temp","diffuseColor","specularColor","roughness","transformedNormalView","positionViewDirection","ShaderNode","float","vec3","computeMultiscattering","singleScatter","multiScatter","specularF90","arguments","length","undefined","fab","call","FssEss","mul","x","add","y","Ess","Ems","oneMinus","Favg","Fms","div","addAssign","RE_IndirectSpecular_Physical","inputs","radiance","iblIrradiance","reflectedLight","singleScattering","multiScattering","cosineWeightedIrradiance","Math","PI","totalScattering","diffuse","r","max","g","b","indirectSpecular","indirectDiffuse","RE_IndirectDiffuse_Physical","irradiance","RE_Direct_Physical","lightDirection","lightColor","dotNL","dot","clamp","directDiffuse","rgb","directSpecular","f0","f90","RE_AmbientOcclusion_Physical","_ref","ambientOcclusion","dotNV","aoNV","aoExp","negate","exp2","aoNode","sub","pow","mulAssign","physicalLightingModel"],"sources":["C:/Users/LENOVO/Desktop/reactjsProject/drillit/node_modules/three/examples/jsm/nodes/functions/PhysicalLightingModel.js"],"sourcesContent":["import BRDF_Lambert from './BSDF/BRDF_Lambert.js';\r\nimport BRDF_GGX from './BSDF/BRDF_GGX.js';\r\nimport DFGApprox from './BSDF/DFGApprox.js';\r\nimport { lightingModel } from '../core/LightingModel.js';\r\nimport { temp } from '../core/VarNode.js';\r\nimport { diffuseColor, specularColor, roughness } from '../core/PropertyNode.js';\r\nimport { transformedNormalView } from '../accessors/NormalNode.js';\r\nimport { positionViewDirection } from '../accessors/PositionNode.js';\r\nimport { ShaderNode, float, vec3 } from '../shadernode/ShaderNode.js';\r\n\r\n// Fdez-Agüera's \"Multiple-Scattering Microfacet Model for Real-Time Image Based Lighting\"\r\n// Approximates multiscattering in order to preserve energy.\r\n// http://www.jcgt.org/published/0008/01/03/\r\nconst computeMultiscattering = ( singleScatter, multiScatter, specularF90 = float( 1 ) ) => {\r\n\r\n\tconst fab = DFGApprox.call( { roughness } );\r\n\r\n\tconst FssEss = specularColor.mul( fab.x ).add( specularF90.mul( fab.y ) );\r\n\r\n\tconst Ess = fab.x.add( fab.y );\r\n\tconst Ems = Ess.oneMinus();\r\n\r\n\tconst Favg = specularColor.add( specularColor.oneMinus().mul( 0.047619 ) ); // 1/21\r\n\tconst Fms = FssEss.mul( Favg ).div( Ems.mul( Favg ).oneMinus() );\r\n\r\n\tsingleScatter.addAssign( FssEss );\r\n\tmultiScatter.addAssign( Fms.mul( Ems ) );\r\n\r\n};\r\n\r\nconst RE_IndirectSpecular_Physical = new ShaderNode( ( inputs ) => {\r\n\r\n\tconst { radiance, iblIrradiance, reflectedLight } = inputs;\r\n\r\n\t// Both indirect specular and indirect diffuse light accumulate here\r\n\r\n\tconst singleScattering = temp( vec3() );\r\n\tconst multiScattering = temp( vec3() );\r\n\tconst cosineWeightedIrradiance = iblIrradiance.mul( 1 / Math.PI );\r\n\r\n\tcomputeMultiscattering( singleScattering, multiScattering );\r\n\r\n\tconst totalScattering = singleScattering.add( multiScattering );\r\n\r\n\tconst diffuse = diffuseColor.mul( totalScattering.r.max( totalScattering.g ).max( totalScattering.b ).oneMinus() );\r\n\r\n\treflectedLight.indirectSpecular.addAssign( radiance.mul( singleScattering ) );\r\n\treflectedLight.indirectSpecular.addAssign( multiScattering.mul( cosineWeightedIrradiance ) );\r\n\r\n\treflectedLight.indirectDiffuse.addAssign( diffuse.mul( cosineWeightedIrradiance ) );\r\n\r\n} );\r\n\r\nconst RE_IndirectDiffuse_Physical = new ShaderNode( ( inputs ) => {\r\n\r\n\tconst { irradiance, reflectedLight } = inputs;\r\n\r\n\treflectedLight.indirectDiffuse.addAssign( irradiance.mul( BRDF_Lambert.call( { diffuseColor } ) ) );\r\n\r\n} );\r\n\r\nconst RE_Direct_Physical = new ShaderNode( ( inputs ) => {\r\n\r\n\tconst { lightDirection, lightColor, reflectedLight } = inputs;\r\n\r\n\tconst dotNL = transformedNormalView.dot( lightDirection ).clamp();\r\n\tconst irradiance = dotNL.mul( lightColor );\r\n\r\n\treflectedLight.directDiffuse.addAssign( irradiance.mul( BRDF_Lambert.call( { diffuseColor: diffuseColor.rgb } ) ) );\r\n\r\n\treflectedLight.directSpecular.addAssign( irradiance.mul( BRDF_GGX.call( { lightDirection, f0: specularColor, f90: 1, roughness } ) ) );\r\n\r\n} );\r\n\r\nconst RE_AmbientOcclusion_Physical = new ShaderNode( ( { ambientOcclusion, reflectedLight } ) => {\r\n\r\n\tconst dotNV = transformedNormalView.dot( positionViewDirection ).clamp();\r\n\r\n\tconst aoNV = dotNV.add( ambientOcclusion );\r\n\tconst aoExp = roughness.mul( - 16.0 ).oneMinus().negate().exp2();\r\n\r\n\tconst aoNode = ambientOcclusion.sub( aoNV.pow( aoExp ).oneMinus() ).clamp();\r\n\r\n\treflectedLight.indirectDiffuse.mulAssign( ambientOcclusion );\r\n\r\n\treflectedLight.indirectSpecular.mulAssign( aoNode );\r\n\r\n\r\n} );\r\n\r\nconst physicalLightingModel = lightingModel( RE_Direct_Physical, RE_IndirectDiffuse_Physical, RE_IndirectSpecular_Physical, RE_AmbientOcclusion_Physical );\r\n\r\nexport default physicalLightingModel;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}