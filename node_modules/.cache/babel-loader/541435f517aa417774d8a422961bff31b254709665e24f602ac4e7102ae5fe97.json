{"ast":null,"code":"import TextureNode from '../accessors/TextureNode.js';\nimport { NodeUpdateType } from '../core/constants.js';\nimport { addNodeClass } from '../core/Node.js';\nimport { addNodeElement, nodeProxy } from '../shadernode/ShaderNode.js';\nimport { viewportTopLeft } from './ViewportNode.js';\nimport { Vector2, FramebufferTexture } from 'three';\nconst _size = new Vector2();\nclass ViewportTextureNode extends TextureNode {\n  constructor() {\n    let uv = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : viewportTopLeft;\n    let level = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    super(null, uv, level);\n    this.isOutputTextureNode = true;\n    this.updateBeforeType = NodeUpdateType.FRAME;\n  }\n  constructFramebuffer( /*builder*/\n  ) {\n    return new FramebufferTexture();\n  }\n  construct(builder) {\n    if (this.value === null) this.value = this.constructFramebuffer(builder);\n    return super.construct(builder);\n  }\n  updateBefore(frame) {\n    const renderer = frame.renderer;\n    renderer.getDrawingBufferSize(_size);\n\n    //\n\n    const framebufferTexture = this.value;\n    if (framebufferTexture.image.width !== _size.width || framebufferTexture.image.height !== _size.height) {\n      framebufferTexture.image.width = _size.width;\n      framebufferTexture.image.height = _size.height;\n      framebufferTexture.needsUpdate = true;\n    }\n\n    //\n\n    renderer.copyFramebufferToTexture(framebufferTexture);\n  }\n}\nexport default ViewportTextureNode;\nexport const viewportTexture = nodeProxy(ViewportTextureNode);\naddNodeElement('viewportTexture', viewportTexture);\naddNodeClass(ViewportTextureNode);","map":{"version":3,"names":["TextureNode","NodeUpdateType","addNodeClass","addNodeElement","nodeProxy","viewportTopLeft","Vector2","FramebufferTexture","_size","ViewportTextureNode","constructor","uv","arguments","length","undefined","level","isOutputTextureNode","updateBeforeType","FRAME","constructFramebuffer","construct","builder","value","updateBefore","frame","renderer","getDrawingBufferSize","framebufferTexture","image","width","height","needsUpdate","copyFramebufferToTexture","viewportTexture"],"sources":["C:/Users/LENOVO/Desktop/reactjsProject/drillit/node_modules/three/examples/jsm/nodes/display/ViewportTextureNode.js"],"sourcesContent":["import TextureNode from '../accessors/TextureNode.js';\r\nimport { NodeUpdateType } from '../core/constants.js';\r\nimport { addNodeClass } from '../core/Node.js';\r\nimport { addNodeElement, nodeProxy } from '../shadernode/ShaderNode.js';\r\nimport { viewportTopLeft } from './ViewportNode.js';\r\nimport { Vector2, FramebufferTexture } from 'three';\r\n\r\nconst _size = new Vector2();\r\n\r\nclass ViewportTextureNode extends TextureNode {\r\n\r\n\tconstructor( uv = viewportTopLeft, level = null ) {\r\n\r\n\t\tsuper( null, uv, level );\r\n\r\n\t\tthis.isOutputTextureNode = true;\r\n\r\n\t\tthis.updateBeforeType = NodeUpdateType.FRAME;\r\n\r\n\t}\r\n\r\n\tconstructFramebuffer( /*builder*/ ) {\r\n\r\n\t\treturn new FramebufferTexture();\r\n\r\n\t}\r\n\r\n\tconstruct( builder ) {\r\n\r\n\t\tif ( this.value === null ) this.value = this.constructFramebuffer( builder );\r\n\r\n\t\treturn super.construct( builder );\r\n\r\n\t}\r\n\r\n\tupdateBefore( frame ) {\r\n\r\n\t\tconst renderer = frame.renderer;\r\n\t\trenderer.getDrawingBufferSize( _size );\r\n\r\n\t\t//\r\n\r\n\t\tconst framebufferTexture = this.value;\r\n\r\n\t\tif ( framebufferTexture.image.width !== _size.width || framebufferTexture.image.height !== _size.height ) {\r\n\r\n\t\t\tframebufferTexture.image.width = _size.width;\r\n\t\t\tframebufferTexture.image.height = _size.height;\r\n\t\t\tframebufferTexture.needsUpdate = true;\r\n\r\n\t\t}\r\n\r\n\t\t//\r\n\r\n\t\trenderer.copyFramebufferToTexture( framebufferTexture );\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default ViewportTextureNode;\r\n\r\nexport const viewportTexture = nodeProxy( ViewportTextureNode );\r\n\r\naddNodeElement( 'viewportTexture', viewportTexture );\r\n\r\naddNodeClass( ViewportTextureNode );\r\n"],"mappings":"AAAA,OAAOA,WAAW,MAAM,6BAA6B;AACrD,SAASC,cAAc,QAAQ,sBAAsB;AACrD,SAASC,YAAY,QAAQ,iBAAiB;AAC9C,SAASC,cAAc,EAAEC,SAAS,QAAQ,6BAA6B;AACvE,SAASC,eAAe,QAAQ,mBAAmB;AACnD,SAASC,OAAO,EAAEC,kBAAkB,QAAQ,OAAO;AAEnD,MAAMC,KAAK,GAAG,IAAIF,OAAO,CAAC,CAAC;AAE3B,MAAMG,mBAAmB,SAAST,WAAW,CAAC;EAE7CU,WAAWA,CAAA,EAAuC;IAAA,IAArCC,EAAE,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAGP,eAAe;IAAA,IAAEU,KAAK,GAAAH,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,IAAI;IAE9C,KAAK,CAAE,IAAI,EAAED,EAAE,EAAEI,KAAM,CAAC;IAExB,IAAI,CAACC,mBAAmB,GAAG,IAAI;IAE/B,IAAI,CAACC,gBAAgB,GAAGhB,cAAc,CAACiB,KAAK;EAE7C;EAEAC,oBAAoBA,CAAA,CAAE;EAAA,EAAc;IAEnC,OAAO,IAAIZ,kBAAkB,CAAC,CAAC;EAEhC;EAEAa,SAASA,CAAEC,OAAO,EAAG;IAEpB,IAAK,IAAI,CAACC,KAAK,KAAK,IAAI,EAAG,IAAI,CAACA,KAAK,GAAG,IAAI,CAACH,oBAAoB,CAAEE,OAAQ,CAAC;IAE5E,OAAO,KAAK,CAACD,SAAS,CAAEC,OAAQ,CAAC;EAElC;EAEAE,YAAYA,CAAEC,KAAK,EAAG;IAErB,MAAMC,QAAQ,GAAGD,KAAK,CAACC,QAAQ;IAC/BA,QAAQ,CAACC,oBAAoB,CAAElB,KAAM,CAAC;;IAEtC;;IAEA,MAAMmB,kBAAkB,GAAG,IAAI,CAACL,KAAK;IAErC,IAAKK,kBAAkB,CAACC,KAAK,CAACC,KAAK,KAAKrB,KAAK,CAACqB,KAAK,IAAIF,kBAAkB,CAACC,KAAK,CAACE,MAAM,KAAKtB,KAAK,CAACsB,MAAM,EAAG;MAEzGH,kBAAkB,CAACC,KAAK,CAACC,KAAK,GAAGrB,KAAK,CAACqB,KAAK;MAC5CF,kBAAkB,CAACC,KAAK,CAACE,MAAM,GAAGtB,KAAK,CAACsB,MAAM;MAC9CH,kBAAkB,CAACI,WAAW,GAAG,IAAI;IAEtC;;IAEA;;IAEAN,QAAQ,CAACO,wBAAwB,CAAEL,kBAAmB,CAAC;EAExD;AAED;AAEA,eAAelB,mBAAmB;AAElC,OAAO,MAAMwB,eAAe,GAAG7B,SAAS,CAAEK,mBAAoB,CAAC;AAE/DN,cAAc,CAAE,iBAAiB,EAAE8B,eAAgB,CAAC;AAEpD/B,YAAY,CAAEO,mBAAoB,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}