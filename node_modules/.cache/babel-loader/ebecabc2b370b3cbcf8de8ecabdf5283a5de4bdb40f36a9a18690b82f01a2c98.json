{"ast":null,"code":"import { NodeUpdateType } from './constants.js';\nimport { getNodeChildren, getCacheKey } from './NodeUtils.js';\nimport { MathUtils } from 'three';\nconst NodeClasses = new Map();\nlet _nodeId = 0;\nclass Node {\n  constructor() {\n    let nodeType = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n    this.isNode = true;\n    this.nodeType = nodeType;\n    this.updateType = NodeUpdateType.NONE;\n    this.updateBeforeType = NodeUpdateType.NONE;\n    this.uuid = MathUtils.generateUUID();\n    Object.defineProperty(this, 'id', {\n      value: _nodeId++\n    });\n  }\n  get type() {\n    return this.constructor.name;\n  }\n  isGlobal( /*builder*/\n  ) {\n    return false;\n  }\n  *getChildren() {\n    const self = this;\n    for (const {\n      property,\n      index,\n      childNode\n    } of getNodeChildren(this)) {\n      if (index !== undefined) {\n        yield {\n          childNode,\n          replaceNode(node) {\n            self[property][index] = node;\n          }\n        };\n      } else {\n        yield {\n          childNode,\n          replaceNode(node) {\n            self[property] = node;\n          }\n        };\n      }\n    }\n  }\n  traverse(callback) {\n    let replaceNode = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    callback(this, replaceNode);\n    for (const {\n      childNode,\n      replaceNode\n    } of this.getChildren()) {\n      childNode.traverse(callback, replaceNode);\n    }\n  }\n  getCacheKey() {\n    return getCacheKey(this);\n  }\n  getHash( /*builder*/\n  ) {\n    return this.uuid;\n  }\n  getUpdateType() {\n    return this.updateType;\n  }\n  getUpdateBeforeType() {\n    return this.updateBeforeType;\n  }\n  getNodeType( /*builder*/\n  ) {\n    return this.nodeType;\n  }\n  getReference(builder) {\n    const hash = this.getHash(builder);\n    const nodeFromHash = builder.getNodeFromHash(hash);\n    return nodeFromHash || this;\n  }\n  construct(builder) {\n    const nodeProperties = builder.getNodeProperties(this);\n    for (const {\n      childNode\n    } of this.getChildren()) {\n      nodeProperties['_node' + childNode.id] = childNode;\n    }\n\n    // return a outputNode if exists\n    return null;\n  }\n  analyze(builder) {\n    const nodeData = builder.getDataFromNode(this);\n    nodeData.dependenciesCount = nodeData.dependenciesCount === undefined ? 1 : nodeData.dependenciesCount + 1;\n    if (nodeData.dependenciesCount === 1) {\n      // node flow children\n\n      const nodeProperties = builder.getNodeProperties(this);\n      for (const childNode of Object.values(nodeProperties)) {\n        if (childNode && childNode.isNode === true) {\n          childNode.build(builder);\n        }\n      }\n    }\n  }\n  generate(builder, output) {\n    const {\n      outputNode\n    } = builder.getNodeProperties(this);\n    if (outputNode && outputNode.isNode === true) {\n      return outputNode.build(builder, output);\n    }\n  }\n  updateBefore( /*frame*/\n  ) {\n    console.warn('Abstract function.');\n  }\n  update( /*frame*/\n  ) {\n    console.warn('Abstract function.');\n  }\n  build(builder) {\n    let output = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    const refNode = this.getReference(builder);\n    if (this !== refNode) {\n      return refNode.build(builder, output);\n    }\n    builder.addNode(this);\n    builder.addChain(this);\n\n    /* Build stages expected results:\r\n    \t- \"construct\"\t-> Node\r\n    \t- \"analyze\"\t\t-> null\r\n    \t- \"generate\"\t-> String\r\n    */\n    let result = null;\n    const buildStage = builder.getBuildStage();\n    if (buildStage === 'construct') {\n      const properties = builder.getNodeProperties(this);\n      if (properties.initialized !== true || builder.context.tempRead === false) {\n        properties.initialized = true;\n        properties.outputNode = this.construct(builder);\n        for (const childNode of Object.values(properties)) {\n          if (childNode && childNode.isNode === true) {\n            childNode.build(builder);\n          }\n        }\n      }\n    } else if (buildStage === 'analyze') {\n      this.analyze(builder);\n    } else if (buildStage === 'generate') {\n      const isGenerateOnce = this.generate.length === 1;\n      if (isGenerateOnce) {\n        const type = this.getNodeType(builder);\n        const nodeData = builder.getDataFromNode(this);\n        result = nodeData.snippet;\n        if (result === undefined /*|| builder.context.tempRead === false*/) {\n          result = this.generate(builder) || '';\n          nodeData.snippet = result;\n        }\n        result = builder.format(result, type, output);\n      } else {\n        result = this.generate(builder, output) || '';\n      }\n    }\n    builder.removeChain(this);\n    return result;\n  }\n  getSerializeChildren() {\n    return getNodeChildren(this);\n  }\n  serialize(json) {\n    const nodeChildren = this.getSerializeChildren();\n    const inputNodes = {};\n    for (const {\n      property,\n      index,\n      childNode\n    } of nodeChildren) {\n      if (index !== undefined) {\n        if (inputNodes[property] === undefined) {\n          inputNodes[property] = Number.isInteger(index) ? [] : {};\n        }\n        inputNodes[property][index] = childNode.toJSON(json.meta).uuid;\n      } else {\n        inputNodes[property] = childNode.toJSON(json.meta).uuid;\n      }\n    }\n    if (Object.keys(inputNodes).length > 0) {\n      json.inputNodes = inputNodes;\n    }\n  }\n  deserialize(json) {\n    if (json.inputNodes !== undefined) {\n      const nodes = json.meta.nodes;\n      for (const property in json.inputNodes) {\n        if (Array.isArray(json.inputNodes[property])) {\n          const inputArray = [];\n          for (const uuid of json.inputNodes[property]) {\n            inputArray.push(nodes[uuid]);\n          }\n          this[property] = inputArray;\n        } else if (typeof json.inputNodes[property] === 'object') {\n          const inputObject = {};\n          for (const subProperty in json.inputNodes[property]) {\n            const uuid = json.inputNodes[property][subProperty];\n            inputObject[subProperty] = nodes[uuid];\n          }\n          this[property] = inputObject;\n        } else {\n          const uuid = json.inputNodes[property];\n          this[property] = nodes[uuid];\n        }\n      }\n    }\n  }\n  toJSON(meta) {\n    const {\n      uuid,\n      type\n    } = this;\n    const isRoot = meta === undefined || typeof meta === 'string';\n    if (isRoot) {\n      meta = {\n        textures: {},\n        images: {},\n        nodes: {}\n      };\n    }\n\n    // serialize\n\n    let data = meta.nodes[uuid];\n    if (data === undefined) {\n      data = {\n        uuid,\n        type,\n        meta,\n        metadata: {\n          version: 4.6,\n          type: 'Node',\n          generator: 'Node.toJSON'\n        }\n      };\n      if (isRoot !== true) meta.nodes[data.uuid] = data;\n      this.serialize(data);\n      delete data.meta;\n    }\n\n    // TODO: Copied from Object3D.toJSON\n\n    function extractFromCache(cache) {\n      const values = [];\n      for (const key in cache) {\n        const data = cache[key];\n        delete data.metadata;\n        values.push(data);\n      }\n      return values;\n    }\n    if (isRoot) {\n      const textures = extractFromCache(meta.textures);\n      const images = extractFromCache(meta.images);\n      const nodes = extractFromCache(meta.nodes);\n      if (textures.length > 0) data.textures = textures;\n      if (images.length > 0) data.images = images;\n      if (nodes.length > 0) data.nodes = nodes;\n    }\n    return data;\n  }\n}\nexport default Node;\nexport function addNodeClass(nodeClass) {\n  if (typeof nodeClass !== 'function' || !nodeClass.name) throw new Error(`Node class ${nodeClass.name} is not a class`);\n  if (NodeClasses.has(nodeClass.name)) throw new Error(`Redefinition of node class ${nodeClass.name}`);\n  NodeClasses.set(nodeClass.name, nodeClass);\n}\nexport function createNodeFromType(type) {\n  const Class = NodeClasses.get(type);\n  if (Class !== undefined) {\n    return new Class();\n  }\n}","map":{"version":3,"names":["NodeUpdateType","getNodeChildren","getCacheKey","MathUtils","NodeClasses","Map","_nodeId","Node","constructor","nodeType","arguments","length","undefined","isNode","updateType","NONE","updateBeforeType","uuid","generateUUID","Object","defineProperty","value","type","name","isGlobal","getChildren","self","property","index","childNode","replaceNode","node","traverse","callback","getHash","getUpdateType","getUpdateBeforeType","getNodeType","getReference","builder","hash","nodeFromHash","getNodeFromHash","construct","nodeProperties","getNodeProperties","id","analyze","nodeData","getDataFromNode","dependenciesCount","values","build","generate","output","outputNode","updateBefore","console","warn","update","refNode","addNode","addChain","result","buildStage","getBuildStage","properties","initialized","context","tempRead","isGenerateOnce","snippet","format","removeChain","getSerializeChildren","serialize","json","nodeChildren","inputNodes","Number","isInteger","toJSON","meta","keys","deserialize","nodes","Array","isArray","inputArray","push","inputObject","subProperty","isRoot","textures","images","data","metadata","version","generator","extractFromCache","cache","key","addNodeClass","nodeClass","Error","has","set","createNodeFromType","Class","get"],"sources":["C:/Users/LENOVO/Desktop/reactjsProject/drillit/node_modules/three/examples/jsm/nodes/core/Node.js"],"sourcesContent":["import { NodeUpdateType } from './constants.js';\r\nimport { getNodeChildren, getCacheKey } from './NodeUtils.js';\r\nimport { MathUtils } from 'three';\r\n\r\nconst NodeClasses = new Map();\r\n\r\nlet _nodeId = 0;\r\n\r\nclass Node {\r\n\r\n\tconstructor( nodeType = null ) {\r\n\r\n\t\tthis.isNode = true;\r\n\r\n\t\tthis.nodeType = nodeType;\r\n\r\n\t\tthis.updateType = NodeUpdateType.NONE;\r\n\t\tthis.updateBeforeType = NodeUpdateType.NONE;\r\n\r\n\t\tthis.uuid = MathUtils.generateUUID();\r\n\r\n\t\tObject.defineProperty( this, 'id', { value: _nodeId ++ } );\r\n\r\n\t}\r\n\r\n\tget type() {\r\n\r\n\t\treturn this.constructor.name;\r\n\r\n\t}\r\n\r\n\tisGlobal( /*builder*/ ) {\r\n\r\n\t\treturn false;\r\n\r\n\t}\r\n\r\n\t* getChildren() {\r\n\r\n\t\tconst self = this;\r\n\r\n\t\tfor ( const { property, index, childNode } of getNodeChildren( this ) ) {\r\n\r\n\t\t\tif ( index !== undefined ) {\r\n\r\n\t\t\t\tyield { childNode, replaceNode( node ) {\r\n\r\n\t\t\t\t\tself[ property ][ index ] = node;\r\n\r\n\t\t\t\t} };\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tyield { childNode, replaceNode( node ) {\r\n\r\n\t\t\t\t\tself[ property ] = node;\r\n\r\n\t\t\t\t} };\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\ttraverse( callback, replaceNode = null ) {\r\n\r\n\t\tcallback( this, replaceNode );\r\n\r\n\t\tfor ( const { childNode, replaceNode } of this.getChildren() ) {\r\n\r\n\t\t\tchildNode.traverse( callback, replaceNode );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tgetCacheKey() {\r\n\r\n\t\treturn getCacheKey( this );\r\n\r\n\t}\r\n\r\n\tgetHash( /*builder*/ ) {\r\n\r\n\t\treturn this.uuid;\r\n\r\n\t}\r\n\r\n\tgetUpdateType() {\r\n\r\n\t\treturn this.updateType;\r\n\r\n\t}\r\n\r\n\tgetUpdateBeforeType() {\r\n\r\n\t\treturn this.updateBeforeType;\r\n\r\n\t}\r\n\r\n\tgetNodeType( /*builder*/ ) {\r\n\r\n\t\treturn this.nodeType;\r\n\r\n\t}\r\n\r\n\tgetReference( builder ) {\r\n\r\n\t\tconst hash = this.getHash( builder );\r\n\t\tconst nodeFromHash = builder.getNodeFromHash( hash );\r\n\r\n\t\treturn nodeFromHash || this;\r\n\r\n\t}\r\n\r\n\tconstruct( builder ) {\r\n\r\n\t\tconst nodeProperties = builder.getNodeProperties( this );\r\n\r\n\t\tfor ( const { childNode } of this.getChildren() ) {\r\n\r\n\t\t\tnodeProperties[ '_node' + childNode.id ] = childNode;\r\n\r\n\t\t}\r\n\r\n\t\t// return a outputNode if exists\r\n\t\treturn null;\r\n\r\n\t}\r\n\r\n\tanalyze( builder ) {\r\n\r\n\t\tconst nodeData = builder.getDataFromNode( this );\r\n\t\tnodeData.dependenciesCount = nodeData.dependenciesCount === undefined ? 1 : nodeData.dependenciesCount + 1;\r\n\r\n\t\tif ( nodeData.dependenciesCount === 1 ) {\r\n\r\n\t\t\t// node flow children\r\n\r\n\t\t\tconst nodeProperties = builder.getNodeProperties( this );\r\n\r\n\t\t\tfor ( const childNode of Object.values( nodeProperties ) ) {\r\n\r\n\t\t\t\tif ( childNode && childNode.isNode === true ) {\r\n\r\n\t\t\t\t\tchildNode.build( builder );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tgenerate( builder, output ) {\r\n\r\n\t\tconst { outputNode } = builder.getNodeProperties( this );\r\n\r\n\t\tif ( outputNode && outputNode.isNode === true ) {\r\n\r\n\t\t\treturn outputNode.build( builder, output );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tupdateBefore( /*frame*/ ) {\r\n\r\n\t\tconsole.warn( 'Abstract function.' );\r\n\r\n\t}\r\n\r\n\tupdate( /*frame*/ ) {\r\n\r\n\t\tconsole.warn( 'Abstract function.' );\r\n\r\n\t}\r\n\r\n\tbuild( builder, output = null ) {\r\n\r\n\t\tconst refNode = this.getReference( builder );\r\n\r\n\t\tif ( this !== refNode ) {\r\n\r\n\t\t\treturn refNode.build( builder, output );\r\n\r\n\t\t}\r\n\r\n\t\tbuilder.addNode( this );\r\n\t\tbuilder.addChain( this );\r\n\r\n\t\t/* Build stages expected results:\r\n\t\t\t- \"construct\"\t-> Node\r\n\t\t\t- \"analyze\"\t\t-> null\r\n\t\t\t- \"generate\"\t-> String\r\n\t\t*/\r\n\t\tlet result = null;\r\n\r\n\t\tconst buildStage = builder.getBuildStage();\r\n\r\n\t\tif ( buildStage === 'construct' ) {\r\n\r\n\t\t\tconst properties = builder.getNodeProperties( this );\r\n\r\n\t\t\tif ( properties.initialized !== true || builder.context.tempRead === false ) {\r\n\r\n\t\t\t\tproperties.initialized = true;\r\n\t\t\t\tproperties.outputNode = this.construct( builder );\r\n\r\n\t\t\t\tfor ( const childNode of Object.values( properties ) ) {\r\n\r\n\t\t\t\t\tif ( childNode && childNode.isNode === true ) {\r\n\r\n\t\t\t\t\t\tchildNode.build( builder );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t} else if ( buildStage === 'analyze' ) {\r\n\r\n\t\t\tthis.analyze( builder );\r\n\r\n\t\t} else if ( buildStage === 'generate' ) {\r\n\r\n\t\t\tconst isGenerateOnce = this.generate.length === 1;\r\n\r\n\t\t\tif ( isGenerateOnce ) {\r\n\r\n\t\t\t\tconst type = this.getNodeType( builder );\r\n\t\t\t\tconst nodeData = builder.getDataFromNode( this );\r\n\r\n\t\t\t\tresult = nodeData.snippet;\r\n\r\n\t\t\t\tif ( result === undefined /*|| builder.context.tempRead === false*/ ) {\r\n\r\n\t\t\t\t\tresult = this.generate( builder ) || '';\r\n\r\n\t\t\t\t\tnodeData.snippet = result;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tresult = builder.format( result, type, output );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tresult = this.generate( builder, output ) || '';\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tbuilder.removeChain( this );\r\n\r\n\t\treturn result;\r\n\r\n\t}\r\n\r\n\tgetSerializeChildren() {\r\n\r\n\t\treturn getNodeChildren( this );\r\n\r\n\t}\r\n\r\n\tserialize( json ) {\r\n\r\n\t\tconst nodeChildren = this.getSerializeChildren();\r\n\r\n\t\tconst inputNodes = {};\r\n\r\n\t\tfor ( const { property, index, childNode } of nodeChildren ) {\r\n\r\n\t\t\tif ( index !== undefined ) {\r\n\r\n\t\t\t\tif ( inputNodes[ property ] === undefined ) {\r\n\r\n\t\t\t\t\tinputNodes[ property ] = Number.isInteger( index ) ? [] : {};\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tinputNodes[ property ][ index ] = childNode.toJSON( json.meta ).uuid;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tinputNodes[ property ] = childNode.toJSON( json.meta ).uuid;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tif ( Object.keys( inputNodes ).length > 0 ) {\r\n\r\n\t\t\tjson.inputNodes = inputNodes;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tdeserialize( json ) {\r\n\r\n\t\tif ( json.inputNodes !== undefined ) {\r\n\r\n\t\t\tconst nodes = json.meta.nodes;\r\n\r\n\t\t\tfor ( const property in json.inputNodes ) {\r\n\r\n\t\t\t\tif ( Array.isArray( json.inputNodes[ property ] ) ) {\r\n\r\n\t\t\t\t\tconst inputArray = [];\r\n\r\n\t\t\t\t\tfor ( const uuid of json.inputNodes[ property ] ) {\r\n\r\n\t\t\t\t\t\tinputArray.push( nodes[ uuid ] );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tthis[ property ] = inputArray;\r\n\r\n\t\t\t\t} else if ( typeof json.inputNodes[ property ] === 'object' ) {\r\n\r\n\t\t\t\t\tconst inputObject = {};\r\n\r\n\t\t\t\t\tfor ( const subProperty in json.inputNodes[ property ] ) {\r\n\r\n\t\t\t\t\t\tconst uuid = json.inputNodes[ property ][ subProperty ];\r\n\r\n\t\t\t\t\t\tinputObject[ subProperty ] = nodes[ uuid ];\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tthis[ property ] = inputObject;\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tconst uuid = json.inputNodes[ property ];\r\n\r\n\t\t\t\t\tthis[ property ] = nodes[ uuid ];\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\ttoJSON( meta ) {\r\n\r\n\t\tconst { uuid, type } = this;\r\n\t\tconst isRoot = ( meta === undefined || typeof meta === 'string' );\r\n\r\n\t\tif ( isRoot ) {\r\n\r\n\t\t\tmeta = {\r\n\t\t\t\ttextures: {},\r\n\t\t\t\timages: {},\r\n\t\t\t\tnodes: {}\r\n\t\t\t};\r\n\r\n\t\t}\r\n\r\n\t\t// serialize\r\n\r\n\t\tlet data = meta.nodes[ uuid ];\r\n\r\n\t\tif ( data === undefined ) {\r\n\r\n\t\t\tdata = {\r\n\t\t\t\tuuid,\r\n\t\t\t\ttype,\r\n\t\t\t\tmeta,\r\n\t\t\t\tmetadata: {\r\n\t\t\t\t\tversion: 4.6,\r\n\t\t\t\t\ttype: 'Node',\r\n\t\t\t\t\tgenerator: 'Node.toJSON'\r\n\t\t\t\t}\r\n\t\t\t};\r\n\r\n\t\t\tif ( isRoot !== true ) meta.nodes[ data.uuid ] = data;\r\n\r\n\t\t\tthis.serialize( data );\r\n\r\n\t\t\tdelete data.meta;\r\n\r\n\t\t}\r\n\r\n\t\t// TODO: Copied from Object3D.toJSON\r\n\r\n\t\tfunction extractFromCache( cache ) {\r\n\r\n\t\t\tconst values = [];\r\n\r\n\t\t\tfor ( const key in cache ) {\r\n\r\n\t\t\t\tconst data = cache[ key ];\r\n\t\t\t\tdelete data.metadata;\r\n\t\t\t\tvalues.push( data );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn values;\r\n\r\n\t\t}\r\n\r\n\t\tif ( isRoot ) {\r\n\r\n\t\t\tconst textures = extractFromCache( meta.textures );\r\n\t\t\tconst images = extractFromCache( meta.images );\r\n\t\t\tconst nodes = extractFromCache( meta.nodes );\r\n\r\n\t\t\tif ( textures.length > 0 ) data.textures = textures;\r\n\t\t\tif ( images.length > 0 ) data.images = images;\r\n\t\t\tif ( nodes.length > 0 ) data.nodes = nodes;\r\n\r\n\t\t}\r\n\r\n\t\treturn data;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default Node;\r\n\r\nexport function addNodeClass( nodeClass ) {\r\n\r\n\tif ( typeof nodeClass !== 'function' || ! nodeClass.name ) throw new Error( `Node class ${ nodeClass.name } is not a class` );\r\n\tif ( NodeClasses.has( nodeClass.name ) ) throw new Error( `Redefinition of node class ${ nodeClass.name }` );\r\n\r\n\tNodeClasses.set( nodeClass.name, nodeClass );\r\n\r\n}\r\n\r\nexport function createNodeFromType( type ) {\r\n\r\n\tconst Class = NodeClasses.get( type );\r\n\r\n\tif ( Class !== undefined ) {\r\n\r\n\t\treturn new Class();\r\n\r\n\t}\r\n\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}