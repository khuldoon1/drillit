{"ast":null,"code":"import Object3DNode from './Object3DNode.js';\nimport { addNodeClass } from '../core/Node.js';\nimport { nodeImmutable } from '../shadernode/ShaderNode.js';\nclass CameraNode extends Object3DNode {\n  constructor() {\n    let scope = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : CameraNode.POSITION;\n    super(scope);\n  }\n  getNodeType(builder) {\n    const scope = this.scope;\n    if (scope === CameraNode.PROJECTION_MATRIX) {\n      return 'mat4';\n    }\n    return super.getNodeType(builder);\n  }\n  update(frame) {\n    const camera = frame.camera;\n    const uniformNode = this._uniformNode;\n    const scope = this.scope;\n    if (scope === CameraNode.PROJECTION_MATRIX) {\n      uniformNode.value = camera.projectionMatrix;\n    } else if (scope === CameraNode.VIEW_MATRIX) {\n      uniformNode.value = camera.matrixWorldInverse;\n    } else {\n      this.object3d = camera;\n      super.update(frame);\n    }\n  }\n  generate(builder) {\n    const scope = this.scope;\n    if (scope === CameraNode.PROJECTION_MATRIX) {\n      this._uniformNode.nodeType = 'mat4';\n    }\n    return super.generate(builder);\n  }\n}\nCameraNode.PROJECTION_MATRIX = 'projectionMatrix';\nexport default CameraNode;\nexport const cameraProjectionMatrix = nodeImmutable(CameraNode, CameraNode.PROJECTION_MATRIX);\nexport const cameraViewMatrix = nodeImmutable(CameraNode, CameraNode.VIEW_MATRIX);\nexport const cameraNormalMatrix = nodeImmutable(CameraNode, CameraNode.NORMAL_MATRIX);\nexport const cameraWorldMatrix = nodeImmutable(CameraNode, CameraNode.WORLD_MATRIX);\nexport const cameraPosition = nodeImmutable(CameraNode, CameraNode.POSITION);\naddNodeClass(CameraNode);","map":{"version":3,"names":["Object3DNode","addNodeClass","nodeImmutable","CameraNode","constructor","scope","arguments","length","undefined","POSITION","getNodeType","builder","PROJECTION_MATRIX","update","frame","camera","uniformNode","_uniformNode","value","projectionMatrix","VIEW_MATRIX","matrixWorldInverse","object3d","generate","nodeType","cameraProjectionMatrix","cameraViewMatrix","cameraNormalMatrix","NORMAL_MATRIX","cameraWorldMatrix","WORLD_MATRIX","cameraPosition"],"sources":["C:/Users/LENOVO/Desktop/reactjsProject/drillit/node_modules/three/examples/jsm/nodes/accessors/CameraNode.js"],"sourcesContent":["import Object3DNode from './Object3DNode.js';\r\nimport { addNodeClass } from '../core/Node.js';\r\nimport { nodeImmutable } from '../shadernode/ShaderNode.js';\r\n\r\nclass CameraNode extends Object3DNode {\r\n\r\n\tconstructor( scope = CameraNode.POSITION ) {\r\n\r\n\t\tsuper( scope );\r\n\r\n\t}\r\n\r\n\tgetNodeType( builder ) {\r\n\r\n\t\tconst scope = this.scope;\r\n\r\n\t\tif ( scope === CameraNode.PROJECTION_MATRIX ) {\r\n\r\n\t\t\treturn 'mat4';\r\n\r\n\t\t}\r\n\r\n\t\treturn super.getNodeType( builder );\r\n\r\n\t}\r\n\r\n\tupdate( frame ) {\r\n\r\n\t\tconst camera = frame.camera;\r\n\t\tconst uniformNode = this._uniformNode;\r\n\t\tconst scope = this.scope;\r\n\r\n\t\tif ( scope === CameraNode.PROJECTION_MATRIX ) {\r\n\r\n\t\t\tuniformNode.value = camera.projectionMatrix;\r\n\r\n\t\t} else if ( scope === CameraNode.VIEW_MATRIX ) {\r\n\r\n\t\t\tuniformNode.value = camera.matrixWorldInverse;\r\n\r\n\t\t} else {\r\n\r\n\t\t\tthis.object3d = camera;\r\n\r\n\t\t\tsuper.update( frame );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tgenerate( builder ) {\r\n\r\n\t\tconst scope = this.scope;\r\n\r\n\t\tif ( scope === CameraNode.PROJECTION_MATRIX ) {\r\n\r\n\t\t\tthis._uniformNode.nodeType = 'mat4';\r\n\r\n\t\t}\r\n\r\n\t\treturn super.generate( builder );\r\n\r\n\t}\r\n\r\n}\r\n\r\nCameraNode.PROJECTION_MATRIX = 'projectionMatrix';\r\n\r\nexport default CameraNode;\r\n\r\nexport const cameraProjectionMatrix = nodeImmutable( CameraNode, CameraNode.PROJECTION_MATRIX );\r\nexport const cameraViewMatrix = nodeImmutable( CameraNode, CameraNode.VIEW_MATRIX );\r\nexport const cameraNormalMatrix = nodeImmutable( CameraNode, CameraNode.NORMAL_MATRIX );\r\nexport const cameraWorldMatrix = nodeImmutable( CameraNode, CameraNode.WORLD_MATRIX );\r\nexport const cameraPosition = nodeImmutable( CameraNode, CameraNode.POSITION );\r\n\r\naddNodeClass( CameraNode );\r\n"],"mappings":"AAAA,OAAOA,YAAY,MAAM,mBAAmB;AAC5C,SAASC,YAAY,QAAQ,iBAAiB;AAC9C,SAASC,aAAa,QAAQ,6BAA6B;AAE3D,MAAMC,UAAU,SAASH,YAAY,CAAC;EAErCI,WAAWA,CAAA,EAAgC;IAAA,IAA9BC,KAAK,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAGH,UAAU,CAACM,QAAQ;IAEvC,KAAK,CAAEJ,KAAM,CAAC;EAEf;EAEAK,WAAWA,CAAEC,OAAO,EAAG;IAEtB,MAAMN,KAAK,GAAG,IAAI,CAACA,KAAK;IAExB,IAAKA,KAAK,KAAKF,UAAU,CAACS,iBAAiB,EAAG;MAE7C,OAAO,MAAM;IAEd;IAEA,OAAO,KAAK,CAACF,WAAW,CAAEC,OAAQ,CAAC;EAEpC;EAEAE,MAAMA,CAAEC,KAAK,EAAG;IAEf,MAAMC,MAAM,GAAGD,KAAK,CAACC,MAAM;IAC3B,MAAMC,WAAW,GAAG,IAAI,CAACC,YAAY;IACrC,MAAMZ,KAAK,GAAG,IAAI,CAACA,KAAK;IAExB,IAAKA,KAAK,KAAKF,UAAU,CAACS,iBAAiB,EAAG;MAE7CI,WAAW,CAACE,KAAK,GAAGH,MAAM,CAACI,gBAAgB;IAE5C,CAAC,MAAM,IAAKd,KAAK,KAAKF,UAAU,CAACiB,WAAW,EAAG;MAE9CJ,WAAW,CAACE,KAAK,GAAGH,MAAM,CAACM,kBAAkB;IAE9C,CAAC,MAAM;MAEN,IAAI,CAACC,QAAQ,GAAGP,MAAM;MAEtB,KAAK,CAACF,MAAM,CAAEC,KAAM,CAAC;IAEtB;EAED;EAEAS,QAAQA,CAAEZ,OAAO,EAAG;IAEnB,MAAMN,KAAK,GAAG,IAAI,CAACA,KAAK;IAExB,IAAKA,KAAK,KAAKF,UAAU,CAACS,iBAAiB,EAAG;MAE7C,IAAI,CAACK,YAAY,CAACO,QAAQ,GAAG,MAAM;IAEpC;IAEA,OAAO,KAAK,CAACD,QAAQ,CAAEZ,OAAQ,CAAC;EAEjC;AAED;AAEAR,UAAU,CAACS,iBAAiB,GAAG,kBAAkB;AAEjD,eAAeT,UAAU;AAEzB,OAAO,MAAMsB,sBAAsB,GAAGvB,aAAa,CAAEC,UAAU,EAAEA,UAAU,CAACS,iBAAkB,CAAC;AAC/F,OAAO,MAAMc,gBAAgB,GAAGxB,aAAa,CAAEC,UAAU,EAAEA,UAAU,CAACiB,WAAY,CAAC;AACnF,OAAO,MAAMO,kBAAkB,GAAGzB,aAAa,CAAEC,UAAU,EAAEA,UAAU,CAACyB,aAAc,CAAC;AACvF,OAAO,MAAMC,iBAAiB,GAAG3B,aAAa,CAAEC,UAAU,EAAEA,UAAU,CAAC2B,YAAa,CAAC;AACrF,OAAO,MAAMC,cAAc,GAAG7B,aAAa,CAAEC,UAAU,EAAEA,UAAU,CAACM,QAAS,CAAC;AAE9ER,YAAY,CAAEE,UAAW,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}