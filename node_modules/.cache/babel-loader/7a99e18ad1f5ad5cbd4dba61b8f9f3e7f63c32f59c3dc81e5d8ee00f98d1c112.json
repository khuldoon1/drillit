{"ast":null,"code":"import Node, { addNodeClass } from '../core/Node.js';\nimport { uniform } from '../core/UniformNode.js';\nimport { materialReference } from './MaterialReferenceNode.js';\nimport { uv } from './UVNode.js';\nimport { nodeImmutable, vec3 } from '../shadernode/ShaderNode.js';\nclass MaterialNode extends Node {\n  constructor(scope) {\n    super();\n    this.scope = scope;\n  }\n  getNodeType(builder) {\n    const scope = this.scope;\n    const material = builder.context.material;\n    if (scope === MaterialNode.COLOR) {\n      return material.map !== null ? 'vec4' : 'vec3';\n    } else if (scope === MaterialNode.OPACITY || scope === MaterialNode.ROTATION) {\n      return 'float';\n    } else if (scope === MaterialNode.UV) {\n      return 'vec2';\n    } else if (scope === MaterialNode.EMISSIVE) {\n      return 'vec3';\n    } else if (scope === MaterialNode.ROUGHNESS || scope === MaterialNode.METALNESS || scope === MaterialNode.SPECULAR || scope === MaterialNode.SHININESS) {\n      return 'float';\n    }\n  }\n  getFloat(property) {\n    //@TODO: Check if it can be cached by property name.\n\n    return materialReference(property, 'float');\n  }\n  getColor(property) {\n    //@TODO: Check if it can be cached by property name.\n\n    return materialReference(property, 'color');\n  }\n  getTexture(property) {\n    //@TODO: Check if it can be cached by property name.\n\n    const textureRefNode = materialReference(property, 'texture');\n    textureRefNode.node.uvNode = materialUV;\n    return textureRefNode;\n  }\n  construct(builder) {\n    const material = builder.context.material;\n    const scope = this.scope;\n    let node = null;\n    if (scope === MaterialNode.ALPHA_TEST) {\n      node = this.getFloat('alphaTest');\n    } else if (scope === MaterialNode.COLOR) {\n      const colorNode = this.getColor('color');\n      if (material.map && material.map.isTexture === true) {\n        node = colorNode.mul(this.getTexture('map'));\n      } else {\n        node = colorNode;\n      }\n    } else if (scope === MaterialNode.OPACITY) {\n      const opacityNode = this.getFloat('opacity');\n      if (material.alphaMap && material.alphaMap.isTexture === true) {\n        node = opacityNode.mul(this.getTexture('alphaMap'));\n      } else {\n        node = opacityNode;\n      }\n    } else if (scope === MaterialNode.SHININESS) {\n      node = this.getFloat('shininess');\n    } else if (scope === MaterialNode.SPECULAR_COLOR) {\n      node = this.getColor('specular');\n    } else if (scope === MaterialNode.REFLECTIVITY) {\n      const reflectivityNode = this.getFloat('reflectivity');\n      if (material.specularMap && material.specularMap.isTexture === true) {\n        node = reflectivityNode.mul(this.getTexture('specularMap').r);\n      } else {\n        node = reflectivityNode;\n      }\n    } else if (scope === MaterialNode.ROUGHNESS) {\n      const roughnessNode = this.getFloat('roughness');\n      if (material.roughnessMap && material.roughnessMap.isTexture === true) {\n        node = roughnessNode.mul(this.getTexture('roughnessMap').g);\n      } else {\n        node = roughnessNode;\n      }\n    } else if (scope === MaterialNode.METALNESS) {\n      const metalnessNode = this.getFloat('metalness');\n      if (material.metalnessMap && material.metalnessMap.isTexture === true) {\n        node = metalnessNode.mul(this.getTexture('metalnessMap').b);\n      } else {\n        node = metalnessNode;\n      }\n    } else if (scope === MaterialNode.EMISSIVE) {\n      const emissiveNode = this.getColor('emissive');\n      if (material.emissiveMap && material.emissiveMap.isTexture === true) {\n        node = emissiveNode.mul(this.getTexture('emissiveMap'));\n      } else {\n        node = emissiveNode;\n      }\n    } else if (scope === MaterialNode.ROTATION) {\n      node = this.getFloat('rotation');\n    } else if (scope === MaterialNode.UV) {\n      // uv repeat and offset setting priorities\n\n      let uvScaleMap = material.map || material.specularMap || material.displacementMap || material.normalMap || material.bumpMap || material.roughnessMap || material.metalnessMap || material.alphaMap || material.emissiveMap || material.clearcoatMap || material.clearcoatNormalMap || material.clearcoatRoughnessMap || material.iridescenceMap || material.iridescenceThicknessMap || material.specularIntensityMap || material.specularColorMap || material.transmissionMap || material.thicknessMap || material.sheenColorMap || material.sheenRoughnessMap;\n      if (uvScaleMap) {\n        // backwards compatibility\n        if (uvScaleMap.isWebGLRenderTarget) {\n          uvScaleMap = uvScaleMap.texture;\n        }\n        if (uvScaleMap.matrixAutoUpdate === true) {\n          uvScaleMap.updateMatrix();\n        }\n        node = uniform(uvScaleMap.matrix).mul(vec3(uv(), 1));\n      } else {\n        node = uv();\n      }\n    } else {\n      const outputType = this.getNodeType(builder);\n      node = materialReference(scope, outputType);\n    }\n    return node;\n  }\n}\nMaterialNode.ALPHA_TEST = 'alphaTest';\nMaterialNode.COLOR = 'color';\nMaterialNode.OPACITY = 'opacity';\nMaterialNode.SHININESS = 'shininess';\nMaterialNode.SPECULAR_COLOR = 'specularColor';\nMaterialNode.REFLECTIVITY = 'reflectivity';\nMaterialNode.ROUGHNESS = 'roughness';\nMaterialNode.METALNESS = 'metalness';\nMaterialNode.EMISSIVE = 'emissive';\nMaterialNode.ROTATION = 'rotation';\nMaterialNode.UV = 'uv';\nexport default MaterialNode;\nexport const materialUV = nodeImmutable(MaterialNode, MaterialNode.UV);\nexport const materialAlphaTest = nodeImmutable(MaterialNode, MaterialNode.ALPHA_TEST);\nexport const materialColor = nodeImmutable(MaterialNode, MaterialNode.COLOR);\nexport const materialShininess = nodeImmutable(MaterialNode, MaterialNode.SHININESS);\nexport const materialEmissive = nodeImmutable(MaterialNode, MaterialNode.EMISSIVE);\nexport const materialOpacity = nodeImmutable(MaterialNode, MaterialNode.OPACITY);\nexport const materialSpecularColor = nodeImmutable(MaterialNode, MaterialNode.SPECULAR_COLOR);\nexport const materialReflectivity = nodeImmutable(MaterialNode, MaterialNode.REFLECTIVITY);\nexport const materialRoughness = nodeImmutable(MaterialNode, MaterialNode.ROUGHNESS);\nexport const materialMetalness = nodeImmutable(MaterialNode, MaterialNode.METALNESS);\nexport const materialRotation = nodeImmutable(MaterialNode, MaterialNode.ROTATION);\naddNodeClass(MaterialNode);","map":{"version":3,"names":["Node","addNodeClass","uniform","materialReference","uv","nodeImmutable","vec3","MaterialNode","constructor","scope","getNodeType","builder","material","context","COLOR","map","OPACITY","ROTATION","UV","EMISSIVE","ROUGHNESS","METALNESS","SPECULAR","SHININESS","getFloat","property","getColor","getTexture","textureRefNode","node","uvNode","materialUV","construct","ALPHA_TEST","colorNode","isTexture","mul","opacityNode","alphaMap","SPECULAR_COLOR","REFLECTIVITY","reflectivityNode","specularMap","r","roughnessNode","roughnessMap","g","metalnessNode","metalnessMap","b","emissiveNode","emissiveMap","uvScaleMap","displacementMap","normalMap","bumpMap","clearcoatMap","clearcoatNormalMap","clearcoatRoughnessMap","iridescenceMap","iridescenceThicknessMap","specularIntensityMap","specularColorMap","transmissionMap","thicknessMap","sheenColorMap","sheenRoughnessMap","isWebGLRenderTarget","texture","matrixAutoUpdate","updateMatrix","matrix","outputType","materialAlphaTest","materialColor","materialShininess","materialEmissive","materialOpacity","materialSpecularColor","materialReflectivity","materialRoughness","materialMetalness","materialRotation"],"sources":["C:/Users/LENOVO/Desktop/reactjsProject/drillit/node_modules/three/examples/jsm/nodes/accessors/MaterialNode.js"],"sourcesContent":["import Node, { addNodeClass } from '../core/Node.js';\r\nimport { uniform } from '../core/UniformNode.js';\r\nimport { materialReference } from './MaterialReferenceNode.js';\r\nimport { uv } from './UVNode.js';\r\nimport { nodeImmutable, vec3 } from '../shadernode/ShaderNode.js';\r\n\r\nclass MaterialNode extends Node {\r\n\r\n\tconstructor( scope ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.scope = scope;\r\n\r\n\t}\r\n\r\n\tgetNodeType( builder ) {\r\n\r\n\t\tconst scope = this.scope;\r\n\t\tconst material = builder.context.material;\r\n\r\n\t\tif ( scope === MaterialNode.COLOR ) {\r\n\r\n\t\t\treturn material.map !== null ? 'vec4' : 'vec3';\r\n\r\n\t\t} else if ( scope === MaterialNode.OPACITY || scope === MaterialNode.ROTATION ) {\r\n\r\n\t\t\treturn 'float';\r\n\r\n\t\t} else if ( scope === MaterialNode.UV ) {\r\n\r\n\t\t\treturn 'vec2';\r\n\r\n\t\t} else if ( scope === MaterialNode.EMISSIVE ) {\r\n\r\n\t\t\treturn 'vec3';\r\n\r\n\t\t} else if ( scope === MaterialNode.ROUGHNESS || scope === MaterialNode.METALNESS || scope === MaterialNode.SPECULAR || scope === MaterialNode.SHININESS ) {\r\n\r\n\t\t\treturn 'float';\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tgetFloat( property ) {\r\n\r\n\t\t//@TODO: Check if it can be cached by property name.\r\n\r\n\t\treturn materialReference( property, 'float' );\r\n\r\n\t}\r\n\r\n\tgetColor( property ) {\r\n\r\n\t\t//@TODO: Check if it can be cached by property name.\r\n\r\n\t\treturn materialReference( property, 'color' );\r\n\r\n\t}\r\n\r\n\tgetTexture( property ) {\r\n\r\n\t\t//@TODO: Check if it can be cached by property name.\r\n\r\n\t\tconst textureRefNode = materialReference( property, 'texture' );\r\n\t\ttextureRefNode.node.uvNode = materialUV;\r\n\r\n\t\treturn textureRefNode;\r\n\r\n\t}\r\n\r\n\tconstruct( builder ) {\r\n\r\n\t\tconst material = builder.context.material;\r\n\t\tconst scope = this.scope;\r\n\r\n\t\tlet node = null;\r\n\r\n\t\tif ( scope === MaterialNode.ALPHA_TEST ) {\r\n\r\n\t\t\tnode = this.getFloat( 'alphaTest' );\r\n\r\n\t\t} else if ( scope === MaterialNode.COLOR ) {\r\n\r\n\t\t\tconst colorNode = this.getColor( 'color' );\r\n\r\n\t\t\tif ( material.map && material.map.isTexture === true ) {\r\n\r\n\t\t\t\tnode = colorNode.mul( this.getTexture( 'map' ) );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tnode = colorNode;\r\n\r\n\t\t\t}\r\n\r\n\t\t} else if ( scope === MaterialNode.OPACITY ) {\r\n\r\n\t\t\tconst opacityNode = this.getFloat( 'opacity' );\r\n\r\n\t\t\tif ( material.alphaMap && material.alphaMap.isTexture === true ) {\r\n\r\n\t\t\t\tnode = opacityNode.mul( this.getTexture( 'alphaMap' ) );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tnode = opacityNode;\r\n\r\n\t\t\t}\r\n\r\n\t\t} else if ( scope === MaterialNode.SHININESS ) {\r\n\r\n\t\t\tnode = this.getFloat( 'shininess' );\r\n\r\n\t\t} else if ( scope === MaterialNode.SPECULAR_COLOR ) {\r\n\r\n\t\t\tnode = this.getColor( 'specular' );\r\n\r\n\t\t} else if ( scope === MaterialNode.REFLECTIVITY ) {\r\n\r\n\t\t\tconst reflectivityNode = this.getFloat( 'reflectivity' );\r\n\r\n\t\t\tif ( material.specularMap && material.specularMap.isTexture === true ) {\r\n\r\n\t\t\t\tnode = reflectivityNode.mul( this.getTexture( 'specularMap' ).r );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tnode = reflectivityNode;\r\n\r\n\t\t\t}\r\n\r\n\t\t} else if ( scope === MaterialNode.ROUGHNESS ) {\r\n\r\n\t\t\tconst roughnessNode = this.getFloat( 'roughness' );\r\n\r\n\t\t\tif ( material.roughnessMap && material.roughnessMap.isTexture === true ) {\r\n\r\n\t\t\t\tnode = roughnessNode.mul( this.getTexture( 'roughnessMap' ).g );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tnode = roughnessNode;\r\n\r\n\t\t\t}\r\n\r\n\t\t} else if ( scope === MaterialNode.METALNESS ) {\r\n\r\n\t\t\tconst metalnessNode = this.getFloat( 'metalness' );\r\n\r\n\t\t\tif ( material.metalnessMap && material.metalnessMap.isTexture === true ) {\r\n\r\n\t\t\t\tnode = metalnessNode.mul( this.getTexture( 'metalnessMap' ).b );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tnode = metalnessNode;\r\n\r\n\t\t\t}\r\n\r\n\t\t} else if ( scope === MaterialNode.EMISSIVE ) {\r\n\r\n\t\t\tconst emissiveNode = this.getColor( 'emissive' );\r\n\r\n\t\t\tif ( material.emissiveMap && material.emissiveMap.isTexture === true ) {\r\n\r\n\t\t\t\tnode = emissiveNode.mul( this.getTexture( 'emissiveMap' ) );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tnode = emissiveNode;\r\n\r\n\t\t\t}\r\n\r\n\t\t} else if ( scope === MaterialNode.ROTATION ) {\r\n\r\n\t\t\tnode = this.getFloat( 'rotation' );\r\n\r\n\t\t} else if ( scope === MaterialNode.UV ) {\r\n\r\n\t\t\t// uv repeat and offset setting priorities\r\n\r\n\t\t\tlet uvScaleMap =\r\n\t\t\t\tmaterial.map ||\r\n\t\t\t\tmaterial.specularMap ||\r\n\t\t\t\tmaterial.displacementMap ||\r\n\t\t\t\tmaterial.normalMap ||\r\n\t\t\t\tmaterial.bumpMap ||\r\n\t\t\t\tmaterial.roughnessMap ||\r\n\t\t\t\tmaterial.metalnessMap ||\r\n\t\t\t\tmaterial.alphaMap ||\r\n\t\t\t\tmaterial.emissiveMap ||\r\n\t\t\t\tmaterial.clearcoatMap ||\r\n\t\t\t\tmaterial.clearcoatNormalMap ||\r\n\t\t\t\tmaterial.clearcoatRoughnessMap ||\r\n\t\t\t\tmaterial.iridescenceMap ||\r\n\t\t\t\tmaterial.iridescenceThicknessMap ||\r\n\t\t\t\tmaterial.specularIntensityMap ||\r\n\t\t\t\tmaterial.specularColorMap ||\r\n\t\t\t\tmaterial.transmissionMap ||\r\n\t\t\t\tmaterial.thicknessMap ||\r\n\t\t\t\tmaterial.sheenColorMap ||\r\n\t\t\t\tmaterial.sheenRoughnessMap;\r\n\r\n\t\t\tif ( uvScaleMap ) {\r\n\r\n\t\t\t\t// backwards compatibility\r\n\t\t\t\tif ( uvScaleMap.isWebGLRenderTarget ) {\r\n\r\n\t\t\t\t\tuvScaleMap = uvScaleMap.texture;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( uvScaleMap.matrixAutoUpdate === true ) {\r\n\r\n\t\t\t\t\tuvScaleMap.updateMatrix();\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tnode = uniform( uvScaleMap.matrix ).mul( vec3( uv(), 1 ) );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tnode = uv();\r\n\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\r\n\t\t\tconst outputType = this.getNodeType( builder );\r\n\r\n\t\t\tnode = materialReference( scope, outputType );\r\n\r\n\t\t}\r\n\r\n\t\treturn node;\r\n\r\n\t}\r\n\r\n}\r\n\r\nMaterialNode.ALPHA_TEST = 'alphaTest';\r\nMaterialNode.COLOR = 'color';\r\nMaterialNode.OPACITY = 'opacity';\r\nMaterialNode.SHININESS = 'shininess';\r\nMaterialNode.SPECULAR_COLOR = 'specularColor';\r\nMaterialNode.REFLECTIVITY = 'reflectivity';\r\nMaterialNode.ROUGHNESS = 'roughness';\r\nMaterialNode.METALNESS = 'metalness';\r\nMaterialNode.EMISSIVE = 'emissive';\r\nMaterialNode.ROTATION = 'rotation';\r\nMaterialNode.UV = 'uv';\r\n\r\nexport default MaterialNode;\r\n\r\nexport const materialUV = nodeImmutable( MaterialNode, MaterialNode.UV );\r\nexport const materialAlphaTest = nodeImmutable( MaterialNode, MaterialNode.ALPHA_TEST );\r\nexport const materialColor = nodeImmutable( MaterialNode, MaterialNode.COLOR );\r\nexport const materialShininess = nodeImmutable( MaterialNode, MaterialNode.SHININESS );\r\nexport const materialEmissive = nodeImmutable( MaterialNode, MaterialNode.EMISSIVE );\r\nexport const materialOpacity = nodeImmutable( MaterialNode, MaterialNode.OPACITY );\r\nexport const materialSpecularColor = nodeImmutable( MaterialNode, MaterialNode.SPECULAR_COLOR );\r\nexport const materialReflectivity = nodeImmutable( MaterialNode, MaterialNode.REFLECTIVITY );\r\nexport const materialRoughness = nodeImmutable( MaterialNode, MaterialNode.ROUGHNESS );\r\nexport const materialMetalness = nodeImmutable( MaterialNode, MaterialNode.METALNESS );\r\nexport const materialRotation = nodeImmutable( MaterialNode, MaterialNode.ROTATION );\r\n\r\naddNodeClass( MaterialNode );\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}