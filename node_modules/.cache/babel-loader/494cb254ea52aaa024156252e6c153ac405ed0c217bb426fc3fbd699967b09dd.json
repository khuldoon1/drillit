{"ast":null,"code":"import { NodeUpdateType } from './constants.js';\nclass NodeFrame {\n  constructor() {\n    this.time = 0;\n    this.deltaTime = 0;\n    this.frameId = 0;\n    this.renderId = 0;\n    this.startTime = null;\n    this.frameMap = new WeakMap();\n    this.frameBeforeMap = new WeakMap();\n    this.renderMap = new WeakMap();\n    this.renderBeforeMap = new WeakMap();\n    this.renderer = null;\n    this.material = null;\n    this.camera = null;\n    this.object = null;\n    this.scene = null;\n  }\n  updateBeforeNode(node) {\n    const updateType = node.getUpdateBeforeType();\n    if (updateType === NodeUpdateType.FRAME) {\n      if (this.frameBeforeMap.get(node) !== this.frameId) {\n        this.frameBeforeMap.set(node, this.frameId);\n        node.updateBefore(this);\n      }\n    } else if (updateType === NodeUpdateType.RENDER) {\n      if (this.renderBeforeMap.get(node) !== this.renderId || this.frameBeforeMap.get(node) !== this.frameId) {\n        this.renderBeforeMap.set(node, this.renderId);\n        this.frameBeforeMap.set(node, this.frameId);\n        node.updateBefore(this);\n      }\n    } else if (updateType === NodeUpdateType.OBJECT) {\n      node.updateBefore(this);\n    }\n  }\n  updateNode(node) {\n    const updateType = node.getUpdateType();\n    if (updateType === NodeUpdateType.FRAME) {\n      if (this.frameMap.get(node) !== this.frameId) {\n        this.frameMap.set(node, this.frameId);\n        node.update(this);\n      }\n    } else if (updateType === NodeUpdateType.RENDER) {\n      if (this.renderMap.get(node) !== this.renderId || this.frameMap.get(node) !== this.frameId) {\n        this.renderMap.set(node, this.renderId);\n        this.frameMap.set(node, this.frameId);\n        node.update(this);\n      }\n    } else if (updateType === NodeUpdateType.OBJECT) {\n      node.update(this);\n    }\n  }\n  update() {\n    this.frameId++;\n    if (this.lastTime === undefined) this.lastTime = performance.now();\n    this.deltaTime = (performance.now() - this.lastTime) / 1000;\n    this.lastTime = performance.now();\n    this.time += this.deltaTime;\n  }\n}\nexport default NodeFrame;","map":{"version":3,"names":["NodeUpdateType","NodeFrame","constructor","time","deltaTime","frameId","renderId","startTime","frameMap","WeakMap","frameBeforeMap","renderMap","renderBeforeMap","renderer","material","camera","object","scene","updateBeforeNode","node","updateType","getUpdateBeforeType","FRAME","get","set","updateBefore","RENDER","OBJECT","updateNode","getUpdateType","update","lastTime","undefined","performance","now"],"sources":["C:/Users/LENOVO/Desktop/reactjsProject/drillit/node_modules/three/examples/jsm/nodes/core/NodeFrame.js"],"sourcesContent":["import { NodeUpdateType } from './constants.js';\r\n\r\nclass NodeFrame {\r\n\r\n\tconstructor() {\r\n\r\n\t\tthis.time = 0;\r\n\t\tthis.deltaTime = 0;\r\n\r\n\t\tthis.frameId = 0;\r\n\t\tthis.renderId = 0;\r\n\r\n\t\tthis.startTime = null;\r\n\r\n\t\tthis.frameMap = new WeakMap();\r\n\t\tthis.frameBeforeMap = new WeakMap();\r\n\t\tthis.renderMap = new WeakMap();\r\n\t\tthis.renderBeforeMap = new WeakMap();\r\n\r\n\t\tthis.renderer = null;\r\n\t\tthis.material = null;\r\n\t\tthis.camera = null;\r\n\t\tthis.object = null;\r\n\t\tthis.scene = null;\r\n\r\n\t}\r\n\r\n\tupdateBeforeNode( node ) {\r\n\r\n\t\tconst updateType = node.getUpdateBeforeType();\r\n\r\n\t\tif ( updateType === NodeUpdateType.FRAME ) {\r\n\r\n\t\t\tif ( this.frameBeforeMap.get( node ) !== this.frameId ) {\r\n\r\n\t\t\t\tthis.frameBeforeMap.set( node, this.frameId );\r\n\r\n\t\t\t\tnode.updateBefore( this );\r\n\r\n\t\t\t}\r\n\r\n\t\t} else if ( updateType === NodeUpdateType.RENDER ) {\r\n\r\n\t\t\tif ( this.renderBeforeMap.get( node ) !== this.renderId || this.frameBeforeMap.get( node ) !== this.frameId ) {\r\n\r\n\t\t\t\tthis.renderBeforeMap.set( node, this.renderId );\r\n\t\t\t\tthis.frameBeforeMap.set( node, this.frameId );\r\n\r\n\t\t\t\tnode.updateBefore( this );\r\n\r\n\t\t\t}\r\n\r\n\t\t} else if ( updateType === NodeUpdateType.OBJECT ) {\r\n\r\n\t\t\tnode.updateBefore( this );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tupdateNode( node ) {\r\n\r\n\t\tconst updateType = node.getUpdateType();\r\n\r\n\t\tif ( updateType === NodeUpdateType.FRAME ) {\r\n\r\n\t\t\tif ( this.frameMap.get( node ) !== this.frameId ) {\r\n\r\n\t\t\t\tthis.frameMap.set( node, this.frameId );\r\n\r\n\t\t\t\tnode.update( this );\r\n\r\n\t\t\t}\r\n\r\n\t\t} else if ( updateType === NodeUpdateType.RENDER ) {\r\n\r\n\t\t\tif ( this.renderMap.get( node ) !== this.renderId || this.frameMap.get( node ) !== this.frameId ) {\r\n\r\n\t\t\t\tthis.renderMap.set( node, this.renderId );\r\n\t\t\t\tthis.frameMap.set( node, this.frameId );\r\n\r\n\t\t\t\tnode.update( this );\r\n\r\n\t\t\t}\r\n\r\n\t\t} else if ( updateType === NodeUpdateType.OBJECT ) {\r\n\r\n\t\t\tnode.update( this );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tupdate() {\r\n\r\n\t\tthis.frameId ++;\r\n\r\n\t\tif ( this.lastTime === undefined ) this.lastTime = performance.now();\r\n\r\n\t\tthis.deltaTime = ( performance.now() - this.lastTime ) / 1000;\r\n\r\n\t\tthis.lastTime = performance.now();\r\n\r\n\t\tthis.time += this.deltaTime;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default NodeFrame;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}