{"ast":null,"code":"import Node, { addNodeClass } from '../core/Node.js';\nimport { NodeUpdateType } from '../core/constants.js';\nimport { addNodeElement, nodeObject } from '../shadernode/ShaderNode.js';\nclass ComputeNode extends Node {\n  constructor(computeNode, count) {\n    let workgroupSize = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [64];\n    super('void');\n    this.isComputeNode = true;\n    this.computeNode = computeNode;\n    this.count = count;\n    this.workgroupSize = workgroupSize;\n    this.dispatchCount = 0;\n    this.updateType = NodeUpdateType.OBJECT;\n    this.updateDispatchCount();\n  }\n  updateDispatchCount() {\n    const {\n      count,\n      workgroupSize\n    } = this;\n    let size = workgroupSize[0];\n    for (let i = 1; i < workgroupSize.length; i++) size *= workgroupSize[i];\n    this.dispatchCount = Math.ceil(count / size);\n  }\n  onInit() {}\n  update(_ref) {\n    let {\n      renderer\n    } = _ref;\n    renderer.compute(this);\n  }\n  generate(builder) {\n    const {\n      shaderStage\n    } = builder;\n    if (shaderStage === 'compute') {\n      const snippet = this.computeNode.build(builder, 'void');\n      if (snippet !== '') {\n        builder.addLineFlowCode(snippet);\n      }\n    }\n  }\n}\nexport default ComputeNode;\nexport const compute = (node, count, workgroupSize) => nodeObject(new ComputeNode(nodeObject(node), count, workgroupSize));\naddNodeElement('compute', compute);\naddNodeClass(ComputeNode);","map":{"version":3,"names":["Node","addNodeClass","NodeUpdateType","addNodeElement","nodeObject","ComputeNode","constructor","computeNode","count","workgroupSize","arguments","length","undefined","isComputeNode","dispatchCount","updateType","OBJECT","updateDispatchCount","size","i","Math","ceil","onInit","update","_ref","renderer","compute","generate","builder","shaderStage","snippet","build","addLineFlowCode","node"],"sources":["C:/Users/LENOVO/Desktop/reactjsProject/drillit/node_modules/three/examples/jsm/nodes/gpgpu/ComputeNode.js"],"sourcesContent":["import Node, { addNodeClass } from '../core/Node.js';\r\nimport { NodeUpdateType } from '../core/constants.js';\r\nimport { addNodeElement, nodeObject } from '../shadernode/ShaderNode.js';\r\n\r\nclass ComputeNode extends Node {\r\n\r\n\tconstructor( computeNode, count, workgroupSize = [ 64 ] ) {\r\n\r\n\t\tsuper( 'void' );\r\n\r\n\t\tthis.isComputeNode = true;\r\n\r\n\t\tthis.computeNode = computeNode;\r\n\r\n\t\tthis.count = count;\r\n\t\tthis.workgroupSize = workgroupSize;\r\n\t\tthis.dispatchCount = 0;\r\n\r\n\t\tthis.updateType = NodeUpdateType.OBJECT;\r\n\r\n\t\tthis.updateDispatchCount();\r\n\r\n\t}\r\n\r\n\tupdateDispatchCount() {\r\n\r\n\t\tconst { count, workgroupSize } = this;\r\n\r\n\t\tlet size = workgroupSize[ 0 ];\r\n\r\n\t\tfor ( let i = 1; i < workgroupSize.length; i ++ )\r\n\t\t\tsize *= workgroupSize[ i ];\r\n\r\n\t\tthis.dispatchCount = Math.ceil( count / size );\r\n\r\n\t}\r\n\r\n\tonInit() { }\r\n\r\n\tupdate( { renderer } ) {\r\n\r\n\t\trenderer.compute( this );\r\n\r\n\t}\r\n\r\n\tgenerate( builder ) {\r\n\r\n\t\tconst { shaderStage } = builder;\r\n\r\n\t\tif ( shaderStage === 'compute' ) {\r\n\r\n\t\t\tconst snippet = this.computeNode.build( builder, 'void' );\r\n\r\n\t\t\tif ( snippet !== '' ) {\r\n\r\n\t\t\t\tbuilder.addLineFlowCode( snippet );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default ComputeNode;\r\n\r\nexport const compute = ( node, count, workgroupSize ) => nodeObject( new ComputeNode( nodeObject( node ), count, workgroupSize ) );\r\n\r\naddNodeElement( 'compute', compute );\r\n\r\naddNodeClass( ComputeNode );\r\n"],"mappings":"AAAA,OAAOA,IAAI,IAAIC,YAAY,QAAQ,iBAAiB;AACpD,SAASC,cAAc,QAAQ,sBAAsB;AACrD,SAASC,cAAc,EAAEC,UAAU,QAAQ,6BAA6B;AAExE,MAAMC,WAAW,SAASL,IAAI,CAAC;EAE9BM,WAAWA,CAAEC,WAAW,EAAEC,KAAK,EAA2B;IAAA,IAAzBC,aAAa,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,CAAE,EAAE,CAAE;IAEtD,KAAK,CAAE,MAAO,CAAC;IAEf,IAAI,CAACG,aAAa,GAAG,IAAI;IAEzB,IAAI,CAACN,WAAW,GAAGA,WAAW;IAE9B,IAAI,CAACC,KAAK,GAAGA,KAAK;IAClB,IAAI,CAACC,aAAa,GAAGA,aAAa;IAClC,IAAI,CAACK,aAAa,GAAG,CAAC;IAEtB,IAAI,CAACC,UAAU,GAAGb,cAAc,CAACc,MAAM;IAEvC,IAAI,CAACC,mBAAmB,CAAC,CAAC;EAE3B;EAEAA,mBAAmBA,CAAA,EAAG;IAErB,MAAM;MAAET,KAAK;MAAEC;IAAc,CAAC,GAAG,IAAI;IAErC,IAAIS,IAAI,GAAGT,aAAa,CAAE,CAAC,CAAE;IAE7B,KAAM,IAAIU,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGV,aAAa,CAACE,MAAM,EAAEQ,CAAC,EAAG,EAC9CD,IAAI,IAAIT,aAAa,CAAEU,CAAC,CAAE;IAE3B,IAAI,CAACL,aAAa,GAAGM,IAAI,CAACC,IAAI,CAAEb,KAAK,GAAGU,IAAK,CAAC;EAE/C;EAEAI,MAAMA,CAAA,EAAG,CAAE;EAEXC,MAAMA,CAAAC,IAAA,EAAiB;IAAA,IAAf;MAAEC;IAAS,CAAC,GAAAD,IAAA;IAEnBC,QAAQ,CAACC,OAAO,CAAE,IAAK,CAAC;EAEzB;EAEAC,QAAQA,CAAEC,OAAO,EAAG;IAEnB,MAAM;MAAEC;IAAY,CAAC,GAAGD,OAAO;IAE/B,IAAKC,WAAW,KAAK,SAAS,EAAG;MAEhC,MAAMC,OAAO,GAAG,IAAI,CAACvB,WAAW,CAACwB,KAAK,CAAEH,OAAO,EAAE,MAAO,CAAC;MAEzD,IAAKE,OAAO,KAAK,EAAE,EAAG;QAErBF,OAAO,CAACI,eAAe,CAAEF,OAAQ,CAAC;MAEnC;IAED;EAED;AAED;AAEA,eAAezB,WAAW;AAE1B,OAAO,MAAMqB,OAAO,GAAGA,CAAEO,IAAI,EAAEzB,KAAK,EAAEC,aAAa,KAAML,UAAU,CAAE,IAAIC,WAAW,CAAED,UAAU,CAAE6B,IAAK,CAAC,EAAEzB,KAAK,EAAEC,aAAc,CAAE,CAAC;AAElIN,cAAc,CAAE,SAAS,EAAEuB,OAAQ,CAAC;AAEpCzB,YAAY,CAAEI,WAAY,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}