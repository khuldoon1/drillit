{"ast":null,"code":"import { GPUPrimitiveTopology, GPUTextureFormat } from './WebGPUConstants.js';\nclass WebGPUUtils {\n  constructor(backend) {\n    this.backend = backend;\n  }\n  getCurrentDepthStencilFormat(renderContext) {\n    let format;\n    if (renderContext.depthTexture !== null) {\n      format = this.getTextureFormatGPU(renderContext.depthTexture);\n    } else {\n      format = GPUTextureFormat.Depth24PlusStencil8;\n    }\n    return format;\n  }\n  getTextureFormatGPU(texture) {\n    return this.backend.get(texture).texture.format;\n  }\n  getCurrentColorFormat(renderContext) {\n    let format;\n    if (renderContext.texture !== null) {\n      format = this.getTextureFormatGPU(renderContext.texture);\n    } else {\n      format = GPUTextureFormat.BGRA8Unorm; // default context format\n    }\n\n    return format;\n  }\n  getCurrentColorSpace(renderContext) {\n    if (renderContext.texture !== null) {\n      return renderContext.texture.colorSpace;\n    }\n    return this.backend.renderer.outputColorSpace;\n  }\n  getPrimitiveTopology(object, material) {\n    if (object.isPoints) return GPUPrimitiveTopology.PointList;else if (object.isLineSegments || object.isMesh && material.wireframe === true) return GPUPrimitiveTopology.LineList;else if (object.isLine) return GPUPrimitiveTopology.LineStrip;else if (object.isMesh) return GPUPrimitiveTopology.TriangleList;\n  }\n  getSampleCount(renderContext) {\n    if (renderContext.texture !== null) {\n      return 1;\n    }\n    return this.backend.parameters.sampleCount;\n  }\n}\nexport default WebGPUUtils;","map":{"version":3,"names":["GPUPrimitiveTopology","GPUTextureFormat","WebGPUUtils","constructor","backend","getCurrentDepthStencilFormat","renderContext","format","depthTexture","getTextureFormatGPU","Depth24PlusStencil8","texture","get","getCurrentColorFormat","BGRA8Unorm","getCurrentColorSpace","colorSpace","renderer","outputColorSpace","getPrimitiveTopology","object","material","isPoints","PointList","isLineSegments","isMesh","wireframe","LineList","isLine","LineStrip","TriangleList","getSampleCount","parameters","sampleCount"],"sources":["C:/Users/LENOVO/Desktop/reactjsProject/drillit/node_modules/three/examples/jsm/renderers/webgpu/utils/WebGPUUtils.js"],"sourcesContent":["import { GPUPrimitiveTopology, GPUTextureFormat } from './WebGPUConstants.js';\r\n\r\nclass WebGPUUtils {\r\n\r\n\tconstructor( backend ) {\r\n\r\n\t\tthis.backend = backend;\r\n\r\n\t}\r\n\r\n\tgetCurrentDepthStencilFormat( renderContext ) {\r\n\r\n\t\tlet format;\r\n\r\n\t\tif ( renderContext.depthTexture !== null ) {\r\n\r\n\t\t\tformat = this.getTextureFormatGPU( renderContext.depthTexture );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tformat = GPUTextureFormat.Depth24PlusStencil8;\r\n\r\n\t\t}\r\n\r\n\t\treturn format;\r\n\r\n\t}\r\n\r\n\tgetTextureFormatGPU( texture ) {\r\n\r\n\t\treturn this.backend.get( texture ).texture.format;\r\n\r\n\t}\r\n\r\n\tgetCurrentColorFormat( renderContext ) {\r\n\r\n\t\tlet format;\r\n\r\n\t\tif ( renderContext.texture !== null ) {\r\n\r\n\t\t\tformat = this.getTextureFormatGPU( renderContext.texture );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tformat = GPUTextureFormat.BGRA8Unorm; // default context format\r\n\r\n\t\t}\r\n\r\n\t\treturn format;\r\n\r\n\t}\r\n\r\n\tgetCurrentColorSpace( renderContext ) {\r\n\r\n\t\tif ( renderContext.texture !== null ) {\r\n\r\n\t\t\treturn renderContext.texture.colorSpace;\r\n\r\n\t\t}\r\n\r\n\t\treturn this.backend.renderer.outputColorSpace;\r\n\r\n\t}\r\n\r\n\tgetPrimitiveTopology( object, material ) {\r\n\r\n\t\tif ( object.isPoints ) return GPUPrimitiveTopology.PointList;\r\n\t\telse if ( object.isLineSegments || ( object.isMesh && material.wireframe === true ) ) return GPUPrimitiveTopology.LineList;\r\n\t\telse if ( object.isLine ) return GPUPrimitiveTopology.LineStrip;\r\n\t\telse if ( object.isMesh ) return GPUPrimitiveTopology.TriangleList;\r\n\r\n\t}\r\n\r\n\tgetSampleCount( renderContext ) {\r\n\r\n\t\tif ( renderContext.texture !== null ) {\r\n\r\n\t\t\treturn 1;\r\n\r\n\t\t}\r\n\r\n\t\treturn this.backend.parameters.sampleCount;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default WebGPUUtils;\r\n"],"mappings":"AAAA,SAASA,oBAAoB,EAAEC,gBAAgB,QAAQ,sBAAsB;AAE7E,MAAMC,WAAW,CAAC;EAEjBC,WAAWA,CAAEC,OAAO,EAAG;IAEtB,IAAI,CAACA,OAAO,GAAGA,OAAO;EAEvB;EAEAC,4BAA4BA,CAAEC,aAAa,EAAG;IAE7C,IAAIC,MAAM;IAEV,IAAKD,aAAa,CAACE,YAAY,KAAK,IAAI,EAAG;MAE1CD,MAAM,GAAG,IAAI,CAACE,mBAAmB,CAAEH,aAAa,CAACE,YAAa,CAAC;IAEhE,CAAC,MAAM;MAEND,MAAM,GAAGN,gBAAgB,CAACS,mBAAmB;IAE9C;IAEA,OAAOH,MAAM;EAEd;EAEAE,mBAAmBA,CAAEE,OAAO,EAAG;IAE9B,OAAO,IAAI,CAACP,OAAO,CAACQ,GAAG,CAAED,OAAQ,CAAC,CAACA,OAAO,CAACJ,MAAM;EAElD;EAEAM,qBAAqBA,CAAEP,aAAa,EAAG;IAEtC,IAAIC,MAAM;IAEV,IAAKD,aAAa,CAACK,OAAO,KAAK,IAAI,EAAG;MAErCJ,MAAM,GAAG,IAAI,CAACE,mBAAmB,CAAEH,aAAa,CAACK,OAAQ,CAAC;IAE3D,CAAC,MAAM;MAENJ,MAAM,GAAGN,gBAAgB,CAACa,UAAU,CAAC,CAAC;IAEvC;;IAEA,OAAOP,MAAM;EAEd;EAEAQ,oBAAoBA,CAAET,aAAa,EAAG;IAErC,IAAKA,aAAa,CAACK,OAAO,KAAK,IAAI,EAAG;MAErC,OAAOL,aAAa,CAACK,OAAO,CAACK,UAAU;IAExC;IAEA,OAAO,IAAI,CAACZ,OAAO,CAACa,QAAQ,CAACC,gBAAgB;EAE9C;EAEAC,oBAAoBA,CAAEC,MAAM,EAAEC,QAAQ,EAAG;IAExC,IAAKD,MAAM,CAACE,QAAQ,EAAG,OAAOtB,oBAAoB,CAACuB,SAAS,CAAC,KACxD,IAAKH,MAAM,CAACI,cAAc,IAAMJ,MAAM,CAACK,MAAM,IAAIJ,QAAQ,CAACK,SAAS,KAAK,IAAM,EAAG,OAAO1B,oBAAoB,CAAC2B,QAAQ,CAAC,KACtH,IAAKP,MAAM,CAACQ,MAAM,EAAG,OAAO5B,oBAAoB,CAAC6B,SAAS,CAAC,KAC3D,IAAKT,MAAM,CAACK,MAAM,EAAG,OAAOzB,oBAAoB,CAAC8B,YAAY;EAEnE;EAEAC,cAAcA,CAAEzB,aAAa,EAAG;IAE/B,IAAKA,aAAa,CAACK,OAAO,KAAK,IAAI,EAAG;MAErC,OAAO,CAAC;IAET;IAEA,OAAO,IAAI,CAACP,OAAO,CAAC4B,UAAU,CAACC,WAAW;EAE3C;AAED;AAEA,eAAe/B,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}