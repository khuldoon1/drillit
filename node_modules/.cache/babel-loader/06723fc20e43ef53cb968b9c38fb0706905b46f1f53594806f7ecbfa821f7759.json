{"ast":null,"code":"import { addNodeClass } from '../core/Node.js';\nimport TempNode from '../core/TempNode.js';\nclass JoinNode extends TempNode {\n  constructor() {\n    let nodes = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    let nodeType = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    super(nodeType);\n    this.nodes = nodes;\n  }\n  getNodeType(builder) {\n    if (this.nodeType !== null) {\n      return builder.getVectorType(this.nodeType);\n    }\n    return builder.getTypeFromLength(this.nodes.reduce((count, cur) => count + builder.getTypeLength(cur.getNodeType(builder)), 0));\n  }\n  generate(builder, output) {\n    const type = this.getNodeType(builder);\n    const nodes = this.nodes;\n    const snippetValues = [];\n    for (const input of nodes) {\n      const inputSnippet = input.build(builder);\n      snippetValues.push(inputSnippet);\n    }\n    const snippet = `${builder.getType(type)}( ${snippetValues.join(', ')} )`;\n    return builder.format(snippet, type, output);\n  }\n}\nexport default JoinNode;\naddNodeClass(JoinNode);","map":{"version":3,"names":["addNodeClass","TempNode","JoinNode","constructor","nodes","arguments","length","undefined","nodeType","getNodeType","builder","getVectorType","getTypeFromLength","reduce","count","cur","getTypeLength","generate","output","type","snippetValues","input","inputSnippet","build","push","snippet","getType","join","format"],"sources":["C:/Users/LENOVO/Desktop/reactjsProject/drillit/node_modules/three/examples/jsm/nodes/utils/JoinNode.js"],"sourcesContent":["import { addNodeClass } from '../core/Node.js';\r\nimport TempNode from '../core/TempNode.js';\r\n\r\nclass JoinNode extends TempNode {\r\n\r\n\tconstructor( nodes = [], nodeType = null ) {\r\n\r\n\t\tsuper( nodeType );\r\n\r\n\t\tthis.nodes = nodes;\r\n\r\n\t}\r\n\r\n\tgetNodeType( builder ) {\r\n\r\n\t\tif ( this.nodeType !== null ) {\r\n\r\n\t\t\treturn builder.getVectorType( this.nodeType );\r\n\r\n\t\t}\r\n\r\n\t\treturn builder.getTypeFromLength( this.nodes.reduce( ( count, cur ) => count + builder.getTypeLength( cur.getNodeType( builder ) ), 0 ) );\r\n\r\n\t}\r\n\r\n\tgenerate( builder, output ) {\r\n\r\n\t\tconst type = this.getNodeType( builder );\r\n\t\tconst nodes = this.nodes;\r\n\r\n\t\tconst snippetValues = [];\r\n\r\n\t\tfor ( const input of nodes ) {\r\n\r\n\t\t\tconst inputSnippet = input.build( builder );\r\n\r\n\t\t\tsnippetValues.push( inputSnippet );\r\n\r\n\t\t}\r\n\r\n\t\tconst snippet = `${ builder.getType( type ) }( ${ snippetValues.join( ', ' ) } )`;\r\n\r\n\t\treturn builder.format( snippet, type, output );\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default JoinNode;\r\n\r\naddNodeClass( JoinNode );\r\n"],"mappings":"AAAA,SAASA,YAAY,QAAQ,iBAAiB;AAC9C,OAAOC,QAAQ,MAAM,qBAAqB;AAE1C,MAAMC,QAAQ,SAASD,QAAQ,CAAC;EAE/BE,WAAWA,CAAA,EAAgC;IAAA,IAA9BC,KAAK,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,EAAE;IAAA,IAAEG,QAAQ,GAAAH,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,IAAI;IAEvC,KAAK,CAAEG,QAAS,CAAC;IAEjB,IAAI,CAACJ,KAAK,GAAGA,KAAK;EAEnB;EAEAK,WAAWA,CAAEC,OAAO,EAAG;IAEtB,IAAK,IAAI,CAACF,QAAQ,KAAK,IAAI,EAAG;MAE7B,OAAOE,OAAO,CAACC,aAAa,CAAE,IAAI,CAACH,QAAS,CAAC;IAE9C;IAEA,OAAOE,OAAO,CAACE,iBAAiB,CAAE,IAAI,CAACR,KAAK,CAACS,MAAM,CAAE,CAAEC,KAAK,EAAEC,GAAG,KAAMD,KAAK,GAAGJ,OAAO,CAACM,aAAa,CAAED,GAAG,CAACN,WAAW,CAAEC,OAAQ,CAAE,CAAC,EAAE,CAAE,CAAE,CAAC;EAE1I;EAEAO,QAAQA,CAAEP,OAAO,EAAEQ,MAAM,EAAG;IAE3B,MAAMC,IAAI,GAAG,IAAI,CAACV,WAAW,CAAEC,OAAQ,CAAC;IACxC,MAAMN,KAAK,GAAG,IAAI,CAACA,KAAK;IAExB,MAAMgB,aAAa,GAAG,EAAE;IAExB,KAAM,MAAMC,KAAK,IAAIjB,KAAK,EAAG;MAE5B,MAAMkB,YAAY,GAAGD,KAAK,CAACE,KAAK,CAAEb,OAAQ,CAAC;MAE3CU,aAAa,CAACI,IAAI,CAAEF,YAAa,CAAC;IAEnC;IAEA,MAAMG,OAAO,GAAI,GAAGf,OAAO,CAACgB,OAAO,CAAEP,IAAK,CAAG,KAAKC,aAAa,CAACO,IAAI,CAAE,IAAK,CAAG,IAAG;IAEjF,OAAOjB,OAAO,CAACkB,MAAM,CAAEH,OAAO,EAAEN,IAAI,EAAED,MAAO,CAAC;EAE/C;AAED;AAEA,eAAehB,QAAQ;AAEvBF,YAAY,CAAEE,QAAS,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}