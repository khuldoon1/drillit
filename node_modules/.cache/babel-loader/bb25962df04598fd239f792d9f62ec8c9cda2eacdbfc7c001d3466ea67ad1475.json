{"ast":null,"code":"import DataMap from '../DataMap.js';\nimport { NoToneMapping, EquirectangularReflectionMapping, EquirectangularRefractionMapping } from 'three';\nimport { NodeFrame, cubeTexture, texture, rangeFog, densityFog, reference, toneMapping, positionWorld, modelWorldMatrix, transformDirection, equirectUV, viewportBottomLeft } from '../../../nodes/Nodes.js';\nclass Nodes extends DataMap {\n  constructor(renderer, backend) {\n    super();\n    this.renderer = renderer;\n    this.backend = backend;\n    this.nodeFrame = new NodeFrame();\n  }\n  getForRender(renderObject) {\n    const renderObjectData = this.get(renderObject);\n    let nodeBuilder = renderObjectData.nodeBuilder;\n    if (nodeBuilder === undefined) {\n      nodeBuilder = this.backend.createNodeBuilder(renderObject.object, this.renderer);\n      nodeBuilder.material = renderObject.material;\n      nodeBuilder.lightsNode = renderObject.lightsNode;\n      nodeBuilder.environmentNode = this.getEnvironmentNode(renderObject.scene);\n      nodeBuilder.fogNode = this.getFogNode(renderObject.scene);\n      nodeBuilder.toneMappingNode = this.getToneMappingNode();\n      nodeBuilder.build();\n      renderObjectData.nodeBuilder = nodeBuilder;\n    }\n    return nodeBuilder;\n  }\n  getForCompute(computeNode) {\n    const computeData = this.get(computeNode);\n    let nodeBuilder = computeData.nodeBuilder;\n    if (nodeBuilder === undefined) {\n      nodeBuilder = this.backend.createNodeBuilder(computeNode, this.renderer);\n      nodeBuilder.build();\n      computeData.nodeBuilder = nodeBuilder;\n    }\n    return nodeBuilder;\n  }\n  getEnvironmentNode(scene) {\n    return scene.environmentNode || this.get(scene).environmentNode || null;\n  }\n  getBackgroundNode(scene) {\n    return scene.backgroundNode || this.get(scene).backgroundNode || null;\n  }\n  getFogNode(scene) {\n    return scene.fogNode || this.get(scene).fogNode || null;\n  }\n  getToneMappingNode() {\n    return this.renderer.toneMappingNode || this.get(this.renderer).toneMappingNode || null;\n  }\n  getCacheKey(scene, lightsNode) {\n    const environmentNode = this.getEnvironmentNode(scene);\n    const fogNode = this.getFogNode(scene);\n    const toneMappingNode = this.getToneMappingNode();\n    const cacheKey = [];\n    if (lightsNode) cacheKey.push('lightsNode:' + lightsNode.getCacheKey());\n    if (environmentNode) cacheKey.push('environmentNode:' + environmentNode.getCacheKey());\n    if (fogNode) cacheKey.push('fogNode:' + fogNode.getCacheKey());\n    if (toneMappingNode) cacheKey.push('toneMappingNode:' + toneMappingNode.getCacheKey());\n    return '{' + cacheKey.join(',') + '}';\n  }\n  updateScene(scene) {\n    this.updateEnvironment(scene);\n    this.updateFog(scene);\n    this.updateBackground(scene);\n    this.updateToneMapping();\n  }\n  updateToneMapping() {\n    const renderer = this.renderer;\n    const rendererData = this.get(renderer);\n    const rendererToneMapping = renderer.toneMapping;\n    if (rendererToneMapping !== NoToneMapping) {\n      if (rendererData.toneMapping !== rendererToneMapping) {\n        const rendererToneMappingNode = rendererData.rendererToneMappingNode || toneMapping(rendererToneMapping, reference('toneMappingExposure', 'float', renderer));\n        rendererToneMappingNode.toneMapping = rendererToneMapping;\n        rendererData.rendererToneMappingNode = rendererToneMappingNode;\n        rendererData.toneMappingNode = rendererToneMappingNode;\n        rendererData.toneMapping = rendererToneMapping;\n      }\n    } else {\n      // Don't delete rendererData.rendererToneMappingNode\n      delete rendererData.toneMappingNode;\n      delete rendererData.toneMapping;\n    }\n  }\n  updateBackground(scene) {\n    const sceneData = this.get(scene);\n    const background = scene.background;\n    if (background) {\n      if (sceneData.background !== background) {\n        let backgroundNode = null;\n        if (background.isCubeTexture === true) {\n          backgroundNode = cubeTexture(background, transformDirection(positionWorld, modelWorldMatrix));\n        } else if (background.isTexture === true) {\n          let nodeUV = null;\n          if (background.mapping === EquirectangularReflectionMapping || background.mapping === EquirectangularRefractionMapping) {\n            nodeUV = equirectUV();\n          } else {\n            nodeUV = viewportBottomLeft;\n          }\n          backgroundNode = texture(background, nodeUV);\n        } else if (background.isColor !== true) {\n          console.error('WebGPUNodes: Unsupported background configuration.', background);\n        }\n        sceneData.backgroundNode = backgroundNode;\n        sceneData.background = background;\n      }\n    } else if (sceneData.backgroundNode) {\n      delete sceneData.backgroundNode;\n      delete sceneData.background;\n    }\n  }\n  updateFog(scene) {\n    const sceneData = this.get(scene);\n    const fog = scene.fog;\n    if (fog) {\n      if (sceneData.fog !== fog) {\n        let fogNode = null;\n        if (fog.isFogExp2) {\n          fogNode = densityFog(reference('color', 'color', fog), reference('density', 'float', fog));\n        } else if (fog.isFog) {\n          fogNode = rangeFog(reference('color', 'color', fog), reference('near', 'float', fog), reference('far', 'float', fog));\n        } else {\n          console.error('WebGPUNodes: Unsupported fog configuration.', fog);\n        }\n        sceneData.fogNode = fogNode;\n        sceneData.fog = fog;\n      }\n    } else {\n      delete sceneData.fogNode;\n      delete sceneData.fog;\n    }\n  }\n  updateEnvironment(scene) {\n    const sceneData = this.get(scene);\n    const environment = scene.environment;\n    if (environment) {\n      if (sceneData.environment !== environment) {\n        let environmentNode = null;\n        if (environment.isCubeTexture === true) {\n          environmentNode = cubeTexture(environment);\n        } else if (environment.isTexture === true) {\n          environmentNode = texture(environment);\n        } else {\n          console.error('Nodes: Unsupported environment configuration.', environment);\n        }\n        sceneData.environmentNode = environmentNode;\n        sceneData.environment = environment;\n      }\n    } else if (sceneData.environmentNode) {\n      delete sceneData.environmentNode;\n      delete sceneData.environment;\n    }\n  }\n  getNodeFrame(renderObject) {\n    const nodeFrame = this.nodeFrame;\n    nodeFrame.scene = renderObject.scene;\n    nodeFrame.object = renderObject.object;\n    nodeFrame.camera = renderObject.camera;\n    nodeFrame.renderer = renderObject.renderer;\n    nodeFrame.material = renderObject.material;\n    return nodeFrame;\n  }\n  updateBefore(renderObject) {\n    const nodeFrame = this.getNodeFrame(renderObject);\n    const nodeBuilder = this.getForRender(renderObject);\n    for (const node of nodeBuilder.updateBeforeNodes) {\n      nodeFrame.updateBeforeNode(node);\n    }\n  }\n  updateForCompute( /*computeNode*/) {}\n  updateForRender(renderObject) {\n    const nodeFrame = this.getNodeFrame(renderObject);\n    const nodeBuilder = this.getForRender(renderObject);\n    for (const node of nodeBuilder.updateNodes) {\n      nodeFrame.updateNode(node);\n    }\n  }\n  dispose() {\n    super.dispose();\n    this.nodeFrame = new NodeFrame();\n  }\n}\nexport default Nodes;","map":{"version":3,"names":["DataMap","NoToneMapping","EquirectangularReflectionMapping","EquirectangularRefractionMapping","NodeFrame","cubeTexture","texture","rangeFog","densityFog","reference","toneMapping","positionWorld","modelWorldMatrix","transformDirection","equirectUV","viewportBottomLeft","Nodes","constructor","renderer","backend","nodeFrame","getForRender","renderObject","renderObjectData","get","nodeBuilder","undefined","createNodeBuilder","object","material","lightsNode","environmentNode","getEnvironmentNode","scene","fogNode","getFogNode","toneMappingNode","getToneMappingNode","build","getForCompute","computeNode","computeData","getBackgroundNode","backgroundNode","getCacheKey","cacheKey","push","join","updateScene","updateEnvironment","updateFog","updateBackground","updateToneMapping","rendererData","rendererToneMapping","rendererToneMappingNode","sceneData","background","isCubeTexture","isTexture","nodeUV","mapping","isColor","console","error","fog","isFogExp2","isFog","environment","getNodeFrame","camera","updateBefore","node","updateBeforeNodes","updateBeforeNode","updateForCompute","updateForRender","updateNodes","updateNode","dispose"],"sources":["C:/Users/LENOVO/Desktop/reactjsProject/drillit/node_modules/three/examples/jsm/renderers/common/nodes/Nodes.js"],"sourcesContent":["import DataMap from '../DataMap.js';\r\nimport { NoToneMapping, EquirectangularReflectionMapping, EquirectangularRefractionMapping } from 'three';\r\nimport { NodeFrame, cubeTexture, texture, rangeFog, densityFog, reference, toneMapping, positionWorld, modelWorldMatrix, transformDirection, equirectUV, viewportBottomLeft } from '../../../nodes/Nodes.js';\r\n\r\nclass Nodes extends DataMap {\r\n\r\n\tconstructor( renderer, backend ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.renderer = renderer;\r\n\t\tthis.backend = backend;\r\n\t\tthis.nodeFrame = new NodeFrame();\r\n\r\n\t}\r\n\r\n\tgetForRender( renderObject ) {\r\n\r\n\t\tconst renderObjectData = this.get( renderObject );\r\n\r\n\t\tlet nodeBuilder = renderObjectData.nodeBuilder;\r\n\r\n\t\tif ( nodeBuilder === undefined ) {\r\n\r\n\t\t\tnodeBuilder = this.backend.createNodeBuilder( renderObject.object, this.renderer );\r\n\t\t\tnodeBuilder.material = renderObject.material;\r\n\t\t\tnodeBuilder.lightsNode = renderObject.lightsNode;\r\n\t\t\tnodeBuilder.environmentNode = this.getEnvironmentNode( renderObject.scene );\r\n\t\t\tnodeBuilder.fogNode = this.getFogNode( renderObject.scene );\r\n\t\t\tnodeBuilder.toneMappingNode = this.getToneMappingNode();\r\n\t\t\tnodeBuilder.build();\r\n\r\n\t\t\trenderObjectData.nodeBuilder = nodeBuilder;\r\n\r\n\t\t}\r\n\r\n\t\treturn nodeBuilder;\r\n\r\n\t}\r\n\r\n\tgetForCompute( computeNode ) {\r\n\r\n\t\tconst computeData = this.get( computeNode );\r\n\r\n\t\tlet nodeBuilder = computeData.nodeBuilder;\r\n\r\n\t\tif ( nodeBuilder === undefined ) {\r\n\r\n\t\t\tnodeBuilder = this.backend.createNodeBuilder( computeNode, this.renderer );\r\n\t\t\tnodeBuilder.build();\r\n\r\n\t\t\tcomputeData.nodeBuilder = nodeBuilder;\r\n\r\n\t\t}\r\n\r\n\t\treturn nodeBuilder;\r\n\r\n\t}\r\n\r\n\tgetEnvironmentNode( scene ) {\r\n\r\n\t\treturn scene.environmentNode || this.get( scene ).environmentNode || null;\r\n\r\n\t}\r\n\r\n\tgetBackgroundNode( scene ) {\r\n\r\n\t\treturn scene.backgroundNode || this.get( scene ).backgroundNode || null;\r\n\r\n\t}\r\n\r\n\tgetFogNode( scene ) {\r\n\r\n\t\treturn scene.fogNode || this.get( scene ).fogNode || null;\r\n\r\n\t}\r\n\r\n\tgetToneMappingNode() {\r\n\r\n\t\treturn this.renderer.toneMappingNode || this.get( this.renderer ).toneMappingNode || null;\r\n\r\n\t}\r\n\r\n\tgetCacheKey( scene, lightsNode ) {\r\n\r\n\t\tconst environmentNode = this.getEnvironmentNode( scene );\r\n\t\tconst fogNode = this.getFogNode( scene );\r\n\t\tconst toneMappingNode = this.getToneMappingNode();\r\n\r\n\t\tconst cacheKey = [];\r\n\r\n\t\tif ( lightsNode ) cacheKey.push( 'lightsNode:' + lightsNode.getCacheKey() );\r\n\t\tif ( environmentNode ) cacheKey.push( 'environmentNode:' + environmentNode.getCacheKey() );\r\n\t\tif ( fogNode ) cacheKey.push( 'fogNode:' + fogNode.getCacheKey() );\r\n\t\tif ( toneMappingNode ) cacheKey.push( 'toneMappingNode:' + toneMappingNode.getCacheKey() );\r\n\r\n\t\treturn '{' + cacheKey.join( ',' ) + '}';\r\n\r\n\t}\r\n\r\n\tupdateScene( scene ) {\r\n\r\n\t\tthis.updateEnvironment( scene );\r\n\t\tthis.updateFog( scene );\r\n\t\tthis.updateBackground( scene );\r\n\t\tthis.updateToneMapping();\r\n\r\n\t}\r\n\r\n\tupdateToneMapping() {\r\n\r\n\t\tconst renderer = this.renderer;\r\n\t\tconst rendererData = this.get( renderer );\r\n\t\tconst rendererToneMapping = renderer.toneMapping;\r\n\r\n\t\tif ( rendererToneMapping !== NoToneMapping ) {\r\n\r\n\t\t\tif ( rendererData.toneMapping !== rendererToneMapping ) {\r\n\r\n\t\t\t\tconst rendererToneMappingNode = rendererData.rendererToneMappingNode || toneMapping( rendererToneMapping, reference( 'toneMappingExposure', 'float', renderer ) );\r\n\t\t\t\trendererToneMappingNode.toneMapping = rendererToneMapping;\r\n\r\n\t\t\t\trendererData.rendererToneMappingNode = rendererToneMappingNode;\r\n\t\t\t\trendererData.toneMappingNode = rendererToneMappingNode;\r\n\t\t\t\trendererData.toneMapping = rendererToneMapping;\r\n\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\r\n\t\t\t// Don't delete rendererData.rendererToneMappingNode\r\n\t\t\tdelete rendererData.toneMappingNode;\r\n\t\t\tdelete rendererData.toneMapping;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tupdateBackground( scene ) {\r\n\r\n\t\tconst sceneData = this.get( scene );\r\n\t\tconst background = scene.background;\r\n\r\n\t\tif ( background ) {\r\n\r\n\t\t\tif ( sceneData.background !== background ) {\r\n\r\n\t\t\t\tlet backgroundNode = null;\r\n\r\n\t\t\t\tif ( background.isCubeTexture === true ) {\r\n\r\n\t\t\t\t\tbackgroundNode = cubeTexture( background, transformDirection( positionWorld, modelWorldMatrix ) );\r\n\r\n\t\t\t\t} else if ( background.isTexture === true ) {\r\n\r\n\t\t\t\t\tlet nodeUV = null;\r\n\r\n\t\t\t\t\tif ( background.mapping === EquirectangularReflectionMapping || background.mapping === EquirectangularRefractionMapping ) {\r\n\r\n\t\t\t\t\t\tnodeUV = equirectUV();\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tnodeUV = viewportBottomLeft;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tbackgroundNode = texture( background, nodeUV );\r\n\r\n\t\t\t\t} else if ( background.isColor !== true ) {\r\n\r\n\t\t\t\t\tconsole.error( 'WebGPUNodes: Unsupported background configuration.', background );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tsceneData.backgroundNode = backgroundNode;\r\n\t\t\t\tsceneData.background = background;\r\n\r\n\t\t\t}\r\n\r\n\t\t} else if ( sceneData.backgroundNode ) {\r\n\r\n\t\t\tdelete sceneData.backgroundNode;\r\n\t\t\tdelete sceneData.background;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tupdateFog( scene ) {\r\n\r\n\t\tconst sceneData = this.get( scene );\r\n\t\tconst fog = scene.fog;\r\n\r\n\t\tif ( fog ) {\r\n\r\n\t\t\tif ( sceneData.fog !== fog ) {\r\n\r\n\t\t\t\tlet fogNode = null;\r\n\r\n\t\t\t\tif ( fog.isFogExp2 ) {\r\n\r\n\t\t\t\t\tfogNode = densityFog( reference( 'color', 'color', fog ), reference( 'density', 'float', fog ) );\r\n\r\n\t\t\t\t} else if ( fog.isFog ) {\r\n\r\n\t\t\t\t\tfogNode = rangeFog( reference( 'color', 'color', fog ), reference( 'near', 'float', fog ), reference( 'far', 'float', fog ) );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tconsole.error( 'WebGPUNodes: Unsupported fog configuration.', fog );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tsceneData.fogNode = fogNode;\r\n\t\t\t\tsceneData.fog = fog;\r\n\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\r\n\t\t\tdelete sceneData.fogNode;\r\n\t\t\tdelete sceneData.fog;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tupdateEnvironment( scene ) {\r\n\r\n\t\tconst sceneData = this.get( scene );\r\n\t\tconst environment = scene.environment;\r\n\r\n\t\tif ( environment ) {\r\n\r\n\t\t\tif ( sceneData.environment !== environment ) {\r\n\r\n\t\t\t\tlet environmentNode = null;\r\n\r\n\t\t\t\tif ( environment.isCubeTexture === true ) {\r\n\r\n\t\t\t\t\tenvironmentNode = cubeTexture( environment );\r\n\r\n\t\t\t\t} else if ( environment.isTexture === true ) {\r\n\r\n\t\t\t\t\tenvironmentNode = texture( environment );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tconsole.error( 'Nodes: Unsupported environment configuration.', environment );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tsceneData.environmentNode = environmentNode;\r\n\t\t\t\tsceneData.environment = environment;\r\n\r\n\t\t\t}\r\n\r\n\t\t} else if ( sceneData.environmentNode ) {\r\n\r\n\t\t\tdelete sceneData.environmentNode;\r\n\t\t\tdelete sceneData.environment;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tgetNodeFrame( renderObject ) {\r\n\r\n\t\tconst nodeFrame = this.nodeFrame;\r\n\t\tnodeFrame.scene = renderObject.scene;\r\n\t\tnodeFrame.object = renderObject.object;\r\n\t\tnodeFrame.camera = renderObject.camera;\r\n\t\tnodeFrame.renderer = renderObject.renderer;\r\n\t\tnodeFrame.material = renderObject.material;\r\n\r\n\t\treturn nodeFrame;\r\n\r\n\t}\r\n\r\n\tupdateBefore( renderObject ) {\r\n\r\n\t\tconst nodeFrame = this.getNodeFrame( renderObject );\r\n\t\tconst nodeBuilder = this.getForRender( renderObject );\r\n\r\n\t\tfor ( const node of nodeBuilder.updateBeforeNodes ) {\r\n\r\n\t\t\tnodeFrame.updateBeforeNode( node );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tupdateForCompute( /*computeNode*/ ) { }\r\n\r\n\tupdateForRender( renderObject ) {\r\n\r\n\t\tconst nodeFrame = this.getNodeFrame( renderObject );\r\n\t\tconst nodeBuilder = this.getForRender( renderObject );\r\n\r\n\t\tfor ( const node of nodeBuilder.updateNodes ) {\r\n\r\n\t\t\tnodeFrame.updateNode( node );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tdispose() {\r\n\r\n\t\tsuper.dispose();\r\n\r\n\t\tthis.nodeFrame = new NodeFrame();\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default Nodes;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}