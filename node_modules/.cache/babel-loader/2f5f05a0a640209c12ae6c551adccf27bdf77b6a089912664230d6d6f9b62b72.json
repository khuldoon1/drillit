{"ast":null,"code":"import Animation from './Animation.js';\nimport RenderObjects from './RenderObjects.js';\nimport Attributes from './Attributes.js';\nimport Geometries from './Geometries.js';\nimport Info from './Info.js';\nimport Pipelines from './Pipelines.js';\nimport Bindings from './Bindings.js';\nimport RenderLists from './RenderLists.js';\nimport RenderContexts from './RenderContexts.js';\nimport Textures from './Textures.js';\nimport Background from './Background.js';\nimport Nodes from './nodes/Nodes.js';\nimport { Frustum, Matrix4, Vector2, Vector3, Vector4, Color, SRGBColorSpace, NoToneMapping } from 'three';\nconst _drawingBufferSize = new Vector2();\nconst _screen = new Vector4();\nconst _frustum = new Frustum();\nconst _projScreenMatrix = new Matrix4();\nconst _vector3 = new Vector3();\nclass Renderer {\n  constructor(backend) {\n    this.isRenderer = true;\n\n    // public\n\n    this.domElement = backend.getDomElement();\n    this.backend = backend;\n    this.autoClear = true;\n    this.autoClearColor = true;\n    this.autoClearDepth = true;\n    this.autoClearStencil = true;\n    this.outputColorSpace = SRGBColorSpace;\n    this.toneMapping = NoToneMapping;\n    this.toneMappingExposure = 1.0;\n    this.sortObjects = true;\n\n    // internals\n\n    this._pixelRatio = 1;\n    this._width = this.domElement.width;\n    this._height = this.domElement.height;\n    this._viewport = new Vector4(0, 0, this._width, this._height);\n    this._scissor = new Vector4(0, 0, this._width, this._height);\n    this._scissorTest = false;\n    this._info = null;\n    this._properties = null;\n    this._attributes = null;\n    this._geometries = null;\n    this._nodes = null;\n    this._bindings = null;\n    this._objects = null;\n    this._pipelines = null;\n    this._renderLists = null;\n    this._renderContexts = null;\n    this._textures = null;\n    this._background = null;\n    this._animation = new Animation();\n    this._currentRenderContext = null;\n    this._lastRenderContext = null;\n    this._opaqueSort = null;\n    this._transparentSort = null;\n    this._clearAlpha = 1;\n    this._clearColor = new Color(0x000000);\n    this._clearDepth = 1;\n    this._clearStencil = 0;\n    this._renderTarget = null;\n    this._currentActiveCubeFace = 0;\n    this._initialized = false;\n    this._initPromise = null;\n\n    // backwards compatibility\n\n    this.shadowMap = {\n      enabled: false,\n      type: null\n    };\n    this.xr = {\n      enabled: false\n    };\n  }\n  async init() {\n    if (this._initialized) {\n      throw new Error('Renderer: Backend has already been initialized.');\n    }\n    if (this._initPromise !== null) {\n      return this._initPromise;\n    }\n    this._initPromise = new Promise(async (resolve, reject) => {\n      const backend = this.backend;\n      try {\n        await backend.init(this);\n      } catch (error) {\n        reject(error);\n        return;\n      }\n      this._info = new Info();\n      this._nodes = new Nodes(this, backend);\n      this._attributes = new Attributes(backend);\n      this._background = new Background(this, this._nodes);\n      this._geometries = new Geometries(this._attributes, this._info);\n      this._textures = new Textures(backend, this._info);\n      this._pipelines = new Pipelines(backend, this._nodes);\n      this._bindings = new Bindings(backend, this._nodes, this._textures, this._attributes, this._pipelines, this._info);\n      this._objects = new RenderObjects(this, this._nodes, this._geometries, this._pipelines, this._info);\n      this._renderLists = new RenderLists();\n      this._renderContexts = new RenderContexts();\n\n      //\n\n      this._animation.setNodes(this._nodes);\n      this._animation.start();\n      this._initialized = true;\n      resolve();\n    });\n    return this._initPromise;\n  }\n  get coordinateSystem() {\n    return this.backend.coordinateSystem;\n  }\n  async compile( /*scene, camera*/\n  ) {\n    console.warn('THREE.Renderer: .compile() is not implemented yet.');\n  }\n  async render(scene, camera) {\n    if (this._initialized === false) await this.init();\n\n    // preserve render tree\n\n    const nodeFrame = this._nodes.nodeFrame;\n    const previousRenderId = nodeFrame.renderId;\n    const previousRenderState = this._currentRenderContext;\n\n    //\n\n    const renderContext = this._renderContexts.get(scene, camera);\n    const renderTarget = this._renderTarget;\n    const activeCubeFace = this._activeCubeFace;\n    this._currentRenderContext = renderContext;\n    nodeFrame.renderId++;\n\n    //\n\n    const coordinateSystem = this.coordinateSystem;\n    if (camera.coordinateSystem !== coordinateSystem) {\n      camera.coordinateSystem = coordinateSystem;\n      camera.updateProjectionMatrix();\n    }\n\n    //\n\n    if (this._animation.isAnimating === false) nodeFrame.update();\n    if (scene.matrixWorldAutoUpdate === true) scene.updateMatrixWorld();\n    if (camera.parent === null && camera.matrixWorldAutoUpdate === true) camera.updateMatrixWorld();\n    if (this._info.autoReset === true) this._info.reset();\n    this._info.render.frame++;\n\n    //\n\n    let viewport = this._viewport;\n    let scissor = this._scissor;\n    let pixelRatio = this._pixelRatio;\n    if (renderTarget !== null) {\n      viewport = renderTarget.viewport;\n      scissor = renderTarget.scissor;\n      pixelRatio = 1;\n    }\n    this.getDrawingBufferSize(_drawingBufferSize);\n    _screen.set(0, 0, _drawingBufferSize.width, _drawingBufferSize.height);\n    const minDepth = viewport.minDepth === undefined ? 0 : viewport.minDepth;\n    const maxDepth = viewport.maxDepth === undefined ? 1 : viewport.maxDepth;\n    renderContext.viewportValue.copy(viewport).multiplyScalar(pixelRatio).floor();\n    renderContext.viewportValue.minDepth = minDepth;\n    renderContext.viewportValue.maxDepth = maxDepth;\n    renderContext.viewport = renderContext.viewportValue.equals(_screen) === false;\n    renderContext.scissorValue.copy(scissor).multiplyScalar(pixelRatio).floor();\n    renderContext.scissor = this._scissorTest && renderContext.scissorValue.equals(_screen) === false;\n\n    //\n\n    _projScreenMatrix.multiplyMatrices(camera.projectionMatrix, camera.matrixWorldInverse);\n    _frustum.setFromProjectionMatrix(_projScreenMatrix, coordinateSystem);\n    const renderList = this._renderLists.get(scene, camera);\n    renderList.init();\n    this._projectObject(scene, camera, 0, renderList);\n    renderList.finish();\n    if (this.sortObjects === true) {\n      renderList.sort(this._opaqueSort, this._transparentSort);\n    }\n\n    //\n\n    if (renderTarget !== null) {\n      this._textures.updateRenderTarget(renderTarget);\n      const renderTargetData = this._textures.get(renderTarget);\n      renderContext.texture = renderTargetData.texture;\n      renderContext.depthTexture = renderTargetData.depthTexture;\n    } else {\n      renderContext.texture = null;\n      renderContext.depthTexture = null;\n    }\n    renderContext.activeCubeFace = activeCubeFace;\n\n    //\n\n    this._nodes.updateScene(scene);\n\n    //\n\n    this._background.update(scene, renderList, renderContext);\n\n    //\n\n    this.backend.beginRender(renderContext);\n\n    // process render lists\n\n    const opaqueObjects = renderList.opaque;\n    const transparentObjects = renderList.transparent;\n    const lightsNode = renderList.lightsNode;\n    if (opaqueObjects.length > 0) this._renderObjects(opaqueObjects, camera, scene, lightsNode);\n    if (transparentObjects.length > 0) this._renderObjects(transparentObjects, camera, scene, lightsNode);\n\n    // finish render pass\n\n    this.backend.finishRender(renderContext);\n\n    // restore render tree\n\n    nodeFrame.renderId = previousRenderId;\n    this._currentRenderContext = previousRenderState;\n    this._lastRenderContext = renderContext;\n  }\n  setAnimationLoop(callback) {\n    if (this._initialized === false) this.init();\n    const animation = this._animation;\n    animation.setAnimationLoop(callback);\n    callback === null ? animation.stop() : animation.start();\n  }\n  async getArrayBuffer(attribute) {\n    return await this.backend.getArrayBuffer(attribute);\n  }\n  getContext() {\n    return this._context;\n  }\n  getPixelRatio() {\n    return this._pixelRatio;\n  }\n  getDrawingBufferSize(target) {\n    return target.set(this._width * this._pixelRatio, this._height * this._pixelRatio).floor();\n  }\n  getSize(target) {\n    return target.set(this._width, this._height);\n  }\n  setPixelRatio() {\n    let value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n    this._pixelRatio = value;\n    this.setSize(this._width, this._height, false);\n  }\n  setDrawingBufferSize(width, height, pixelRatio) {\n    this._width = width;\n    this._height = height;\n    this._pixelRatio = pixelRatio;\n    this.domElement.width = Math.floor(width * pixelRatio);\n    this.domElement.height = Math.floor(height * pixelRatio);\n    this.setViewport(0, 0, width, height);\n    if (this._initialized) this.backend.updateSize();\n  }\n  setSize(width, height) {\n    let updateStyle = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n    this._width = width;\n    this._height = height;\n    this.domElement.width = Math.floor(width * this._pixelRatio);\n    this.domElement.height = Math.floor(height * this._pixelRatio);\n    if (updateStyle === true) {\n      this.domElement.style.width = width + 'px';\n      this.domElement.style.height = height + 'px';\n    }\n    this.setViewport(0, 0, width, height);\n    if (this._initialized) this.backend.updateSize();\n  }\n  setOpaqueSort(method) {\n    this._opaqueSort = method;\n  }\n  setTransparentSort(method) {\n    this._transparentSort = method;\n  }\n  getScissor(target) {\n    const scissor = this._scissor;\n    target.x = scissor.x;\n    target.y = scissor.y;\n    target.width = scissor.width;\n    target.height = scissor.height;\n    return target;\n  }\n  setScissor(x, y, width, height) {\n    const scissor = this._scissor;\n    if (x.isVector4) {\n      scissor.copy(x);\n    } else {\n      scissor.set(x, y, width, height);\n    }\n  }\n  getScissorTest() {\n    return this._scissorTest;\n  }\n  setScissorTest(boolean) {\n    this._scissorTest = boolean;\n  }\n  getViewport(target) {\n    return target.copy(this._viewport);\n  }\n  setViewport(x, y, width, height) {\n    let minDepth = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;\n    let maxDepth = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 1;\n    const viewport = this._viewport;\n    if (x.isVector4) {\n      viewport.copy(x);\n    } else {\n      viewport.set(x, y, width, height);\n    }\n    viewport.minDepth = minDepth;\n    viewport.maxDepth = maxDepth;\n  }\n  getClearColor(target) {\n    return target.copy(this._clearColor);\n  }\n  setClearColor(color) {\n    let alpha = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n    this._clearColor.set(color);\n    this._clearAlpha = alpha;\n  }\n  getClearAlpha() {\n    return this._clearAlpha;\n  }\n  setClearAlpha(alpha) {\n    this._clearAlpha = alpha;\n  }\n  getClearDepth() {\n    return this._clearDepth;\n  }\n  setClearDepth(depth) {\n    this._clearDepth = depth;\n  }\n  getClearStencil() {\n    return this._clearStencil;\n  }\n  setClearStencil(stencil) {\n    this._clearStencil = stencil;\n  }\n  clear() {\n    let color = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n    let depth = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    let stencil = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n    const renderContext = this._currentRenderContext || this._lastRenderContext;\n    if (renderContext) this.backend.clear(renderContext, color, depth, stencil);\n  }\n  clearColor() {\n    this.clear(true, false, false);\n  }\n  clearDepth() {\n    this.clear(false, true, false);\n  }\n  clearStencil() {\n    this.clear(false, false, true);\n  }\n  dispose() {\n    this._objects.dispose();\n    this._properties.dispose();\n    this._pipelines.dispose();\n    this._nodes.dispose();\n    this._bindings.dispose();\n    this._info.dispose();\n    this._renderLists.dispose();\n    this._renderContexts.dispose();\n    this._textures.dispose();\n    this.setRenderTarget(null);\n    this.setAnimationLoop(null);\n  }\n  setRenderTarget(renderTarget) {\n    let activeCubeFace = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    this._renderTarget = renderTarget;\n    this._activeCubeFace = activeCubeFace;\n  }\n  async compute(computeNodes) {\n    if (this._initialized === false) await this.init();\n    const backend = this.backend;\n    const pipelines = this._pipelines;\n    const computeGroup = Array.isArray(computeNodes) ? computeNodes : [computeNodes];\n    backend.beginCompute(computeGroup);\n    for (const computeNode of computeGroup) {\n      // onInit\n\n      if (pipelines.has(computeNode) === false) {\n        computeNode.onInit({\n          renderer: this\n        });\n      }\n      this._nodes.updateForCompute(computeNode);\n      this._bindings.updateForCompute(computeNode);\n      const computePipeline = pipelines.getForCompute(computeNode);\n      const computeBindings = this._bindings.getForCompute(computeNode);\n      backend.compute(computeGroup, computeNode, computeBindings, computePipeline);\n    }\n    backend.finishCompute(computeGroup);\n  }\n  getRenderTarget() {\n    return this._renderTarget;\n  }\n  hasFeature(name) {\n    return this.backend.hasFeature(name);\n  }\n  copyFramebufferToTexture(framebufferTexture) {\n    const renderContext = this._currentRenderContext || this._lastRenderContext;\n    this._textures.updateTexture(framebufferTexture);\n    this.backend.copyFramebufferToTexture(framebufferTexture, renderContext);\n  }\n  _projectObject(object, camera, groupOrder, renderList) {\n    if (object.visible === false) return;\n    const visible = object.layers.test(camera.layers);\n    if (visible) {\n      if (object.isGroup) {\n        groupOrder = object.renderOrder;\n      } else if (object.isLOD) {\n        if (object.autoUpdate === true) object.update(camera);\n      } else if (object.isLight) {\n        renderList.pushLight(object);\n      } else if (object.isSprite) {\n        if (!object.frustumCulled || _frustum.intersectsSprite(object)) {\n          if (this.sortObjects === true) {\n            _vector3.setFromMatrixPosition(object.matrixWorld).applyMatrix4(_projScreenMatrix);\n          }\n          const geometry = object.geometry;\n          const material = object.material;\n          if (material.visible) {\n            renderList.push(object, geometry, material, groupOrder, _vector3.z, null);\n          }\n        }\n      } else if (object.isLineLoop) {\n        console.error('THREE.Renderer: Objects of type THREE.LineLoop are not supported. Please use THREE.Line or THREE.LineSegments.');\n      } else if (object.isMesh || object.isLine || object.isPoints) {\n        if (!object.frustumCulled || _frustum.intersectsObject(object)) {\n          const geometry = object.geometry;\n          const material = object.material;\n          if (this.sortObjects === true) {\n            if (geometry.boundingSphere === null) geometry.computeBoundingSphere();\n            _vector3.copy(geometry.boundingSphere.center).applyMatrix4(object.matrixWorld).applyMatrix4(_projScreenMatrix);\n          }\n          if (Array.isArray(material)) {\n            const groups = geometry.groups;\n            for (let i = 0, l = groups.length; i < l; i++) {\n              const group = groups[i];\n              const groupMaterial = material[group.materialIndex];\n              if (groupMaterial && groupMaterial.visible) {\n                renderList.push(object, geometry, groupMaterial, groupOrder, _vector3.z, group);\n              }\n            }\n          } else if (material.visible) {\n            renderList.push(object, geometry, material, groupOrder, _vector3.z, null);\n          }\n        }\n      }\n    }\n    const children = object.children;\n    for (let i = 0, l = children.length; i < l; i++) {\n      this._projectObject(children[i], camera, groupOrder, renderList);\n    }\n  }\n  _renderObjects(renderList, camera, scene, lightsNode) {\n    // process renderable objects\n\n    for (let i = 0, il = renderList.length; i < il; i++) {\n      const renderItem = renderList[i];\n\n      // @TODO: Add support for multiple materials per object. This will require to extract\n      // the material from the renderItem object and pass it with its group data to _renderObject().\n\n      const {\n        object,\n        geometry,\n        material,\n        group\n      } = renderItem;\n      if (camera.isArrayCamera) {\n        const cameras = camera.cameras;\n        for (let j = 0, jl = cameras.length; j < jl; j++) {\n          const camera2 = cameras[j];\n          if (object.layers.test(camera2.layers)) {\n            const vp = camera2.viewport;\n            const minDepth = vp.minDepth === undefined ? 0 : vp.minDepth;\n            const maxDepth = vp.maxDepth === undefined ? 1 : vp.maxDepth;\n            const viewportValue = this._currentRenderContext.viewportValue;\n            viewportValue.copy(vp).multiplyScalar(this._pixelRatio).floor();\n            viewportValue.minDepth = minDepth;\n            viewportValue.maxDepth = maxDepth;\n            this.backend.updateViewport(this._currentRenderContext);\n            this._renderObject(object, scene, camera2, geometry, material, group, lightsNode);\n          }\n        }\n      } else {\n        this._renderObject(object, scene, camera, geometry, material, group, lightsNode);\n      }\n    }\n  }\n  _renderObject(object, scene, camera, geometry, material, group, lightsNode) {\n    material = scene.overrideMaterial !== null ? scene.overrideMaterial : material;\n\n    //\n\n    object.onBeforeRender(this, scene, camera, geometry, material, group);\n\n    //\n\n    const renderObject = this._objects.get(object, material, scene, camera, lightsNode);\n    renderObject.context = this._currentRenderContext;\n\n    //\n\n    this._nodes.updateBefore(renderObject);\n\n    //\n\n    object.modelViewMatrix.multiplyMatrices(camera.matrixWorldInverse, object.matrixWorld);\n    object.normalMatrix.getNormalMatrix(object.modelViewMatrix);\n\n    //\n\n    this._nodes.updateForRender(renderObject);\n    this._geometries.update(renderObject);\n    this._bindings.updateForRender(renderObject);\n\n    //\n\n    this.backend.draw(renderObject, this._info);\n  }\n}\nexport default Renderer;","map":{"version":3,"names":["Animation","RenderObjects","Attributes","Geometries","Info","Pipelines","Bindings","RenderLists","RenderContexts","Textures","Background","Nodes","Frustum","Matrix4","Vector2","Vector3","Vector4","Color","SRGBColorSpace","NoToneMapping","_drawingBufferSize","_screen","_frustum","_projScreenMatrix","_vector3","Renderer","constructor","backend","isRenderer","domElement","getDomElement","autoClear","autoClearColor","autoClearDepth","autoClearStencil","outputColorSpace","toneMapping","toneMappingExposure","sortObjects","_pixelRatio","_width","width","_height","height","_viewport","_scissor","_scissorTest","_info","_properties","_attributes","_geometries","_nodes","_bindings","_objects","_pipelines","_renderLists","_renderContexts","_textures","_background","_animation","_currentRenderContext","_lastRenderContext","_opaqueSort","_transparentSort","_clearAlpha","_clearColor","_clearDepth","_clearStencil","_renderTarget","_currentActiveCubeFace","_initialized","_initPromise","shadowMap","enabled","type","xr","init","Error","Promise","resolve","reject","error","setNodes","start","coordinateSystem","compile","console","warn","render","scene","camera","nodeFrame","previousRenderId","renderId","previousRenderState","renderContext","get","renderTarget","activeCubeFace","_activeCubeFace","updateProjectionMatrix","isAnimating","update","matrixWorldAutoUpdate","updateMatrixWorld","parent","autoReset","reset","frame","viewport","scissor","pixelRatio","getDrawingBufferSize","set","minDepth","undefined","maxDepth","viewportValue","copy","multiplyScalar","floor","equals","scissorValue","multiplyMatrices","projectionMatrix","matrixWorldInverse","setFromProjectionMatrix","renderList","_projectObject","finish","sort","updateRenderTarget","renderTargetData","texture","depthTexture","updateScene","beginRender","opaqueObjects","opaque","transparentObjects","transparent","lightsNode","length","_renderObjects","finishRender","setAnimationLoop","callback","animation","stop","getArrayBuffer","attribute","getContext","_context","getPixelRatio","target","getSize","setPixelRatio","value","arguments","setSize","setDrawingBufferSize","Math","setViewport","updateSize","updateStyle","style","setOpaqueSort","method","setTransparentSort","getScissor","x","y","setScissor","isVector4","getScissorTest","setScissorTest","boolean","getViewport","getClearColor","setClearColor","color","alpha","getClearAlpha","setClearAlpha","getClearDepth","setClearDepth","depth","getClearStencil","setClearStencil","stencil","clear","clearColor","clearDepth","clearStencil","dispose","setRenderTarget","compute","computeNodes","pipelines","computeGroup","Array","isArray","beginCompute","computeNode","has","onInit","renderer","updateForCompute","computePipeline","getForCompute","computeBindings","finishCompute","getRenderTarget","hasFeature","name","copyFramebufferToTexture","framebufferTexture","updateTexture","object","groupOrder","visible","layers","test","isGroup","renderOrder","isLOD","autoUpdate","isLight","pushLight","isSprite","frustumCulled","intersectsSprite","setFromMatrixPosition","matrixWorld","applyMatrix4","geometry","material","push","z","isLineLoop","isMesh","isLine","isPoints","intersectsObject","boundingSphere","computeBoundingSphere","center","groups","i","l","group","groupMaterial","materialIndex","children","il","renderItem","isArrayCamera","cameras","j","jl","camera2","vp","updateViewport","_renderObject","overrideMaterial","onBeforeRender","renderObject","context","updateBefore","modelViewMatrix","normalMatrix","getNormalMatrix","updateForRender","draw"],"sources":["C:/Users/LENOVO/Desktop/reactjsProject/drillit/node_modules/three/examples/jsm/renderers/common/Renderer.js"],"sourcesContent":["import Animation from './Animation.js';\r\nimport RenderObjects from './RenderObjects.js';\r\nimport Attributes from './Attributes.js';\r\nimport Geometries from './Geometries.js';\r\nimport Info from './Info.js';\r\nimport Pipelines from './Pipelines.js';\r\nimport Bindings from './Bindings.js';\r\nimport RenderLists from './RenderLists.js';\r\nimport RenderContexts from './RenderContexts.js';\r\nimport Textures from './Textures.js';\r\nimport Background from './Background.js';\r\nimport Nodes from './nodes/Nodes.js';\r\nimport { Frustum, Matrix4, Vector2, Vector3, Vector4, Color, SRGBColorSpace, NoToneMapping } from 'three';\r\n\r\nconst _drawingBufferSize = new Vector2();\r\nconst _screen = new Vector4();\r\nconst _frustum = new Frustum();\r\nconst _projScreenMatrix = new Matrix4();\r\nconst _vector3 = new Vector3();\r\n\r\nclass Renderer {\r\n\r\n\tconstructor( backend ) {\r\n\r\n\t\tthis.isRenderer = true;\r\n\r\n\t\t// public\r\n\r\n\t\tthis.domElement = backend.getDomElement();\r\n\r\n\t\tthis.backend = backend;\r\n\r\n\t\tthis.autoClear = true;\r\n\t\tthis.autoClearColor = true;\r\n\t\tthis.autoClearDepth = true;\r\n\t\tthis.autoClearStencil = true;\r\n\r\n\t\tthis.outputColorSpace = SRGBColorSpace;\r\n\r\n\t\tthis.toneMapping = NoToneMapping;\r\n\t\tthis.toneMappingExposure = 1.0;\r\n\r\n\t\tthis.sortObjects = true;\r\n\r\n\t\t// internals\r\n\r\n\t\tthis._pixelRatio = 1;\r\n\t\tthis._width = this.domElement.width;\r\n\t\tthis._height = this.domElement.height;\r\n\r\n\t\tthis._viewport = new Vector4( 0, 0, this._width, this._height );\r\n\t\tthis._scissor = new Vector4( 0, 0, this._width, this._height );\r\n\t\tthis._scissorTest = false;\r\n\r\n\t\tthis._info = null;\r\n\t\tthis._properties = null;\r\n\t\tthis._attributes = null;\r\n\t\tthis._geometries = null;\r\n\t\tthis._nodes = null;\r\n\t\tthis._bindings = null;\r\n\t\tthis._objects = null;\r\n\t\tthis._pipelines = null;\r\n\t\tthis._renderLists = null;\r\n\t\tthis._renderContexts = null;\r\n\t\tthis._textures = null;\r\n\t\tthis._background = null;\r\n\r\n\t\tthis._animation = new Animation();\r\n\r\n\t\tthis._currentRenderContext = null;\r\n\t\tthis._lastRenderContext = null;\r\n\r\n\t\tthis._opaqueSort = null;\r\n\t\tthis._transparentSort = null;\r\n\r\n\t\tthis._clearAlpha = 1;\r\n\t\tthis._clearColor = new Color( 0x000000 );\r\n\t\tthis._clearDepth = 1;\r\n\t\tthis._clearStencil = 0;\r\n\r\n\t\tthis._renderTarget = null;\r\n\t\tthis._currentActiveCubeFace = 0;\r\n\r\n\t\tthis._initialized = false;\r\n\t\tthis._initPromise = null;\r\n\r\n\t\t// backwards compatibility\r\n\r\n\t\tthis.shadowMap = {\r\n\t\t\tenabled: false,\r\n\t\t\ttype: null\r\n\t\t};\r\n\r\n\t\tthis.xr = {\r\n\t\t\tenabled: false\r\n\t\t};\r\n\r\n\t}\r\n\r\n\tasync init() {\r\n\r\n\t\tif ( this._initialized ) {\r\n\r\n\t\t\tthrow new Error( 'Renderer: Backend has already been initialized.' );\r\n\r\n\t\t}\r\n\r\n\t\tif ( this._initPromise !== null ) {\r\n\r\n\t\t\treturn this._initPromise;\r\n\r\n\t\t}\r\n\r\n\t\tthis._initPromise = new Promise( async ( resolve, reject ) => {\r\n\r\n\t\t\tconst backend = this.backend;\r\n\r\n\t\t\ttry {\r\n\r\n\t\t\t\tawait backend.init( this );\r\n\r\n\t\t\t} catch ( error ) {\r\n\r\n\t\t\t\treject( error );\r\n\t\t\t\treturn;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis._info = new Info();\r\n\t\t\tthis._nodes = new Nodes( this, backend );\r\n\t\t\tthis._attributes = new Attributes( backend );\r\n\t\t\tthis._background = new Background( this, this._nodes );\r\n\t\t\tthis._geometries = new Geometries( this._attributes, this._info );\r\n\t\t\tthis._textures = new Textures( backend, this._info );\r\n\t\t\tthis._pipelines = new Pipelines( backend, this._nodes );\r\n\t\t\tthis._bindings = new Bindings( backend, this._nodes, this._textures, this._attributes, this._pipelines, this._info );\r\n\t\t\tthis._objects = new RenderObjects( this, this._nodes, this._geometries, this._pipelines, this._info );\r\n\t\t\tthis._renderLists = new RenderLists();\r\n\t\t\tthis._renderContexts = new RenderContexts();\r\n\r\n\t\t\t//\r\n\r\n\t\t\tthis._animation.setNodes( this._nodes );\r\n\t\t\tthis._animation.start();\r\n\r\n\t\t\tthis._initialized = true;\r\n\r\n\t\t\tresolve();\r\n\r\n\t\t} );\r\n\r\n\t\treturn this._initPromise;\r\n\r\n\t}\r\n\r\n\tget coordinateSystem() {\r\n\r\n\t\treturn this.backend.coordinateSystem;\r\n\r\n\t}\r\n\r\n\tasync compile( /*scene, camera*/ ) {\r\n\r\n\t\tconsole.warn( 'THREE.Renderer: .compile() is not implemented yet.' );\r\n\r\n\t}\r\n\r\n\tasync render( scene, camera ) {\r\n\r\n\t\tif ( this._initialized === false ) await this.init();\r\n\r\n\t\t// preserve render tree\r\n\r\n\t\tconst nodeFrame = this._nodes.nodeFrame;\r\n\r\n\t\tconst previousRenderId = nodeFrame.renderId;\r\n\t\tconst previousRenderState = this._currentRenderContext;\r\n\r\n\t\t//\r\n\r\n\t\tconst renderContext = this._renderContexts.get( scene, camera );\r\n\t\tconst renderTarget = this._renderTarget;\r\n\t\tconst activeCubeFace = this._activeCubeFace;\r\n\r\n\t\tthis._currentRenderContext = renderContext;\r\n\r\n\t\tnodeFrame.renderId ++;\r\n\r\n\t\t//\r\n\r\n\t\tconst coordinateSystem = this.coordinateSystem;\r\n\r\n\t\tif ( camera.coordinateSystem !== coordinateSystem ) {\r\n\r\n\t\t\tcamera.coordinateSystem = coordinateSystem;\r\n\r\n\t\t\tcamera.updateProjectionMatrix();\r\n\r\n\t\t}\r\n\r\n\t\t//\r\n\r\n\t\tif ( this._animation.isAnimating === false ) nodeFrame.update();\r\n\r\n\t\tif ( scene.matrixWorldAutoUpdate === true ) scene.updateMatrixWorld();\r\n\r\n\t\tif ( camera.parent === null && camera.matrixWorldAutoUpdate === true ) camera.updateMatrixWorld();\r\n\r\n\t\tif ( this._info.autoReset === true ) this._info.reset();\r\n\r\n\t\tthis._info.render.frame ++;\r\n\r\n\t\t//\r\n\r\n\t\tlet viewport = this._viewport;\r\n\t\tlet scissor = this._scissor;\r\n\t\tlet pixelRatio = this._pixelRatio;\r\n\r\n\t\tif ( renderTarget !== null ) {\r\n\r\n\t\t\tviewport = renderTarget.viewport;\r\n\t\t\tscissor = renderTarget.scissor;\r\n\t\t\tpixelRatio = 1;\r\n\r\n\t\t}\r\n\r\n\t\tthis.getDrawingBufferSize( _drawingBufferSize );\r\n\r\n\t\t_screen.set( 0, 0, _drawingBufferSize.width, _drawingBufferSize.height );\r\n\r\n\t\tconst minDepth = ( viewport.minDepth === undefined ) ? 0 : viewport.minDepth;\r\n\t\tconst maxDepth = ( viewport.maxDepth === undefined ) ? 1 : viewport.maxDepth;\r\n\r\n\t\trenderContext.viewportValue.copy( viewport ).multiplyScalar( pixelRatio ).floor();\r\n\t\trenderContext.viewportValue.minDepth = minDepth;\r\n\t\trenderContext.viewportValue.maxDepth = maxDepth;\r\n\t\trenderContext.viewport = renderContext.viewportValue.equals( _screen ) === false;\r\n\r\n\t\trenderContext.scissorValue.copy( scissor ).multiplyScalar( pixelRatio ).floor();\r\n\t\trenderContext.scissor = this._scissorTest && renderContext.scissorValue.equals( _screen ) === false;\r\n\r\n\t\t//\r\n\r\n\t\t_projScreenMatrix.multiplyMatrices( camera.projectionMatrix, camera.matrixWorldInverse );\r\n\t\t_frustum.setFromProjectionMatrix( _projScreenMatrix, coordinateSystem );\r\n\r\n\t\tconst renderList = this._renderLists.get( scene, camera );\r\n\t\trenderList.init();\r\n\r\n\t\tthis._projectObject( scene, camera, 0, renderList );\r\n\r\n\t\trenderList.finish();\r\n\r\n\t\tif ( this.sortObjects === true ) {\r\n\r\n\t\t\trenderList.sort( this._opaqueSort, this._transparentSort );\r\n\r\n\t\t}\r\n\r\n\t\t//\r\n\r\n\t\tif ( renderTarget !== null ) {\r\n\r\n\t\t\tthis._textures.updateRenderTarget( renderTarget );\r\n\r\n\t\t\tconst renderTargetData = this._textures.get( renderTarget );\r\n\r\n\t\t\trenderContext.texture = renderTargetData.texture;\r\n\t\t\trenderContext.depthTexture = renderTargetData.depthTexture;\r\n\r\n\t\t} else {\r\n\r\n\t\t\trenderContext.texture = null;\r\n\t\t\trenderContext.depthTexture = null;\r\n\r\n\t\t}\r\n\r\n\t\trenderContext.activeCubeFace = activeCubeFace;\r\n\r\n\t\t//\r\n\r\n\t\tthis._nodes.updateScene( scene );\r\n\r\n\t\t//\r\n\r\n\t\tthis._background.update( scene, renderList, renderContext );\r\n\r\n\t\t//\r\n\r\n\t\tthis.backend.beginRender( renderContext );\r\n\r\n\t\t// process render lists\r\n\r\n\t\tconst opaqueObjects = renderList.opaque;\r\n\t\tconst transparentObjects = renderList.transparent;\r\n\t\tconst lightsNode = renderList.lightsNode;\r\n\r\n\t\tif ( opaqueObjects.length > 0 ) this._renderObjects( opaqueObjects, camera, scene, lightsNode );\r\n\t\tif ( transparentObjects.length > 0 ) this._renderObjects( transparentObjects, camera, scene, lightsNode );\r\n\r\n\t\t// finish render pass\r\n\r\n\t\tthis.backend.finishRender( renderContext );\r\n\r\n\t\t// restore render tree\r\n\r\n\t\tnodeFrame.renderId = previousRenderId;\r\n\t\tthis._currentRenderContext = previousRenderState;\r\n\r\n\t\tthis._lastRenderContext = renderContext;\r\n\r\n\t}\r\n\r\n\tsetAnimationLoop( callback ) {\r\n\r\n\t\tif ( this._initialized === false ) this.init();\r\n\r\n\t\tconst animation = this._animation;\r\n\r\n\t\tanimation.setAnimationLoop( callback );\r\n\r\n\t\t( callback === null ) ? animation.stop() : animation.start();\r\n\r\n\t}\r\n\r\n\tasync getArrayBuffer( attribute ) {\r\n\r\n\t\treturn await this.backend.getArrayBuffer( attribute );\r\n\r\n\t}\r\n\r\n\tgetContext() {\r\n\r\n\t\treturn this._context;\r\n\r\n\t}\r\n\r\n\tgetPixelRatio() {\r\n\r\n\t\treturn this._pixelRatio;\r\n\r\n\t}\r\n\r\n\tgetDrawingBufferSize( target ) {\r\n\r\n\t\treturn target.set( this._width * this._pixelRatio, this._height * this._pixelRatio ).floor();\r\n\r\n\t}\r\n\r\n\tgetSize( target ) {\r\n\r\n\t\treturn target.set( this._width, this._height );\r\n\r\n\t}\r\n\r\n\tsetPixelRatio( value = 1 ) {\r\n\r\n\t\tthis._pixelRatio = value;\r\n\r\n\t\tthis.setSize( this._width, this._height, false );\r\n\r\n\t}\r\n\r\n\tsetDrawingBufferSize( width, height, pixelRatio ) {\r\n\r\n\t\tthis._width = width;\r\n\t\tthis._height = height;\r\n\r\n\t\tthis._pixelRatio = pixelRatio;\r\n\r\n\t\tthis.domElement.width = Math.floor( width * pixelRatio );\r\n\t\tthis.domElement.height = Math.floor( height * pixelRatio );\r\n\r\n\t\tthis.setViewport( 0, 0, width, height );\r\n\r\n\t\tif ( this._initialized ) this.backend.updateSize();\r\n\r\n\t}\r\n\r\n\tsetSize( width, height, updateStyle = true ) {\r\n\r\n\t\tthis._width = width;\r\n\t\tthis._height = height;\r\n\r\n\t\tthis.domElement.width = Math.floor( width * this._pixelRatio );\r\n\t\tthis.domElement.height = Math.floor( height * this._pixelRatio );\r\n\r\n\t\tif ( updateStyle === true ) {\r\n\r\n\t\t\tthis.domElement.style.width = width + 'px';\r\n\t\t\tthis.domElement.style.height = height + 'px';\r\n\r\n\t\t}\r\n\r\n\t\tthis.setViewport( 0, 0, width, height );\r\n\r\n\t\tif ( this._initialized ) this.backend.updateSize();\r\n\r\n\t}\r\n\r\n\tsetOpaqueSort( method ) {\r\n\r\n\t\tthis._opaqueSort = method;\r\n\r\n\t}\r\n\r\n\tsetTransparentSort( method ) {\r\n\r\n\t\tthis._transparentSort = method;\r\n\r\n\t}\r\n\r\n\tgetScissor( target ) {\r\n\r\n\t\tconst scissor = this._scissor;\r\n\r\n\t\ttarget.x = scissor.x;\r\n\t\ttarget.y = scissor.y;\r\n\t\ttarget.width = scissor.width;\r\n\t\ttarget.height = scissor.height;\r\n\r\n\t\treturn target;\r\n\r\n\t}\r\n\r\n\tsetScissor( x, y, width, height ) {\r\n\r\n\t\tconst scissor = this._scissor;\r\n\r\n\t\tif ( x.isVector4 ) {\r\n\r\n\t\t\tscissor.copy( x );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tscissor.set( x, y, width, height );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tgetScissorTest() {\r\n\r\n\t\treturn this._scissorTest;\r\n\r\n\t}\r\n\r\n\tsetScissorTest( boolean ) {\r\n\r\n\t\tthis._scissorTest = boolean;\r\n\r\n\t}\r\n\r\n\tgetViewport( target ) {\r\n\r\n\t\treturn target.copy( this._viewport );\r\n\r\n\t}\r\n\r\n\tsetViewport( x, y, width, height, minDepth = 0, maxDepth = 1 ) {\r\n\r\n\t\tconst viewport = this._viewport;\r\n\r\n\t\tif ( x.isVector4 ) {\r\n\r\n\t\t\tviewport.copy( x );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tviewport.set( x, y, width, height );\r\n\r\n\t\t}\r\n\r\n\t\tviewport.minDepth = minDepth;\r\n\t\tviewport.maxDepth = maxDepth;\r\n\r\n\t}\r\n\r\n\tgetClearColor( target ) {\r\n\r\n\t\treturn target.copy( this._clearColor );\r\n\r\n\t}\r\n\r\n\tsetClearColor( color, alpha = 1 ) {\r\n\r\n\t\tthis._clearColor.set( color );\r\n\t\tthis._clearAlpha = alpha;\r\n\r\n\t}\r\n\r\n\tgetClearAlpha() {\r\n\r\n\t\treturn this._clearAlpha;\r\n\r\n\t}\r\n\r\n\tsetClearAlpha( alpha ) {\r\n\r\n\t\tthis._clearAlpha = alpha;\r\n\r\n\t}\r\n\r\n\tgetClearDepth() {\r\n\r\n\t\treturn this._clearDepth;\r\n\r\n\t}\r\n\r\n\tsetClearDepth( depth ) {\r\n\r\n\t\tthis._clearDepth = depth;\r\n\r\n\t}\r\n\r\n\tgetClearStencil() {\r\n\r\n\t\treturn this._clearStencil;\r\n\r\n\t}\r\n\r\n\tsetClearStencil( stencil ) {\r\n\r\n\t\tthis._clearStencil = stencil;\r\n\r\n\t}\r\n\r\n\tclear( color = true, depth = true, stencil = true ) {\r\n\r\n\t\tconst renderContext = this._currentRenderContext || this._lastRenderContext;\r\n\r\n\t\tif ( renderContext ) this.backend.clear( renderContext, color, depth, stencil );\r\n\r\n\t}\r\n\r\n\tclearColor() {\r\n\r\n\t\tthis.clear( true, false, false );\r\n\r\n\t}\r\n\r\n\tclearDepth() {\r\n\r\n\t\tthis.clear( false, true, false );\r\n\r\n\t}\r\n\r\n\tclearStencil() {\r\n\r\n\t\tthis.clear( false, false, true );\r\n\r\n\t}\r\n\r\n\tdispose() {\r\n\r\n\t\tthis._objects.dispose();\r\n\t\tthis._properties.dispose();\r\n\t\tthis._pipelines.dispose();\r\n\t\tthis._nodes.dispose();\r\n\t\tthis._bindings.dispose();\r\n\t\tthis._info.dispose();\r\n\t\tthis._renderLists.dispose();\r\n\t\tthis._renderContexts.dispose();\r\n\t\tthis._textures.dispose();\r\n\r\n\t\tthis.setRenderTarget( null );\r\n\t\tthis.setAnimationLoop( null );\r\n\r\n\t}\r\n\r\n\tsetRenderTarget( renderTarget, activeCubeFace = 0 ) {\r\n\r\n\t\tthis._renderTarget = renderTarget;\r\n\t\tthis._activeCubeFace = activeCubeFace;\r\n\r\n\t}\r\n\r\n\tasync compute( computeNodes ) {\r\n\r\n\t\tif ( this._initialized === false ) await this.init();\r\n\r\n\t\tconst backend = this.backend;\r\n\t\tconst pipelines = this._pipelines;\r\n\t\tconst computeGroup = Array.isArray( computeNodes ) ? computeNodes : [ computeNodes ];\r\n\r\n\t\tbackend.beginCompute( computeGroup );\r\n\r\n\t\tfor ( const computeNode of computeGroup ) {\r\n\r\n\t\t\t// onInit\r\n\r\n\t\t\tif ( pipelines.has( computeNode ) === false ) {\r\n\r\n\t\t\t\tcomputeNode.onInit( { renderer: this } );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis._nodes.updateForCompute( computeNode );\r\n\t\t\tthis._bindings.updateForCompute( computeNode );\r\n\r\n\t\t\tconst computePipeline = pipelines.getForCompute( computeNode );\r\n\t\t\tconst computeBindings = this._bindings.getForCompute( computeNode );\r\n\r\n\t\t\tbackend.compute( computeGroup, computeNode, computeBindings, computePipeline );\r\n\r\n\t\t}\r\n\r\n\t\tbackend.finishCompute( computeGroup );\r\n\r\n\t}\r\n\r\n\tgetRenderTarget() {\r\n\r\n\t\treturn this._renderTarget;\r\n\r\n\t}\r\n\r\n\thasFeature( name ) {\r\n\r\n\t\treturn this.backend.hasFeature( name );\r\n\r\n\t}\r\n\r\n\tcopyFramebufferToTexture( framebufferTexture ) {\r\n\r\n\t\tconst renderContext = this._currentRenderContext || this._lastRenderContext;\r\n\r\n\t\tthis._textures.updateTexture( framebufferTexture );\r\n\r\n\t\tthis.backend.copyFramebufferToTexture( framebufferTexture, renderContext );\r\n\r\n\t}\r\n\r\n\t_projectObject( object, camera, groupOrder, renderList ) {\r\n\r\n\t\tif ( object.visible === false ) return;\r\n\r\n\t\tconst visible = object.layers.test( camera.layers );\r\n\r\n\t\tif ( visible ) {\r\n\r\n\t\t\tif ( object.isGroup ) {\r\n\r\n\t\t\t\tgroupOrder = object.renderOrder;\r\n\r\n\t\t\t} else if ( object.isLOD ) {\r\n\r\n\t\t\t\tif ( object.autoUpdate === true ) object.update( camera );\r\n\r\n\t\t\t} else if ( object.isLight ) {\r\n\r\n\t\t\t\trenderList.pushLight( object );\r\n\r\n\t\t\t} else if ( object.isSprite ) {\r\n\r\n\t\t\t\tif ( ! object.frustumCulled || _frustum.intersectsSprite( object ) ) {\r\n\r\n\t\t\t\t\tif ( this.sortObjects === true ) {\r\n\r\n\t\t\t\t\t\t_vector3.setFromMatrixPosition( object.matrixWorld ).applyMatrix4( _projScreenMatrix );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tconst geometry = object.geometry;\r\n\t\t\t\t\tconst material = object.material;\r\n\r\n\t\t\t\t\tif ( material.visible ) {\r\n\r\n\t\t\t\t\t\trenderList.push( object, geometry, material, groupOrder, _vector3.z, null );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else if ( object.isLineLoop ) {\r\n\r\n\t\t\t\tconsole.error( 'THREE.Renderer: Objects of type THREE.LineLoop are not supported. Please use THREE.Line or THREE.LineSegments.' );\r\n\r\n\t\t\t} else if ( object.isMesh || object.isLine || object.isPoints ) {\r\n\r\n\t\t\t\tif ( ! object.frustumCulled || _frustum.intersectsObject( object ) ) {\r\n\r\n\t\t\t\t\tconst geometry = object.geometry;\r\n\t\t\t\t\tconst material = object.material;\r\n\r\n\t\t\t\t\tif ( this.sortObjects === true ) {\r\n\r\n\t\t\t\t\t\tif ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();\r\n\r\n\t\t\t\t\t\t_vector3\r\n\t\t\t\t\t\t\t.copy( geometry.boundingSphere.center )\r\n\t\t\t\t\t\t\t.applyMatrix4( object.matrixWorld )\r\n\t\t\t\t\t\t\t.applyMatrix4( _projScreenMatrix );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif ( Array.isArray( material ) ) {\r\n\r\n\t\t\t\t\t\tconst groups = geometry.groups;\r\n\r\n\t\t\t\t\t\tfor ( let i = 0, l = groups.length; i < l; i ++ ) {\r\n\r\n\t\t\t\t\t\t\tconst group = groups[ i ];\r\n\t\t\t\t\t\t\tconst groupMaterial = material[ group.materialIndex ];\r\n\r\n\t\t\t\t\t\t\tif ( groupMaterial && groupMaterial.visible ) {\r\n\r\n\t\t\t\t\t\t\t\trenderList.push( object, geometry, groupMaterial, groupOrder, _vector3.z, group );\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t} else if ( material.visible ) {\r\n\r\n\t\t\t\t\t\trenderList.push( object, geometry, material, groupOrder, _vector3.z, null );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tconst children = object.children;\r\n\r\n\t\tfor ( let i = 0, l = children.length; i < l; i ++ ) {\r\n\r\n\t\t\tthis._projectObject( children[ i ], camera, groupOrder, renderList );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t_renderObjects( renderList, camera, scene, lightsNode ) {\r\n\r\n\t\t// process renderable objects\r\n\r\n\t\tfor ( let i = 0, il = renderList.length; i < il; i ++ ) {\r\n\r\n\t\t\tconst renderItem = renderList[ i ];\r\n\r\n\t\t\t// @TODO: Add support for multiple materials per object. This will require to extract\r\n\t\t\t// the material from the renderItem object and pass it with its group data to _renderObject().\r\n\r\n\t\t\tconst { object, geometry, material, group } = renderItem;\r\n\r\n\t\t\tif ( camera.isArrayCamera ) {\r\n\r\n\t\t\t\tconst cameras = camera.cameras;\r\n\r\n\t\t\t\tfor ( let j = 0, jl = cameras.length; j < jl; j ++ ) {\r\n\r\n\t\t\t\t\tconst camera2 = cameras[ j ];\r\n\r\n\t\t\t\t\tif ( object.layers.test( camera2.layers ) ) {\r\n\r\n\t\t\t\t\t\tconst vp = camera2.viewport;\r\n\t\t\t\t\t\tconst minDepth = ( vp.minDepth === undefined ) ? 0 : vp.minDepth;\r\n\t\t\t\t\t\tconst maxDepth = ( vp.maxDepth === undefined ) ? 1 : vp.maxDepth;\r\n\r\n\t\t\t\t\t\tconst viewportValue = this._currentRenderContext.viewportValue;\r\n\t\t\t\t\t\tviewportValue.copy( vp ).multiplyScalar( this._pixelRatio ).floor();\r\n\t\t\t\t\t\tviewportValue.minDepth = minDepth;\r\n\t\t\t\t\t\tviewportValue.maxDepth = maxDepth;\r\n\r\n\t\t\t\t\t\tthis.backend.updateViewport( this._currentRenderContext );\r\n\r\n\t\t\t\t\t\tthis._renderObject( object, scene, camera2, geometry, material, group, lightsNode );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tthis._renderObject( object, scene, camera, geometry, material, group, lightsNode );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t_renderObject( object, scene, camera, geometry, material, group, lightsNode ) {\r\n\r\n\t\tmaterial = scene.overrideMaterial !== null ? scene.overrideMaterial : material;\r\n\r\n\t\t//\r\n\r\n\t\tobject.onBeforeRender( this, scene, camera, geometry, material, group );\r\n\r\n\t\t//\r\n\r\n\t\tconst renderObject = this._objects.get( object, material, scene, camera, lightsNode );\r\n\t\trenderObject.context = this._currentRenderContext;\r\n\r\n\t\t//\r\n\r\n\t\tthis._nodes.updateBefore( renderObject );\r\n\r\n\t\t//\r\n\r\n\t\tobject.modelViewMatrix.multiplyMatrices( camera.matrixWorldInverse, object.matrixWorld );\r\n\t\tobject.normalMatrix.getNormalMatrix( object.modelViewMatrix );\r\n\r\n\t\t//\r\n\r\n\t\tthis._nodes.updateForRender( renderObject );\r\n\t\tthis._geometries.update( renderObject );\r\n\t\tthis._bindings.updateForRender( renderObject );\r\n\r\n\t\t//\r\n\r\n\t\tthis.backend.draw( renderObject, this._info );\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default Renderer;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}