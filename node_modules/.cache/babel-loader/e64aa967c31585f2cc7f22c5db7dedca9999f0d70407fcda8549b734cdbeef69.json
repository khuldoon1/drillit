{"ast":null,"code":"import TempNode from '../core/TempNode.js';\nimport { addNodeClass } from '../core/Node.js';\nimport { addNodeElement, nodeProxy } from '../shadernode/ShaderNode.js';\nclass PackingNode extends TempNode {\n  constructor(scope, node) {\n    super();\n    this.scope = scope;\n    this.node = node;\n  }\n  getNodeType(builder) {\n    return this.node.getNodeType(builder);\n  }\n  construct() {\n    const {\n      scope,\n      node\n    } = this;\n    let result = null;\n    if (scope === PackingNode.DIRECTION_TO_COLOR) {\n      result = node.mul(0.5).add(0.5);\n    } else if (scope === PackingNode.COLOR_TO_DIRECTION) {\n      result = node.mul(2.0).sub(1);\n    }\n    return result;\n  }\n}\nPackingNode.DIRECTION_TO_COLOR = 'directionToColor';\nPackingNode.COLOR_TO_DIRECTION = 'colorToDirection';\nexport default PackingNode;\nexport const directionToColor = nodeProxy(PackingNode, PackingNode.DIRECTION_TO_COLOR);\nexport const colorToDirection = nodeProxy(PackingNode, PackingNode.COLOR_TO_DIRECTION);\naddNodeElement('directionToColor', directionToColor);\naddNodeElement('colorToDirection', colorToDirection);\naddNodeClass(PackingNode);","map":{"version":3,"names":["TempNode","addNodeClass","addNodeElement","nodeProxy","PackingNode","constructor","scope","node","getNodeType","builder","construct","result","DIRECTION_TO_COLOR","mul","add","COLOR_TO_DIRECTION","sub","directionToColor","colorToDirection"],"sources":["C:/Users/LENOVO/Desktop/reactjsProject/drillit/node_modules/three/examples/jsm/nodes/utils/PackingNode.js"],"sourcesContent":["import TempNode from '../core/TempNode.js';\r\nimport { addNodeClass } from '../core/Node.js';\r\nimport { addNodeElement, nodeProxy } from '../shadernode/ShaderNode.js';\r\n\r\nclass PackingNode extends TempNode {\r\n\r\n\tconstructor( scope, node ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.scope = scope;\r\n\t\tthis.node = node;\r\n\r\n\t}\r\n\r\n\tgetNodeType( builder ) {\r\n\r\n\t\treturn this.node.getNodeType( builder );\r\n\r\n\t}\r\n\r\n\tconstruct() {\r\n\r\n\t\tconst { scope, node } = this;\r\n\r\n\t\tlet result = null;\r\n\r\n\t\tif ( scope === PackingNode.DIRECTION_TO_COLOR ) {\r\n\r\n\t\t\tresult = node.mul( 0.5 ).add( 0.5 );\r\n\r\n\t\t} else if ( scope === PackingNode.COLOR_TO_DIRECTION ) {\r\n\r\n\t\t\tresult = node.mul( 2.0 ).sub( 1 );\r\n\r\n\t\t}\r\n\r\n\t\treturn result;\r\n\r\n\t}\r\n\r\n}\r\n\r\nPackingNode.DIRECTION_TO_COLOR = 'directionToColor';\r\nPackingNode.COLOR_TO_DIRECTION = 'colorToDirection';\r\n\r\nexport default PackingNode;\r\n\r\nexport const directionToColor = nodeProxy( PackingNode, PackingNode.DIRECTION_TO_COLOR );\r\nexport const colorToDirection = nodeProxy( PackingNode, PackingNode.COLOR_TO_DIRECTION );\r\n\r\naddNodeElement( 'directionToColor', directionToColor );\r\naddNodeElement( 'colorToDirection', colorToDirection );\r\n\r\naddNodeClass( PackingNode );\r\n"],"mappings":"AAAA,OAAOA,QAAQ,MAAM,qBAAqB;AAC1C,SAASC,YAAY,QAAQ,iBAAiB;AAC9C,SAASC,cAAc,EAAEC,SAAS,QAAQ,6BAA6B;AAEvE,MAAMC,WAAW,SAASJ,QAAQ,CAAC;EAElCK,WAAWA,CAAEC,KAAK,EAAEC,IAAI,EAAG;IAE1B,KAAK,CAAC,CAAC;IAEP,IAAI,CAACD,KAAK,GAAGA,KAAK;IAClB,IAAI,CAACC,IAAI,GAAGA,IAAI;EAEjB;EAEAC,WAAWA,CAAEC,OAAO,EAAG;IAEtB,OAAO,IAAI,CAACF,IAAI,CAACC,WAAW,CAAEC,OAAQ,CAAC;EAExC;EAEAC,SAASA,CAAA,EAAG;IAEX,MAAM;MAAEJ,KAAK;MAAEC;IAAK,CAAC,GAAG,IAAI;IAE5B,IAAII,MAAM,GAAG,IAAI;IAEjB,IAAKL,KAAK,KAAKF,WAAW,CAACQ,kBAAkB,EAAG;MAE/CD,MAAM,GAAGJ,IAAI,CAACM,GAAG,CAAE,GAAI,CAAC,CAACC,GAAG,CAAE,GAAI,CAAC;IAEpC,CAAC,MAAM,IAAKR,KAAK,KAAKF,WAAW,CAACW,kBAAkB,EAAG;MAEtDJ,MAAM,GAAGJ,IAAI,CAACM,GAAG,CAAE,GAAI,CAAC,CAACG,GAAG,CAAE,CAAE,CAAC;IAElC;IAEA,OAAOL,MAAM;EAEd;AAED;AAEAP,WAAW,CAACQ,kBAAkB,GAAG,kBAAkB;AACnDR,WAAW,CAACW,kBAAkB,GAAG,kBAAkB;AAEnD,eAAeX,WAAW;AAE1B,OAAO,MAAMa,gBAAgB,GAAGd,SAAS,CAAEC,WAAW,EAAEA,WAAW,CAACQ,kBAAmB,CAAC;AACxF,OAAO,MAAMM,gBAAgB,GAAGf,SAAS,CAAEC,WAAW,EAAEA,WAAW,CAACW,kBAAmB,CAAC;AAExFb,cAAc,CAAE,kBAAkB,EAAEe,gBAAiB,CAAC;AACtDf,cAAc,CAAE,kBAAkB,EAAEgB,gBAAiB,CAAC;AAEtDjB,YAAY,CAAEG,WAAY,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}