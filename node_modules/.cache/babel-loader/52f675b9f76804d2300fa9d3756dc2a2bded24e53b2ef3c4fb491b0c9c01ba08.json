{"ast":null,"code":"import NodeMaterial, { addNodeMaterial } from './NodeMaterial.js';\nimport { diffuseColor, metalness, roughness, specularColor } from '../core/PropertyNode.js';\nimport { mix } from '../math/MathNode.js';\nimport { materialRoughness, materialMetalness } from '../accessors/MaterialNode.js';\nimport getRoughness from '../functions/material/getRoughness.js';\nimport physicalLightingModel from '../functions/PhysicalLightingModel.js';\nimport { float, vec3, vec4 } from '../shadernode/ShaderNode.js';\nimport { MeshStandardMaterial } from 'three';\nconst defaultValues = new MeshStandardMaterial();\nclass MeshStandardNodeMaterial extends NodeMaterial {\n  constructor(parameters) {\n    super();\n    this.isMeshStandardNodeMaterial = true;\n    this.emissiveNode = null;\n    this.metalnessNode = null;\n    this.roughnessNode = null;\n    this.setDefaultValues(defaultValues);\n    this.setValues(parameters);\n  }\n  constructLightingModel( /*builder*/\n  ) {\n    return physicalLightingModel;\n  }\n  constructVariants(_ref) {\n    let {\n      stack\n    } = _ref;\n    // METALNESS\n\n    const metalnessNode = this.metalnessNode ? float(this.metalnessNode) : materialMetalness;\n    stack.assign(metalness, metalnessNode);\n\n    // ROUGHNESS\n\n    let roughnessNode = this.roughnessNode ? float(this.roughnessNode) : materialRoughness;\n    roughnessNode = getRoughness.call({\n      roughness: roughnessNode\n    });\n    stack.assign(roughness, roughnessNode);\n\n    // SPECULAR COLOR\n\n    const specularColorNode = mix(vec3(0.04), diffuseColor.rgb, metalnessNode);\n    stack.assign(specularColor, specularColorNode);\n\n    // DIFFUSE COLOR\n\n    stack.assign(diffuseColor, vec4(diffuseColor.rgb.mul(metalnessNode.oneMinus()), diffuseColor.a));\n  }\n  copy(source) {\n    this.colorNode = source.colorNode;\n    this.opacityNode = source.opacityNode;\n    this.alphaTestNode = source.alphaTestNode;\n    this.normalNode = source.normalNode;\n    this.emissiveNode = source.emissiveNode;\n    this.metalnessNode = source.metalnessNode;\n    this.roughnessNode = source.roughnessNode;\n    this.envNode = source.envNode;\n    this.lightsNode = source.lightsNode;\n    this.positionNode = source.positionNode;\n    return super.copy(source);\n  }\n}\nexport default MeshStandardNodeMaterial;\naddNodeMaterial(MeshStandardNodeMaterial);","map":{"version":3,"names":["NodeMaterial","addNodeMaterial","diffuseColor","metalness","roughness","specularColor","mix","materialRoughness","materialMetalness","getRoughness","physicalLightingModel","float","vec3","vec4","MeshStandardMaterial","defaultValues","MeshStandardNodeMaterial","constructor","parameters","isMeshStandardNodeMaterial","emissiveNode","metalnessNode","roughnessNode","setDefaultValues","setValues","constructLightingModel","constructVariants","_ref","stack","assign","call","specularColorNode","rgb","mul","oneMinus","a","copy","source","colorNode","opacityNode","alphaTestNode","normalNode","envNode","lightsNode","positionNode"],"sources":["C:/Users/LENOVO/Desktop/reactjsProject/drillit/node_modules/three/examples/jsm/nodes/materials/MeshStandardNodeMaterial.js"],"sourcesContent":["import NodeMaterial, { addNodeMaterial } from './NodeMaterial.js';\r\nimport { diffuseColor, metalness, roughness, specularColor } from '../core/PropertyNode.js';\r\nimport { mix } from '../math/MathNode.js';\r\nimport { materialRoughness, materialMetalness } from '../accessors/MaterialNode.js';\r\nimport getRoughness from '../functions/material/getRoughness.js';\r\nimport physicalLightingModel from '../functions/PhysicalLightingModel.js';\r\nimport { float, vec3, vec4 } from '../shadernode/ShaderNode.js';\r\n\r\nimport { MeshStandardMaterial } from 'three';\r\n\r\nconst defaultValues = new MeshStandardMaterial();\r\n\r\nclass MeshStandardNodeMaterial extends NodeMaterial {\r\n\r\n\tconstructor( parameters ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.isMeshStandardNodeMaterial = true;\r\n\r\n\t\tthis.emissiveNode = null;\r\n\r\n\t\tthis.metalnessNode = null;\r\n\t\tthis.roughnessNode = null;\r\n\r\n\t\tthis.setDefaultValues( defaultValues );\r\n\r\n\t\tthis.setValues( parameters );\r\n\r\n\t}\r\n\r\n\tconstructLightingModel( /*builder*/ ) {\r\n\r\n\t\treturn physicalLightingModel;\r\n\r\n\t}\r\n\r\n\tconstructVariants( { stack } ) {\r\n\r\n\t\t// METALNESS\r\n\r\n\t\tconst metalnessNode = this.metalnessNode ? float( this.metalnessNode ) : materialMetalness;\r\n\r\n\t\tstack.assign( metalness, metalnessNode );\r\n\r\n\t\t// ROUGHNESS\r\n\r\n\t\tlet roughnessNode = this.roughnessNode ? float( this.roughnessNode ) : materialRoughness;\r\n\t\troughnessNode = getRoughness.call( { roughness: roughnessNode } );\r\n\r\n\t\tstack.assign( roughness, roughnessNode );\r\n\r\n\t\t// SPECULAR COLOR\r\n\r\n\t\tconst specularColorNode = mix( vec3( 0.04 ), diffuseColor.rgb, metalnessNode );\r\n\r\n\t\tstack.assign( specularColor, specularColorNode );\r\n\r\n\t\t// DIFFUSE COLOR\r\n\r\n\t\tstack.assign( diffuseColor, vec4( diffuseColor.rgb.mul( metalnessNode.oneMinus() ), diffuseColor.a ) );\r\n\r\n\t}\r\n\r\n\tcopy( source ) {\r\n\r\n\t\tthis.colorNode = source.colorNode;\r\n\t\tthis.opacityNode = source.opacityNode;\r\n\r\n\t\tthis.alphaTestNode = source.alphaTestNode;\r\n\r\n\t\tthis.normalNode = source.normalNode;\r\n\r\n\t\tthis.emissiveNode = source.emissiveNode;\r\n\r\n\t\tthis.metalnessNode = source.metalnessNode;\r\n\t\tthis.roughnessNode = source.roughnessNode;\r\n\r\n\t\tthis.envNode = source.envNode;\r\n\r\n\t\tthis.lightsNode = source.lightsNode;\r\n\r\n\t\tthis.positionNode = source.positionNode;\r\n\r\n\t\treturn super.copy( source );\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default MeshStandardNodeMaterial;\r\n\r\naddNodeMaterial( MeshStandardNodeMaterial );\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}