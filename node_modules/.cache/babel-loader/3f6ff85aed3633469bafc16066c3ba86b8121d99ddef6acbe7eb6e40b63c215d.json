{"ast":null,"code":"import UniformNode from '../core/UniformNode.js';\nimport { uv } from './UVNode.js';\nimport { addNodeClass } from '../core/Node.js';\nimport { addNodeElement, nodeProxy } from '../shadernode/ShaderNode.js';\nlet defaultUV;\nclass TextureNode extends UniformNode {\n  constructor(value) {\n    let uvNode = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    let levelNode = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n    super(value);\n    this.isTextureNode = true;\n    this.uvNode = uvNode;\n    this.levelNode = levelNode;\n  }\n  getUniformHash( /*builder*/\n  ) {\n    return this.value.uuid;\n  }\n  getNodeType( /*builder*/\n  ) {\n    if (this.value.isDepthTexture === true) return 'float';\n    return 'vec4';\n  }\n  getInputType( /*builder*/\n  ) {\n    return 'texture';\n  }\n  getDefaultUV() {\n    return defaultUV || (defaultUV = uv());\n  }\n  construct(builder) {\n    const properties = builder.getNodeProperties(this);\n\n    //\n\n    let uvNode = this.uvNode;\n    if (uvNode === null && builder.context.getUVNode) {\n      uvNode = builder.context.getUVNode(this);\n    }\n    uvNode || (uvNode = this.getDefaultUV());\n\n    //\n\n    let levelNode = this.levelNode;\n    if (levelNode === null && builder.context.getSamplerLevelNode) {\n      levelNode = builder.context.getSamplerLevelNode(this);\n    }\n\n    //\n\n    properties.uvNode = uvNode;\n    properties.levelNode = levelNode ? builder.context.getMIPLevelAlgorithmNode(this, levelNode) : null;\n  }\n  generate(builder, output) {\n    const {\n      uvNode,\n      levelNode\n    } = builder.getNodeProperties(this);\n    const texture = this.value;\n    if (!texture || texture.isTexture !== true) {\n      throw new Error('TextureNode: Need a three.js texture.');\n    }\n    const textureProperty = super.generate(builder, 'property');\n    if (output === 'sampler') {\n      return textureProperty + '_sampler';\n    } else if (builder.isReference(output)) {\n      return textureProperty;\n    } else {\n      const nodeType = this.getNodeType(builder);\n      const nodeData = builder.getDataFromNode(this);\n      let propertyName = nodeData.propertyName;\n      if (propertyName === undefined) {\n        const uvSnippet = uvNode.build(builder, 'vec2');\n        const nodeVar = builder.getVarFromNode(this, nodeType);\n        propertyName = builder.getPropertyName(nodeVar);\n        let snippet = null;\n        if (levelNode && levelNode.isNode === true) {\n          const levelSnippet = levelNode.build(builder, 'float');\n          snippet = builder.getTextureLevel(texture, textureProperty, uvSnippet, levelSnippet);\n        } else {\n          snippet = builder.getTexture(texture, textureProperty, uvSnippet);\n        }\n        builder.addLineFlowCode(`${propertyName} = ${snippet}`);\n        nodeData.snippet = snippet;\n        nodeData.propertyName = propertyName;\n      }\n      return builder.format(propertyName, nodeType, output);\n    }\n  }\n  serialize(data) {\n    super.serialize(data);\n    data.value = this.value.toJSON(data.meta).uuid;\n  }\n  deserialize(data) {\n    super.deserialize(data);\n    this.value = data.meta.textures[data.value];\n  }\n}\nexport default TextureNode;\nexport const texture = nodeProxy(TextureNode);\nexport const sampler = aTexture => (aTexture.isNode === true ? aTexture : texture(aTexture)).convert('sampler');\naddNodeElement('texture', texture);\naddNodeClass(TextureNode);","map":{"version":3,"names":["UniformNode","uv","addNodeClass","addNodeElement","nodeProxy","defaultUV","TextureNode","constructor","value","uvNode","arguments","length","undefined","levelNode","isTextureNode","getUniformHash","uuid","getNodeType","isDepthTexture","getInputType","getDefaultUV","construct","builder","properties","getNodeProperties","context","getUVNode","getSamplerLevelNode","getMIPLevelAlgorithmNode","generate","output","texture","isTexture","Error","textureProperty","isReference","nodeType","nodeData","getDataFromNode","propertyName","uvSnippet","build","nodeVar","getVarFromNode","getPropertyName","snippet","isNode","levelSnippet","getTextureLevel","getTexture","addLineFlowCode","format","serialize","data","toJSON","meta","deserialize","textures","sampler","aTexture","convert"],"sources":["C:/Users/LENOVO/Desktop/reactjsProject/drillit/node_modules/three/examples/jsm/nodes/accessors/TextureNode.js"],"sourcesContent":["import UniformNode from '../core/UniformNode.js';\r\nimport { uv } from './UVNode.js';\r\nimport { addNodeClass } from '../core/Node.js';\r\nimport { addNodeElement, nodeProxy } from '../shadernode/ShaderNode.js';\r\n\r\nlet defaultUV;\r\n\r\nclass TextureNode extends UniformNode {\r\n\r\n\tconstructor( value, uvNode = null, levelNode = null ) {\r\n\r\n\t\tsuper( value );\r\n\r\n\t\tthis.isTextureNode = true;\r\n\r\n\t\tthis.uvNode = uvNode;\r\n\t\tthis.levelNode = levelNode;\r\n\r\n\t}\r\n\r\n\tgetUniformHash( /*builder*/ ) {\r\n\r\n\t\treturn this.value.uuid;\r\n\r\n\t}\r\n\r\n\tgetNodeType( /*builder*/ ) {\r\n\r\n\t\tif ( this.value.isDepthTexture === true ) return 'float';\r\n\r\n\t\treturn 'vec4';\r\n\r\n\t}\r\n\r\n\tgetInputType( /*builder*/ ) {\r\n\r\n\t\treturn 'texture';\r\n\r\n\t}\r\n\r\n\tgetDefaultUV() {\r\n\r\n\t\treturn defaultUV || ( defaultUV = uv() );\r\n\r\n\t}\r\n\r\n\tconstruct( builder ) {\r\n\r\n\t\tconst properties = builder.getNodeProperties( this );\r\n\r\n\t\t//\r\n\r\n\t\tlet uvNode = this.uvNode;\r\n\r\n\t\tif ( uvNode === null && builder.context.getUVNode ) {\r\n\r\n\t\t\tuvNode = builder.context.getUVNode( this );\r\n\r\n\t\t}\r\n\r\n\t\tuvNode || ( uvNode = this.getDefaultUV() );\r\n\r\n\t\t//\r\n\r\n\t\tlet levelNode = this.levelNode;\r\n\r\n\t\tif ( levelNode === null && builder.context.getSamplerLevelNode ) {\r\n\r\n\t\t\tlevelNode = builder.context.getSamplerLevelNode( this );\r\n\r\n\t\t}\r\n\r\n\t\t//\r\n\r\n\t\tproperties.uvNode = uvNode;\r\n\t\tproperties.levelNode = levelNode ? builder.context.getMIPLevelAlgorithmNode( this, levelNode ) : null;\r\n\r\n\t}\r\n\r\n\tgenerate( builder, output ) {\r\n\r\n\t\tconst { uvNode, levelNode } = builder.getNodeProperties( this );\r\n\r\n\t\tconst texture = this.value;\r\n\r\n\t\tif ( ! texture || texture.isTexture !== true ) {\r\n\r\n\t\t\tthrow new Error( 'TextureNode: Need a three.js texture.' );\r\n\r\n\t\t}\r\n\r\n\t\tconst textureProperty = super.generate( builder, 'property' );\r\n\r\n\t\tif ( output === 'sampler' ) {\r\n\r\n\t\t\treturn textureProperty + '_sampler';\r\n\r\n\t\t} else if ( builder.isReference( output ) ) {\r\n\r\n\t\t\treturn textureProperty;\r\n\r\n\t\t} else {\r\n\r\n\t\t\tconst nodeType = this.getNodeType( builder );\r\n\t\t\tconst nodeData = builder.getDataFromNode( this );\r\n\r\n\t\t\tlet propertyName = nodeData.propertyName;\r\n\r\n\t\t\tif ( propertyName === undefined ) {\r\n\r\n\t\t\t\tconst uvSnippet = uvNode.build( builder, 'vec2' );\r\n\t\t\t\tconst nodeVar = builder.getVarFromNode( this, nodeType );\r\n\r\n\t\t\t\tpropertyName = builder.getPropertyName( nodeVar );\r\n\r\n\t\t\t\tlet snippet = null;\r\n\r\n\t\t\t\tif ( levelNode && levelNode.isNode === true ) {\r\n\r\n\t\t\t\t\tconst levelSnippet = levelNode.build( builder, 'float' );\r\n\r\n\t\t\t\t\tsnippet = builder.getTextureLevel( texture, textureProperty, uvSnippet, levelSnippet );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tsnippet = builder.getTexture( texture, textureProperty, uvSnippet );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tbuilder.addLineFlowCode( `${propertyName} = ${snippet}` );\r\n\r\n\t\t\t\tnodeData.snippet = snippet;\r\n\t\t\t\tnodeData.propertyName = propertyName;\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn builder.format( propertyName, nodeType, output );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tserialize( data ) {\r\n\r\n\t\tsuper.serialize( data );\r\n\r\n\t\tdata.value = this.value.toJSON( data.meta ).uuid;\r\n\r\n\t}\r\n\r\n\tdeserialize( data ) {\r\n\r\n\t\tsuper.deserialize( data );\r\n\r\n\t\tthis.value = data.meta.textures[ data.value ];\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default TextureNode;\r\n\r\nexport const texture = nodeProxy( TextureNode );\r\nexport const sampler = ( aTexture ) => ( aTexture.isNode === true ? aTexture : texture( aTexture ) ).convert( 'sampler' );\r\n\r\naddNodeElement( 'texture', texture );\r\n\r\naddNodeClass( TextureNode );\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}