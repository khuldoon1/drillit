{"ast":null,"code":"import DataMap from './DataMap.js';\nimport { AttributeType } from './Constants.js';\nclass Bindings extends DataMap {\n  constructor(backend, nodes, textures, attributes, pipelines, info) {\n    super();\n    this.backend = backend;\n    this.textures = textures;\n    this.pipelines = pipelines;\n    this.attributes = attributes;\n    this.nodes = nodes;\n    this.info = info;\n    this.pipelines.bindings = this; // assign bindings to pipelines\n\n    this.updateMap = new WeakMap();\n  }\n  getForRender(renderObject) {\n    const bindings = renderObject.getBindings();\n    const data = this.get(renderObject);\n    if (data.bindings !== bindings) {\n      // each object defines an array of bindings (ubos, textures, samplers etc.)\n\n      data.bindings = bindings;\n      this._init(bindings);\n      const pipeline = this.pipelines.getForRender(renderObject);\n      this.backend.createBindings(bindings, pipeline);\n    }\n    return data.bindings;\n  }\n  getForCompute(computeNode) {\n    const data = this.get(computeNode);\n    if (data.bindings === undefined) {\n      const nodeBuilder = this.nodes.getForCompute(computeNode);\n      const bindings = nodeBuilder.getBindings();\n      data.bindings = bindings;\n      this._init(bindings);\n      const pipeline = this.pipelines.getForCompute(computeNode);\n      this.backend.createBindings(bindings, pipeline);\n    }\n    return data.bindings;\n  }\n  updateForCompute(computeNode) {\n    this._update(computeNode, this.getForCompute(computeNode));\n  }\n  updateForRender(renderObject) {\n    this._update(renderObject, this.getForRender(renderObject));\n  }\n  _init(bindings) {\n    for (const binding of bindings) {\n      if (binding.isSampler || binding.isSampledTexture) {\n        this.textures.updateTexture(binding.texture);\n      } else if (binding.isStorageBuffer) {\n        const attribute = binding.attribute;\n        this.attributes.update(attribute, AttributeType.STORAGE);\n      }\n    }\n  }\n  _update(object, bindings) {\n    const {\n      backend\n    } = this;\n    const updateMap = this.updateMap;\n    const frame = this.info.render.frame;\n    let needsBindingsUpdate = false;\n\n    // iterate over all bindings and check if buffer updates or a new binding group is required\n\n    for (const binding of bindings) {\n      const isShared = binding.isShared;\n      const isUpdated = updateMap.get(binding) === frame;\n      if (isShared && isUpdated) continue;\n      if (binding.isUniformBuffer) {\n        const needsUpdate = binding.update();\n        if (needsUpdate) {\n          backend.updateBinding(binding);\n        }\n      } else if (binding.isSampledTexture) {\n        if (binding.needsBindingsUpdate) needsBindingsUpdate = true;\n        const needsUpdate = binding.update();\n        if (needsUpdate) {\n          this.textures.updateTexture(binding.texture);\n        }\n      }\n      updateMap.set(binding, frame);\n    }\n    if (needsBindingsUpdate === true) {\n      const pipeline = this.pipelines.getForRender(object);\n      this.backend.updateBindings(bindings, pipeline);\n    }\n  }\n  dispose() {\n    super.dispose();\n    this.updateMap = new WeakMap();\n  }\n}\nexport default Bindings;","map":{"version":3,"names":["DataMap","AttributeType","Bindings","constructor","backend","nodes","textures","attributes","pipelines","info","bindings","updateMap","WeakMap","getForRender","renderObject","getBindings","data","get","_init","pipeline","createBindings","getForCompute","computeNode","undefined","nodeBuilder","updateForCompute","_update","updateForRender","binding","isSampler","isSampledTexture","updateTexture","texture","isStorageBuffer","attribute","update","STORAGE","object","frame","render","needsBindingsUpdate","isShared","isUpdated","isUniformBuffer","needsUpdate","updateBinding","set","updateBindings","dispose"],"sources":["C:/Users/LENOVO/Desktop/reactjsProject/drillit/node_modules/three/examples/jsm/renderers/common/Bindings.js"],"sourcesContent":["import DataMap from './DataMap.js';\r\nimport { AttributeType } from './Constants.js';\r\n\r\nclass Bindings extends DataMap {\r\n\r\n\tconstructor( backend, nodes, textures, attributes, pipelines, info ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.backend = backend;\r\n\t\tthis.textures = textures;\r\n\t\tthis.pipelines = pipelines;\r\n\t\tthis.attributes = attributes;\r\n\t\tthis.nodes = nodes;\r\n\t\tthis.info = info;\r\n\r\n\t\tthis.pipelines.bindings = this; // assign bindings to pipelines\r\n\r\n\t\tthis.updateMap = new WeakMap();\r\n\r\n\t}\r\n\r\n\tgetForRender( renderObject ) {\r\n\r\n\t\tconst bindings = renderObject.getBindings();\r\n\r\n\t\tconst data = this.get( renderObject );\r\n\r\n\t\tif ( data.bindings !== bindings ) {\r\n\r\n\t\t\t// each object defines an array of bindings (ubos, textures, samplers etc.)\r\n\r\n\t\t\tdata.bindings = bindings;\r\n\r\n\t\t\tthis._init( bindings );\r\n\r\n\t\t\tconst pipeline = this.pipelines.getForRender( renderObject );\r\n\r\n\t\t\tthis.backend.createBindings( bindings, pipeline );\r\n\r\n\t\t}\r\n\r\n\t\treturn data.bindings;\r\n\r\n\t}\r\n\r\n\tgetForCompute( computeNode ) {\r\n\r\n\t\tconst data = this.get( computeNode );\r\n\r\n\t\tif ( data.bindings === undefined ) {\r\n\r\n\t\t\tconst nodeBuilder = this.nodes.getForCompute( computeNode );\r\n\r\n\t\t\tconst bindings = nodeBuilder.getBindings();\r\n\r\n\t\t\tdata.bindings = bindings;\r\n\r\n\t\t\tthis._init( bindings );\r\n\r\n\t\t\tconst pipeline = this.pipelines.getForCompute( computeNode );\r\n\r\n\t\t\tthis.backend.createBindings( bindings, pipeline );\r\n\r\n\t\t}\r\n\r\n\t\treturn data.bindings;\r\n\r\n\t}\r\n\r\n\tupdateForCompute( computeNode ) {\r\n\r\n\t\tthis._update( computeNode, this.getForCompute( computeNode ) );\r\n\r\n\t}\r\n\r\n\tupdateForRender( renderObject ) {\r\n\r\n\t\tthis._update( renderObject, this.getForRender( renderObject ) );\r\n\r\n\t}\r\n\r\n\t_init( bindings ) {\r\n\r\n\t\tfor ( const binding of bindings ) {\r\n\r\n\t\t\tif ( binding.isSampler || binding.isSampledTexture ) {\r\n\r\n\t\t\t\tthis.textures.updateTexture( binding.texture );\r\n\r\n\t\t\t} else if ( binding.isStorageBuffer ) {\r\n\r\n\t\t\t\tconst attribute = binding.attribute;\r\n\r\n\t\t\t\tthis.attributes.update( attribute, AttributeType.STORAGE );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t_update( object, bindings ) {\r\n\r\n\t\tconst { backend } = this;\r\n\r\n\t\tconst updateMap = this.updateMap;\r\n\t\tconst frame = this.info.render.frame;\r\n\r\n\t\tlet needsBindingsUpdate = false;\r\n\r\n\t\t// iterate over all bindings and check if buffer updates or a new binding group is required\r\n\r\n\t\tfor ( const binding of bindings ) {\r\n\r\n\t\t\tconst isShared = binding.isShared;\r\n\t\t\tconst isUpdated = updateMap.get( binding ) === frame;\r\n\r\n\t\t\tif ( isShared && isUpdated ) continue;\r\n\r\n\t\t\tif ( binding.isUniformBuffer ) {\r\n\r\n\t\t\t\tconst needsUpdate = binding.update();\r\n\r\n\t\t\t\tif ( needsUpdate ) {\r\n\r\n\t\t\t\t\tbackend.updateBinding( binding );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else if ( binding.isSampledTexture ) {\r\n\r\n\t\t\t\tif ( binding.needsBindingsUpdate ) needsBindingsUpdate = true;\r\n\r\n\t\t\t\tconst needsUpdate = binding.update();\r\n\r\n\t\t\t\tif ( needsUpdate ) {\r\n\r\n\t\t\t\t\tthis.textures.updateTexture( binding.texture );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tupdateMap.set( binding, frame );\r\n\r\n\t\t}\r\n\r\n\t\tif ( needsBindingsUpdate === true ) {\r\n\r\n\t\t\tconst pipeline = this.pipelines.getForRender( object );\r\n\r\n\t\t\tthis.backend.updateBindings( bindings, pipeline );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tdispose() {\r\n\r\n\t\tsuper.dispose();\r\n\r\n\t\tthis.updateMap = new WeakMap();\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default Bindings;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}