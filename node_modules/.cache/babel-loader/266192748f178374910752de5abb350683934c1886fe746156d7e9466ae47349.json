{"ast":null,"code":"import NodeMaterial, { addNodeMaterial } from './NodeMaterial.js';\nimport { uniform } from '../core/UniformNode.js';\nimport { cameraProjectionMatrix } from '../accessors/CameraNode.js';\nimport { materialRotation } from '../accessors/MaterialNode.js';\nimport { modelViewMatrix, modelWorldMatrix } from '../accessors/ModelNode.js';\nimport { positionLocal } from '../accessors/PositionNode.js';\nimport { vec2, vec3, vec4 } from '../shadernode/ShaderNode.js';\nimport { SpriteMaterial } from 'three';\nconst defaultValues = new SpriteMaterial();\nclass SpriteNodeMaterial extends NodeMaterial {\n  constructor(parameters) {\n    super();\n    this.isSpriteNodeMaterial = true;\n    this.lights = false;\n    this.normals = false;\n    this.colorNode = null;\n    this.opacityNode = null;\n    this.alphaTestNode = null;\n    this.lightNode = null;\n    this.positionNode = null;\n    this.rotationNode = null;\n    this.scaleNode = null;\n    this.setDefaultValues(defaultValues);\n    this.setValues(parameters);\n  }\n  constructPosition(_ref) {\n    let {\n      object,\n      context\n    } = _ref;\n    // < VERTEX STAGE >\n\n    const {\n      positionNode,\n      rotationNode,\n      scaleNode\n    } = this;\n    const vertex = positionLocal;\n    let mvPosition = modelViewMatrix.mul(vec3(positionNode || 0));\n    let scale = vec2(modelWorldMatrix[0].xyz.length(), modelWorldMatrix[1].xyz.length());\n    if (scaleNode !== null) {\n      scale = scale.mul(scaleNode);\n    }\n    let alignedPosition = vertex.xy;\n    if (object.center && object.center.isVector2 === true) {\n      alignedPosition = alignedPosition.sub(uniform(object.center).sub(0.5));\n    }\n    alignedPosition = alignedPosition.mul(scale);\n    const rotation = rotationNode || materialRotation;\n    const cosAngle = rotation.cos();\n    const sinAngle = rotation.sin();\n    const rotatedPosition = vec2(\n    // @TODO: Maybe we can create mat2 and write something like rotationMatrix.mul( alignedPosition )?\n    vec2(cosAngle, sinAngle.negate()).dot(alignedPosition), vec2(sinAngle, cosAngle).dot(alignedPosition));\n    mvPosition = vec4(mvPosition.xy.add(rotatedPosition), mvPosition.zw);\n    const modelViewProjection = cameraProjectionMatrix.mul(mvPosition);\n    context.vertex = vertex;\n    return modelViewProjection;\n  }\n  copy(source) {\n    this.colorNode = source.colorNode;\n    this.opacityNode = source.opacityNode;\n    this.alphaTestNode = source.alphaTestNode;\n    this.lightNode = source.lightNode;\n    this.positionNode = source.positionNode;\n    this.rotationNode = source.rotationNode;\n    this.scaleNode = source.scaleNode;\n    return super.copy(source);\n  }\n}\nexport default SpriteNodeMaterial;\naddNodeMaterial(SpriteNodeMaterial);","map":{"version":3,"names":["NodeMaterial","addNodeMaterial","uniform","cameraProjectionMatrix","materialRotation","modelViewMatrix","modelWorldMatrix","positionLocal","vec2","vec3","vec4","SpriteMaterial","defaultValues","SpriteNodeMaterial","constructor","parameters","isSpriteNodeMaterial","lights","normals","colorNode","opacityNode","alphaTestNode","lightNode","positionNode","rotationNode","scaleNode","setDefaultValues","setValues","constructPosition","_ref","object","context","vertex","mvPosition","mul","scale","xyz","length","alignedPosition","xy","center","isVector2","sub","rotation","cosAngle","cos","sinAngle","sin","rotatedPosition","negate","dot","add","zw","modelViewProjection","copy","source"],"sources":["C:/Users/LENOVO/Desktop/reactjsProject/drillit/node_modules/three/examples/jsm/nodes/materials/SpriteNodeMaterial.js"],"sourcesContent":["import NodeMaterial, { addNodeMaterial } from './NodeMaterial.js';\r\nimport { uniform } from '../core/UniformNode.js';\r\nimport { cameraProjectionMatrix } from '../accessors/CameraNode.js';\r\nimport { materialRotation } from '../accessors/MaterialNode.js';\r\nimport { modelViewMatrix, modelWorldMatrix } from '../accessors/ModelNode.js';\r\nimport { positionLocal } from '../accessors/PositionNode.js';\r\nimport { vec2, vec3, vec4 } from '../shadernode/ShaderNode.js';\r\n\r\nimport { SpriteMaterial } from 'three';\r\n\r\nconst defaultValues = new SpriteMaterial();\r\n\r\nclass SpriteNodeMaterial extends NodeMaterial {\r\n\r\n\tconstructor( parameters ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.isSpriteNodeMaterial = true;\r\n\r\n\t\tthis.lights = false;\r\n\t\tthis.normals = false;\r\n\r\n\t\tthis.colorNode = null;\r\n\t\tthis.opacityNode = null;\r\n\r\n\t\tthis.alphaTestNode = null;\r\n\r\n\t\tthis.lightNode = null;\r\n\r\n\t\tthis.positionNode = null;\r\n\t\tthis.rotationNode = null;\r\n\t\tthis.scaleNode = null;\r\n\r\n\t\tthis.setDefaultValues( defaultValues );\r\n\r\n\t\tthis.setValues( parameters );\r\n\r\n\t}\r\n\r\n\tconstructPosition( { object, context } ) {\r\n\r\n\t\t// < VERTEX STAGE >\r\n\r\n\t\tconst { positionNode, rotationNode, scaleNode } = this;\r\n\r\n\t\tconst vertex = positionLocal;\r\n\r\n\t\tlet mvPosition = modelViewMatrix.mul( vec3( positionNode || 0 ) );\r\n\r\n\t\tlet scale = vec2( modelWorldMatrix[ 0 ].xyz.length(), modelWorldMatrix[ 1 ].xyz.length() );\r\n\r\n\t\tif ( scaleNode !== null ) {\r\n\r\n\t\t\tscale = scale.mul( scaleNode );\r\n\r\n\t\t}\r\n\r\n\t\tlet alignedPosition = vertex.xy;\r\n\r\n\t\tif ( object.center && object.center.isVector2 === true ) {\r\n\r\n\t\t\talignedPosition = alignedPosition.sub( uniform( object.center ).sub( 0.5 ) );\r\n\r\n\t\t}\r\n\r\n\t\talignedPosition = alignedPosition.mul( scale );\r\n\r\n\t\tconst rotation = rotationNode || materialRotation;\r\n\r\n\t\tconst cosAngle = rotation.cos();\r\n\t\tconst sinAngle = rotation.sin();\r\n\r\n\t\tconst rotatedPosition = vec2( // @TODO: Maybe we can create mat2 and write something like rotationMatrix.mul( alignedPosition )?\r\n\t\t\tvec2( cosAngle, sinAngle.negate() ).dot( alignedPosition ),\r\n\t\t\tvec2( sinAngle, cosAngle ).dot( alignedPosition )\r\n\t\t);\r\n\r\n\t\tmvPosition = vec4( mvPosition.xy.add( rotatedPosition ), mvPosition.zw );\r\n\r\n\t\tconst modelViewProjection = cameraProjectionMatrix.mul( mvPosition );\r\n\r\n\t\tcontext.vertex = vertex;\r\n\r\n\t\treturn modelViewProjection;\r\n\r\n\t}\r\n\r\n\tcopy( source ) {\r\n\r\n\t\tthis.colorNode = source.colorNode;\r\n\t\tthis.opacityNode = source.opacityNode;\r\n\r\n\t\tthis.alphaTestNode = source.alphaTestNode;\r\n\r\n\t\tthis.lightNode = source.lightNode;\r\n\r\n\t\tthis.positionNode = source.positionNode;\r\n\t\tthis.rotationNode = source.rotationNode;\r\n\t\tthis.scaleNode = source.scaleNode;\r\n\r\n\t\treturn super.copy( source );\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default SpriteNodeMaterial;\r\n\r\naddNodeMaterial( SpriteNodeMaterial );\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}