{"ast":null,"code":"import Node, { addNodeClass } from '../core/Node.js';\nimport { vectorComponents } from '../core/constants.js';\nconst stringVectorComponents = vectorComponents.join('');\nclass SplitNode extends Node {\n  constructor(node) {\n    let components = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'x';\n    super();\n    this.node = node;\n    this.components = components;\n  }\n  getVectorLength() {\n    let vectorLength = this.components.length;\n    for (const c of this.components) {\n      vectorLength = Math.max(vectorComponents.indexOf(c) + 1, vectorLength);\n    }\n    return vectorLength;\n  }\n  getNodeType(builder) {\n    return builder.getTypeFromLength(this.components.length);\n  }\n  generate(builder, output) {\n    const node = this.node;\n    const nodeTypeLength = builder.getTypeLength(node.getNodeType(builder));\n    let snippet = null;\n    if (nodeTypeLength > 1) {\n      let type = null;\n      const componentsLength = this.getVectorLength();\n      if (componentsLength >= nodeTypeLength) {\n        // needed expand the input node\n\n        type = builder.getTypeFromLength(this.getVectorLength());\n      }\n      const nodeSnippet = node.build(builder, type);\n      if (this.components.length === nodeTypeLength && this.components === stringVectorComponents.slice(0, this.components.length)) {\n        // unecessary swizzle\n\n        snippet = builder.format(nodeSnippet, type, output);\n      } else {\n        snippet = builder.format(`${nodeSnippet}.${this.components}`, this.getNodeType(builder), output);\n      }\n    } else {\n      // ignore .components if .node returns float/integer\n\n      snippet = node.build(builder, output);\n    }\n    return snippet;\n  }\n  serialize(data) {\n    super.serialize(data);\n    data.components = this.components;\n  }\n  deserialize(data) {\n    super.deserialize(data);\n    this.components = data.components;\n  }\n}\nexport default SplitNode;\naddNodeClass(SplitNode);","map":{"version":3,"names":["Node","addNodeClass","vectorComponents","stringVectorComponents","join","SplitNode","constructor","node","components","arguments","length","undefined","getVectorLength","vectorLength","c","Math","max","indexOf","getNodeType","builder","getTypeFromLength","generate","output","nodeTypeLength","getTypeLength","snippet","type","componentsLength","nodeSnippet","build","slice","format","serialize","data","deserialize"],"sources":["C:/Users/LENOVO/Desktop/reactjsProject/drillit/node_modules/three/examples/jsm/nodes/utils/SplitNode.js"],"sourcesContent":["import Node, { addNodeClass } from '../core/Node.js';\r\nimport { vectorComponents } from '../core/constants.js';\r\n\r\nconst stringVectorComponents = vectorComponents.join( '' );\r\n\r\nclass SplitNode extends Node {\r\n\r\n\tconstructor( node, components = 'x' ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.node = node;\r\n\t\tthis.components = components;\r\n\r\n\t}\r\n\r\n\tgetVectorLength() {\r\n\r\n\t\tlet vectorLength = this.components.length;\r\n\r\n\t\tfor ( const c of this.components ) {\r\n\r\n\t\t\tvectorLength = Math.max( vectorComponents.indexOf( c ) + 1, vectorLength );\r\n\r\n\t\t}\r\n\r\n\t\treturn vectorLength;\r\n\r\n\t}\r\n\r\n\tgetNodeType( builder ) {\r\n\r\n\t\treturn builder.getTypeFromLength( this.components.length );\r\n\r\n\t}\r\n\r\n\tgenerate( builder, output ) {\r\n\r\n\t\tconst node = this.node;\r\n\t\tconst nodeTypeLength = builder.getTypeLength( node.getNodeType( builder ) );\r\n\r\n\t\tlet snippet = null;\r\n\r\n\t\tif ( nodeTypeLength > 1 ) {\r\n\r\n\t\t\tlet type = null;\r\n\r\n\t\t\tconst componentsLength = this.getVectorLength();\r\n\r\n\t\t\tif ( componentsLength >= nodeTypeLength ) {\r\n\r\n\t\t\t\t// needed expand the input node\r\n\r\n\t\t\t\ttype = builder.getTypeFromLength( this.getVectorLength() );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tconst nodeSnippet = node.build( builder, type );\r\n\r\n\t\t\tif ( this.components.length === nodeTypeLength && this.components === stringVectorComponents.slice( 0, this.components.length ) ) {\r\n\r\n\t\t\t\t// unecessary swizzle\r\n\r\n\t\t\t\tsnippet = builder.format( nodeSnippet, type, output );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tsnippet = builder.format( `${nodeSnippet}.${this.components}`, this.getNodeType( builder ), output );\r\n\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\r\n\t\t\t// ignore .components if .node returns float/integer\r\n\r\n\t\t\tsnippet = node.build( builder, output );\r\n\r\n\t\t}\r\n\r\n\t\treturn snippet;\r\n\r\n\t}\r\n\r\n\tserialize( data ) {\r\n\r\n\t\tsuper.serialize( data );\r\n\r\n\t\tdata.components = this.components;\r\n\r\n\t}\r\n\r\n\tdeserialize( data ) {\r\n\r\n\t\tsuper.deserialize( data );\r\n\r\n\t\tthis.components = data.components;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default SplitNode;\r\n\r\naddNodeClass( SplitNode );\r\n"],"mappings":"AAAA,OAAOA,IAAI,IAAIC,YAAY,QAAQ,iBAAiB;AACpD,SAASC,gBAAgB,QAAQ,sBAAsB;AAEvD,MAAMC,sBAAsB,GAAGD,gBAAgB,CAACE,IAAI,CAAE,EAAG,CAAC;AAE1D,MAAMC,SAAS,SAASL,IAAI,CAAC;EAE5BM,WAAWA,CAAEC,IAAI,EAAqB;IAAA,IAAnBC,UAAU,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,GAAG;IAElC,KAAK,CAAC,CAAC;IAEP,IAAI,CAACF,IAAI,GAAGA,IAAI;IAChB,IAAI,CAACC,UAAU,GAAGA,UAAU;EAE7B;EAEAI,eAAeA,CAAA,EAAG;IAEjB,IAAIC,YAAY,GAAG,IAAI,CAACL,UAAU,CAACE,MAAM;IAEzC,KAAM,MAAMI,CAAC,IAAI,IAAI,CAACN,UAAU,EAAG;MAElCK,YAAY,GAAGE,IAAI,CAACC,GAAG,CAAEd,gBAAgB,CAACe,OAAO,CAAEH,CAAE,CAAC,GAAG,CAAC,EAAED,YAAa,CAAC;IAE3E;IAEA,OAAOA,YAAY;EAEpB;EAEAK,WAAWA,CAAEC,OAAO,EAAG;IAEtB,OAAOA,OAAO,CAACC,iBAAiB,CAAE,IAAI,CAACZ,UAAU,CAACE,MAAO,CAAC;EAE3D;EAEAW,QAAQA,CAAEF,OAAO,EAAEG,MAAM,EAAG;IAE3B,MAAMf,IAAI,GAAG,IAAI,CAACA,IAAI;IACtB,MAAMgB,cAAc,GAAGJ,OAAO,CAACK,aAAa,CAAEjB,IAAI,CAACW,WAAW,CAAEC,OAAQ,CAAE,CAAC;IAE3E,IAAIM,OAAO,GAAG,IAAI;IAElB,IAAKF,cAAc,GAAG,CAAC,EAAG;MAEzB,IAAIG,IAAI,GAAG,IAAI;MAEf,MAAMC,gBAAgB,GAAG,IAAI,CAACf,eAAe,CAAC,CAAC;MAE/C,IAAKe,gBAAgB,IAAIJ,cAAc,EAAG;QAEzC;;QAEAG,IAAI,GAAGP,OAAO,CAACC,iBAAiB,CAAE,IAAI,CAACR,eAAe,CAAC,CAAE,CAAC;MAE3D;MAEA,MAAMgB,WAAW,GAAGrB,IAAI,CAACsB,KAAK,CAAEV,OAAO,EAAEO,IAAK,CAAC;MAE/C,IAAK,IAAI,CAAClB,UAAU,CAACE,MAAM,KAAKa,cAAc,IAAI,IAAI,CAACf,UAAU,KAAKL,sBAAsB,CAAC2B,KAAK,CAAE,CAAC,EAAE,IAAI,CAACtB,UAAU,CAACE,MAAO,CAAC,EAAG;QAEjI;;QAEAe,OAAO,GAAGN,OAAO,CAACY,MAAM,CAAEH,WAAW,EAAEF,IAAI,EAAEJ,MAAO,CAAC;MAEtD,CAAC,MAAM;QAENG,OAAO,GAAGN,OAAO,CAACY,MAAM,CAAG,GAAEH,WAAY,IAAG,IAAI,CAACpB,UAAW,EAAC,EAAE,IAAI,CAACU,WAAW,CAAEC,OAAQ,CAAC,EAAEG,MAAO,CAAC;MAErG;IAED,CAAC,MAAM;MAEN;;MAEAG,OAAO,GAAGlB,IAAI,CAACsB,KAAK,CAAEV,OAAO,EAAEG,MAAO,CAAC;IAExC;IAEA,OAAOG,OAAO;EAEf;EAEAO,SAASA,CAAEC,IAAI,EAAG;IAEjB,KAAK,CAACD,SAAS,CAAEC,IAAK,CAAC;IAEvBA,IAAI,CAACzB,UAAU,GAAG,IAAI,CAACA,UAAU;EAElC;EAEA0B,WAAWA,CAAED,IAAI,EAAG;IAEnB,KAAK,CAACC,WAAW,CAAED,IAAK,CAAC;IAEzB,IAAI,CAACzB,UAAU,GAAGyB,IAAI,CAACzB,UAAU;EAElC;AAED;AAEA,eAAeH,SAAS;AAExBJ,YAAY,CAAEI,SAAU,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}