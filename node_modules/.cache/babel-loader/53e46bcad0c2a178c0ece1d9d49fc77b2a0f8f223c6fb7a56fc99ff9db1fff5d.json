{"ast":null,"code":"import CodeNode from './CodeNode.js';\nimport { addNodeClass } from '../core/Node.js';\nimport { nodeObject } from '../shadernode/ShaderNode.js';\nclass FunctionNode extends CodeNode {\n  constructor() {\n    let code = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n    let includes = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n    super(code, includes);\n    this.keywords = {};\n  }\n  getNodeType(builder) {\n    return this.getNodeFunction(builder).type;\n  }\n  getInputs(builder) {\n    return this.getNodeFunction(builder).inputs;\n  }\n  getNodeFunction(builder) {\n    const nodeData = builder.getDataFromNode(this);\n    let nodeFunction = nodeData.nodeFunction;\n    if (nodeFunction === undefined) {\n      nodeFunction = builder.parser.parseFunction(this.code);\n      nodeData.nodeFunction = nodeFunction;\n    }\n    return nodeFunction;\n  }\n  generate(builder, output) {\n    super.generate(builder);\n    const nodeFunction = this.getNodeFunction(builder);\n    const name = nodeFunction.name;\n    const type = nodeFunction.type;\n    const nodeCode = builder.getCodeFromNode(this, type);\n    if (name !== '') {\n      // use a custom property name\n\n      nodeCode.name = name;\n    }\n    const propertyName = builder.getPropertyName(nodeCode);\n    let code = this.getNodeFunction(builder).getCode(propertyName);\n    const keywords = this.keywords;\n    const keywordsProperties = Object.keys(keywords);\n    if (keywordsProperties.length > 0) {\n      for (const property of keywordsProperties) {\n        const propertyRegExp = new RegExp(`\\\\b${property}\\\\b`, 'g');\n        const nodeProperty = keywords[property].build(builder, 'property');\n        code = code.replace(propertyRegExp, nodeProperty);\n      }\n    }\n    nodeCode.code = code;\n    if (output === 'property') {\n      return propertyName;\n    } else {\n      return builder.format(`${propertyName}()`, type, output);\n    }\n  }\n}\nexport default FunctionNode;\nexport const func = (code, includes) => nodeObject(new FunctionNode(code, includes));\nexport const fn = (code, includes) => func(code, includes).call;\naddNodeClass(FunctionNode);","map":{"version":3,"names":["CodeNode","addNodeClass","nodeObject","FunctionNode","constructor","code","arguments","length","undefined","includes","keywords","getNodeType","builder","getNodeFunction","type","getInputs","inputs","nodeData","getDataFromNode","nodeFunction","parser","parseFunction","generate","output","name","nodeCode","getCodeFromNode","propertyName","getPropertyName","getCode","keywordsProperties","Object","keys","property","propertyRegExp","RegExp","nodeProperty","build","replace","format","func","fn","call"],"sources":["C:/Users/LENOVO/Desktop/reactjsProject/drillit/node_modules/three/examples/jsm/nodes/code/FunctionNode.js"],"sourcesContent":["import CodeNode from './CodeNode.js';\r\nimport { addNodeClass } from '../core/Node.js';\r\nimport { nodeObject } from '../shadernode/ShaderNode.js';\r\n\r\nclass FunctionNode extends CodeNode {\r\n\r\n\tconstructor( code = '', includes = [] ) {\r\n\r\n\t\tsuper( code, includes );\r\n\r\n\t\tthis.keywords = {};\r\n\r\n\t}\r\n\r\n\tgetNodeType( builder ) {\r\n\r\n\t\treturn this.getNodeFunction( builder ).type;\r\n\r\n\t}\r\n\r\n\tgetInputs( builder ) {\r\n\r\n\t\treturn this.getNodeFunction( builder ).inputs;\r\n\r\n\t}\r\n\r\n\tgetNodeFunction( builder ) {\r\n\r\n\t\tconst nodeData = builder.getDataFromNode( this );\r\n\r\n\t\tlet nodeFunction = nodeData.nodeFunction;\r\n\r\n\t\tif ( nodeFunction === undefined ) {\r\n\r\n\t\t\tnodeFunction = builder.parser.parseFunction( this.code );\r\n\r\n\t\t\tnodeData.nodeFunction = nodeFunction;\r\n\r\n\t\t}\r\n\r\n\t\treturn nodeFunction;\r\n\r\n\t}\r\n\r\n\tgenerate( builder, output ) {\r\n\r\n\t\tsuper.generate( builder );\r\n\r\n\t\tconst nodeFunction = this.getNodeFunction( builder );\r\n\r\n\t\tconst name = nodeFunction.name;\r\n\t\tconst type = nodeFunction.type;\r\n\r\n\t\tconst nodeCode = builder.getCodeFromNode( this, type );\r\n\r\n\t\tif ( name !== '' ) {\r\n\r\n\t\t\t// use a custom property name\r\n\r\n\t\t\tnodeCode.name = name;\r\n\r\n\t\t}\r\n\r\n\t\tconst propertyName = builder.getPropertyName( nodeCode );\r\n\r\n\t\tlet code = this.getNodeFunction( builder ).getCode( propertyName );\r\n\r\n\t\tconst keywords = this.keywords;\r\n\t\tconst keywordsProperties = Object.keys( keywords );\r\n\r\n\t\tif ( keywordsProperties.length > 0 ) {\r\n\r\n\t\t\tfor ( const property of keywordsProperties ) {\r\n\r\n\t\t\t\tconst propertyRegExp = new RegExp( `\\\\b${property}\\\\b`, 'g' );\r\n\t\t\t\tconst nodeProperty = keywords[ property ].build( builder, 'property' );\r\n\r\n\t\t\t\tcode = code.replace( propertyRegExp, nodeProperty );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tnodeCode.code = code;\r\n\r\n\t\tif ( output === 'property' ) {\r\n\r\n\t\t\treturn propertyName;\r\n\r\n\t\t} else {\r\n\r\n\t\t\treturn builder.format( `${ propertyName }()`, type, output );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default FunctionNode;\r\n\r\nexport const func = ( code, includes ) => nodeObject( new FunctionNode( code, includes ) );\r\n\r\nexport const fn = ( code, includes ) => func( code, includes ).call;\r\n\r\naddNodeClass( FunctionNode );\r\n"],"mappings":"AAAA,OAAOA,QAAQ,MAAM,eAAe;AACpC,SAASC,YAAY,QAAQ,iBAAiB;AAC9C,SAASC,UAAU,QAAQ,6BAA6B;AAExD,MAAMC,YAAY,SAASH,QAAQ,CAAC;EAEnCI,WAAWA,CAAA,EAA6B;IAAA,IAA3BC,IAAI,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,EAAE;IAAA,IAAEG,QAAQ,GAAAH,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,EAAE;IAEpC,KAAK,CAAED,IAAI,EAAEI,QAAS,CAAC;IAEvB,IAAI,CAACC,QAAQ,GAAG,CAAC,CAAC;EAEnB;EAEAC,WAAWA,CAAEC,OAAO,EAAG;IAEtB,OAAO,IAAI,CAACC,eAAe,CAAED,OAAQ,CAAC,CAACE,IAAI;EAE5C;EAEAC,SAASA,CAAEH,OAAO,EAAG;IAEpB,OAAO,IAAI,CAACC,eAAe,CAAED,OAAQ,CAAC,CAACI,MAAM;EAE9C;EAEAH,eAAeA,CAAED,OAAO,EAAG;IAE1B,MAAMK,QAAQ,GAAGL,OAAO,CAACM,eAAe,CAAE,IAAK,CAAC;IAEhD,IAAIC,YAAY,GAAGF,QAAQ,CAACE,YAAY;IAExC,IAAKA,YAAY,KAAKX,SAAS,EAAG;MAEjCW,YAAY,GAAGP,OAAO,CAACQ,MAAM,CAACC,aAAa,CAAE,IAAI,CAAChB,IAAK,CAAC;MAExDY,QAAQ,CAACE,YAAY,GAAGA,YAAY;IAErC;IAEA,OAAOA,YAAY;EAEpB;EAEAG,QAAQA,CAAEV,OAAO,EAAEW,MAAM,EAAG;IAE3B,KAAK,CAACD,QAAQ,CAAEV,OAAQ,CAAC;IAEzB,MAAMO,YAAY,GAAG,IAAI,CAACN,eAAe,CAAED,OAAQ,CAAC;IAEpD,MAAMY,IAAI,GAAGL,YAAY,CAACK,IAAI;IAC9B,MAAMV,IAAI,GAAGK,YAAY,CAACL,IAAI;IAE9B,MAAMW,QAAQ,GAAGb,OAAO,CAACc,eAAe,CAAE,IAAI,EAAEZ,IAAK,CAAC;IAEtD,IAAKU,IAAI,KAAK,EAAE,EAAG;MAElB;;MAEAC,QAAQ,CAACD,IAAI,GAAGA,IAAI;IAErB;IAEA,MAAMG,YAAY,GAAGf,OAAO,CAACgB,eAAe,CAAEH,QAAS,CAAC;IAExD,IAAIpB,IAAI,GAAG,IAAI,CAACQ,eAAe,CAAED,OAAQ,CAAC,CAACiB,OAAO,CAAEF,YAAa,CAAC;IAElE,MAAMjB,QAAQ,GAAG,IAAI,CAACA,QAAQ;IAC9B,MAAMoB,kBAAkB,GAAGC,MAAM,CAACC,IAAI,CAAEtB,QAAS,CAAC;IAElD,IAAKoB,kBAAkB,CAACvB,MAAM,GAAG,CAAC,EAAG;MAEpC,KAAM,MAAM0B,QAAQ,IAAIH,kBAAkB,EAAG;QAE5C,MAAMI,cAAc,GAAG,IAAIC,MAAM,CAAG,MAAKF,QAAS,KAAI,EAAE,GAAI,CAAC;QAC7D,MAAMG,YAAY,GAAG1B,QAAQ,CAAEuB,QAAQ,CAAE,CAACI,KAAK,CAAEzB,OAAO,EAAE,UAAW,CAAC;QAEtEP,IAAI,GAAGA,IAAI,CAACiC,OAAO,CAAEJ,cAAc,EAAEE,YAAa,CAAC;MAEpD;IAED;IAEAX,QAAQ,CAACpB,IAAI,GAAGA,IAAI;IAEpB,IAAKkB,MAAM,KAAK,UAAU,EAAG;MAE5B,OAAOI,YAAY;IAEpB,CAAC,MAAM;MAEN,OAAOf,OAAO,CAAC2B,MAAM,CAAG,GAAGZ,YAAc,IAAG,EAAEb,IAAI,EAAES,MAAO,CAAC;IAE7D;EAED;AAED;AAEA,eAAepB,YAAY;AAE3B,OAAO,MAAMqC,IAAI,GAAGA,CAAEnC,IAAI,EAAEI,QAAQ,KAAMP,UAAU,CAAE,IAAIC,YAAY,CAAEE,IAAI,EAAEI,QAAS,CAAE,CAAC;AAE1F,OAAO,MAAMgC,EAAE,GAAGA,CAAEpC,IAAI,EAAEI,QAAQ,KAAM+B,IAAI,CAAEnC,IAAI,EAAEI,QAAS,CAAC,CAACiC,IAAI;AAEnEzC,YAAY,CAAEE,YAAa,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}